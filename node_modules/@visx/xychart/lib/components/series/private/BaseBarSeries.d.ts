import React from 'react';
import { AxisScale } from '@visx/axis';
import { BarsProps, SeriesProps } from '../../../types';
export declare type BaseBarSeriesProps<XScale extends AxisScale, YScale extends AxisScale, Datum extends object> = SeriesProps<XScale, YScale, Datum> & {
    /** Rendered component which is passed BarsProps by BaseBarSeries after processing. */
    BarsComponent: React.FC<BarsProps<XScale, YScale>>;
    /**
     * Specify bar padding when bar thickness does not come from a `band` scale.
     * Accepted values are [0, 1], 0 = no padding, 1 = no bar, defaults to 0.1.
     */
    barPadding?: number;
    /** Given a Datum, returns its color. Falls back to theme color if unspecified or if a null-ish value is returned. */
    colorAccessor?: (d: Datum, index: number) => string | null | undefined;
};
declare const _default: <XScale extends import("d3-scale").ScalePoint<any> | import("d3-scale").ScaleBand<any> | import("d3-scale").ScaleLinear<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleOrdinal<any, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleTime<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleLogarithmic<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScalePower<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleSymLog<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleRadial<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleQuantile<import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleQuantize<import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleThreshold<any, import("@visx/axis").AxisScaleOutput, never>, YScale extends import("d3-scale").ScalePoint<any> | import("d3-scale").ScaleBand<any> | import("d3-scale").ScaleLinear<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleOrdinal<any, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleTime<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleLogarithmic<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScalePower<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleSymLog<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleRadial<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleQuantile<import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleQuantize<import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleThreshold<any, import("@visx/axis").AxisScaleOutput, never>, Datum extends object>(props: SeriesProps<XScale, YScale, Datum> & Pick<SeriesProps<import("d3-scale").ScalePoint<any> | import("d3-scale").ScaleBand<any> | import("d3-scale").ScaleLinear<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleOrdinal<any, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleTime<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleLogarithmic<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScalePower<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleSymLog<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleRadial<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleQuantile<import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleQuantize<import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleThreshold<any, import("@visx/axis").AxisScaleOutput, never>, import("d3-scale").ScalePoint<any> | import("d3-scale").ScaleBand<any> | import("d3-scale").ScaleLinear<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleOrdinal<any, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleTime<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleLogarithmic<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScalePower<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleSymLog<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleRadial<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleQuantile<import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleQuantize<import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleThreshold<any, import("@visx/axis").AxisScaleOutput, never>, object> & {
    /** Rendered component which is passed BarsProps by BaseBarSeries after processing. */
    BarsComponent: React.FC<BarsProps<import("d3-scale").ScalePoint<any> | import("d3-scale").ScaleBand<any> | import("d3-scale").ScaleLinear<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleOrdinal<any, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleTime<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleLogarithmic<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScalePower<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleSymLog<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleRadial<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleQuantile<import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleQuantize<import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleThreshold<any, import("@visx/axis").AxisScaleOutput, never>, import("d3-scale").ScalePoint<any> | import("d3-scale").ScaleBand<any> | import("d3-scale").ScaleLinear<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleOrdinal<any, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleTime<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleLogarithmic<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScalePower<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleSymLog<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleRadial<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleQuantile<import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleQuantize<import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleThreshold<any, import("@visx/axis").AxisScaleOutput, never>>>;
    /**
     * Specify bar padding when bar thickness does not come from a `band` scale.
     * Accepted values are [0, 1], 0 = no padding, 1 = no bar, defaults to 0.1.
     */
    barPadding?: number | undefined;
    /** Given a Datum, returns its color. Falls back to theme color if unspecified or if a null-ish value is returned. */
    colorAccessor?: ((d: object, index: number) => string | null | undefined) | undefined;
} & Pick<import("../../../types").DataContextType<import("d3-scale").ScalePoint<any> | import("d3-scale").ScaleBand<any> | import("d3-scale").ScaleLinear<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleOrdinal<any, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleTime<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleLogarithmic<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScalePower<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleSymLog<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleRadial<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleQuantile<import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleQuantize<import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleThreshold<any, import("@visx/axis").AxisScaleOutput, never>, import("d3-scale").ScalePoint<any> | import("d3-scale").ScaleBand<any> | import("d3-scale").ScaleLinear<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleOrdinal<any, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleTime<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleLogarithmic<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScalePower<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleSymLog<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleRadial<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleQuantile<import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleQuantize<import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleThreshold<any, import("@visx/axis").AxisScaleOutput, never>, object>, "xScale" | "yScale">, "colorAccessor" | "BarsComponent" | "barPadding">) => JSX.Element | null;
export default _default;
//# sourceMappingURL=BaseBarSeries.d.ts.map