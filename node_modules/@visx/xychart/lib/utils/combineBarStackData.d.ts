import React from 'react';
import { AxisScale } from '@visx/axis';
import { CombinedStackData, SeriesProps } from '../types';
/** Returns the value which forms a stack group. */
export declare const getStackValue: <XScale extends import("d3-scale").ScalePoint<any> | import("d3-scale").ScaleBand<any> | import("d3-scale").ScaleLinear<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleOrdinal<any, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleTime<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleLogarithmic<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScalePower<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleSymLog<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleRadial<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleQuantile<import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleQuantize<import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleThreshold<any, import("@visx/axis").AxisScaleOutput, never>, YScale extends import("d3-scale").ScalePoint<any> | import("d3-scale").ScaleBand<any> | import("d3-scale").ScaleLinear<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleOrdinal<any, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleTime<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleLogarithmic<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScalePower<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleSymLog<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleRadial<import("@visx/axis").AxisScaleOutput, import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleQuantile<import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleQuantize<import("@visx/axis").AxisScaleOutput, never> | import("d3-scale").ScaleThreshold<any, import("@visx/axis").AxisScaleOutput, never>>(d: Pick<CombinedStackData<XScale, YScale>, "stack">) => Parameters<XScale>[0] | Parameters<YScale>[0];
/**
 * Merges `seriesChildren` `props.data` by their `stack` value which
 * forms the stack grouping (`x` if vertical, `y` if horizontal)
 * and returns `CombinedStackData[]`.
 */
export default function combineBarStackData<XScale extends AxisScale, YScale extends AxisScale, Datum extends object>(seriesChildren: React.ReactElement<SeriesProps<XScale, YScale, Datum>>[], horizontal?: boolean): CombinedStackData<XScale, YScale>[];
//# sourceMappingURL=combineBarStackData.d.ts.map