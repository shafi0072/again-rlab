{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getGlobal, registerGlobal, unregisterGlobal } from '../internal/global-utils';\nimport { ProxyTracerProvider } from '../trace/ProxyTracerProvider';\nimport { isSpanContextValid, wrapSpanContext } from '../trace/spancontext-utils';\nimport { deleteSpan, getSpan, getSpanContext, setSpan, setSpanContext } from '../trace/context-utils';\nvar API_NAME = 'trace';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Tracing API\n */\n\nvar TraceAPI =\n/** @class */\nfunction () {\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  function TraceAPI() {\n    this._proxyTracerProvider = new ProxyTracerProvider();\n    this.wrapSpanContext = wrapSpanContext;\n    this.isSpanContextValid = isSpanContextValid;\n    this.deleteSpan = deleteSpan;\n    this.getSpan = getSpan;\n    this.getSpanContext = getSpanContext;\n    this.setSpan = setSpan;\n    this.setSpanContext = setSpanContext;\n  }\n  /** Get the singleton instance of the Trace API */\n\n\n  TraceAPI.getInstance = function () {\n    if (!this._instance) {\n      this._instance = new TraceAPI();\n    }\n\n    return this._instance;\n  };\n  /**\n   * Set the current global tracer.\n   *\n   * @returns true if the tracer provider was successfully registered, else false\n   */\n\n\n  TraceAPI.prototype.setGlobalTracerProvider = function (provider) {\n    this._proxyTracerProvider.setDelegate(provider);\n\n    return registerGlobal(API_NAME, this._proxyTracerProvider);\n  };\n  /**\n   * Returns the global tracer provider.\n   */\n\n\n  TraceAPI.prototype.getTracerProvider = function () {\n    return getGlobal(API_NAME) || this._proxyTracerProvider;\n  };\n  /**\n   * Returns a tracer from the global tracer provider.\n   */\n\n\n  TraceAPI.prototype.getTracer = function (name, version) {\n    return this.getTracerProvider().getTracer(name, version);\n  };\n  /** Remove the global tracer provider */\n\n\n  TraceAPI.prototype.disable = function () {\n    unregisterGlobal(API_NAME);\n    this._proxyTracerProvider = new ProxyTracerProvider();\n  };\n\n  return TraceAPI;\n}();\n\nexport { TraceAPI };","map":{"version":3,"sources":["../../../src/api/trace.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAEH,SACE,SADF,EAEE,cAFF,EAGE,gBAHF,QAIO,0BAJP;AAKA,SAAS,mBAAT,QAAoC,8BAApC;AACA,SACE,kBADF,EAEE,eAFF,QAGO,4BAHP;AAMA,SACE,UADF,EAEE,OAFF,EAGE,cAHF,EAIE,OAJF,EAKE,cALF,QAMO,wBANP;AAQA,IAAM,QAAQ,GAAG,OAAjB;AAEA;;AAEG;;AACH,IAAA,QAAA;AAAA;AAAA,YAAA;AAKE;AACA,WAAA,QAAA,GAAA;AAHQ,SAAA,oBAAA,GAAuB,IAAI,mBAAJ,EAAvB;AA4CD,SAAA,eAAA,GAAkB,eAAlB;AAEA,SAAA,kBAAA,GAAqB,kBAArB;AAEA,SAAA,UAAA,GAAa,UAAb;AAEA,SAAA,OAAA,GAAU,OAAV;AAEA,SAAA,cAAA,GAAiB,cAAjB;AAEA,SAAA,OAAA,GAAU,OAAV;AAEA,SAAA,cAAA,GAAiB,cAAjB;AArDiB;AAExB;;;AACc,EAAA,QAAA,CAAA,WAAA,GAAd,YAAA;AACE,QAAI,CAAC,KAAK,SAAV,EAAqB;AACnB,WAAK,SAAL,GAAiB,IAAI,QAAJ,EAAjB;AACD;;AAED,WAAO,KAAK,SAAZ;AACD,GANa;AAQd;;;;AAIG;;;AACI,EAAA,QAAA,CAAA,SAAA,CAAA,uBAAA,GAAP,UAA+B,QAA/B,EAAuD;AACrD,SAAK,oBAAL,CAA0B,WAA1B,CAAsC,QAAtC;;AACA,WAAO,cAAc,CAAC,QAAD,EAAW,KAAK,oBAAhB,CAArB;AACD,GAHM;AAKP;;AAEG;;;AACI,EAAA,QAAA,CAAA,SAAA,CAAA,iBAAA,GAAP,YAAA;AACE,WAAO,SAAS,CAAC,QAAD,CAAT,IAAuB,KAAK,oBAAnC;AACD,GAFM;AAIP;;AAEG;;;AACI,EAAA,QAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,IAAjB,EAA+B,OAA/B,EAA+C;AAC7C,WAAO,KAAK,iBAAL,GAAyB,SAAzB,CAAmC,IAAnC,EAAyC,OAAzC,CAAP;AACD,GAFM;AAIP;;;AACO,EAAA,QAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA;AACE,IAAA,gBAAgB,CAAC,QAAD,CAAhB;AACA,SAAK,oBAAL,GAA4B,IAAI,mBAAJ,EAA5B;AACD,GAHM;;AAkBT,SAAA,QAAA;AAAC,CA5DD,EAAA","sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getGlobal, registerGlobal, unregisterGlobal, } from '../internal/global-utils';\nimport { ProxyTracerProvider } from '../trace/ProxyTracerProvider';\nimport { isSpanContextValid, wrapSpanContext, } from '../trace/spancontext-utils';\nimport { deleteSpan, getSpan, getSpanContext, setSpan, setSpanContext, } from '../trace/context-utils';\nvar API_NAME = 'trace';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Tracing API\n */\nvar TraceAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function TraceAPI() {\n        this._proxyTracerProvider = new ProxyTracerProvider();\n        this.wrapSpanContext = wrapSpanContext;\n        this.isSpanContextValid = isSpanContextValid;\n        this.deleteSpan = deleteSpan;\n        this.getSpan = getSpan;\n        this.getSpanContext = getSpanContext;\n        this.setSpan = setSpan;\n        this.setSpanContext = setSpanContext;\n    }\n    /** Get the singleton instance of the Trace API */\n    TraceAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new TraceAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current global tracer.\n     *\n     * @returns true if the tracer provider was successfully registered, else false\n     */\n    TraceAPI.prototype.setGlobalTracerProvider = function (provider) {\n        this._proxyTracerProvider.setDelegate(provider);\n        return registerGlobal(API_NAME, this._proxyTracerProvider);\n    };\n    /**\n     * Returns the global tracer provider.\n     */\n    TraceAPI.prototype.getTracerProvider = function () {\n        return getGlobal(API_NAME) || this._proxyTracerProvider;\n    };\n    /**\n     * Returns a tracer from the global tracer provider.\n     */\n    TraceAPI.prototype.getTracer = function (name, version) {\n        return this.getTracerProvider().getTracer(name, version);\n    };\n    /** Remove the global tracer provider */\n    TraceAPI.prototype.disable = function () {\n        unregisterGlobal(API_NAME);\n        this._proxyTracerProvider = new ProxyTracerProvider();\n    };\n    return TraceAPI;\n}());\nexport { TraceAPI };\n//# sourceMappingURL=trace.js.map"]},"metadata":{},"sourceType":"module"}