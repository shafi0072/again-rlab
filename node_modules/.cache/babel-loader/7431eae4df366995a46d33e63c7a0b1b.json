{"ast":null,"code":"var _jsxFileName = \"F:\\\\Rlab\\\\client\\\\src\\\\Components\\\\Home\\\\Locations\\\\VsxChart.js\";\nimport React from 'react';\nimport { Label, Connector, CircleSubject, LineSubject } from '@visx/annotation';\nimport { LinePath } from '@visx/shape';\nimport ExampleControls from './ExampleControls';\nimport findNearestDatum from './findNearestDatum';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const orange = '#ff7e67';\nexport const greens = ['#ecf4f3', '#68b0ab', '#006a71'];\n\nconst VsxChart = () => {\n  return /*#__PURE__*/_jsxDEV(ExampleControls, {\n    width: 700,\n    height: 500,\n    compact: true,\n    children: ({\n      AnnotationComponent,\n      annotationPosition,\n      approxTooltipHeight,\n      connectorType,\n      data,\n      editLabelPosition,\n      editSubjectPosition,\n      getDate,\n      getStockValue,\n      horizontalAnchor,\n      labelWidth,\n      setAnnotationPosition,\n      showAnchorLine,\n      subjectType,\n      subtitle,\n      title,\n      verticalAnchor,\n      xScale,\n      yScale\n    }) => /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: 300,\n      height: 100,\n      children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n        width: 300,\n        height: 100,\n        fill: greens[0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(LinePath, {\n        stroke: greens[2],\n        strokeWidth: 2,\n        data: data,\n        x: d => {\n          var _xScale;\n\n          return (_xScale = xScale(getDate(d))) !== null && _xScale !== void 0 ? _xScale : 0;\n        },\n        y: d => {\n          var _yScale;\n\n          return (_yScale = yScale(getStockValue(d))) !== null && _yScale !== void 0 ? _yScale : 0;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(AnnotationComponent, {\n        width: 300,\n        height: 100,\n        x: annotationPosition.x,\n        y: annotationPosition.y,\n        dx: annotationPosition.dx,\n        dy: annotationPosition.dy,\n        canEditLabel: editLabelPosition,\n        canEditSubject: editSubjectPosition,\n        onDragEnd: ({\n          event,\n          ...nextPosition\n        }) => {\n          var _xScale2, _yScale2;\n\n          // snap Annotation to the nearest data point\n          const nearestDatum = findNearestDatum({\n            accessor: subjectType === 'horizontal-line' ? getStockValue : getDate,\n            data,\n            scale: subjectType === 'horizontal-line' ? yScale : xScale,\n            value: subjectType === 'horizontal-line' ? nextPosition.y : nextPosition.x\n          });\n          const x = (_xScale2 = xScale(getDate(nearestDatum))) !== null && _xScale2 !== void 0 ? _xScale2 : 0;\n          const y = (_yScale2 = yScale(getStockValue(nearestDatum))) !== null && _yScale2 !== void 0 ? _yScale2 : 0; // flip label to keep in view\n\n          const shouldFlipDx = nextPosition.dx > 0 && x + nextPosition.dx + labelWidth > 300 || nextPosition.dx < 0 && x + nextPosition.dx - labelWidth <= 0;\n          const shouldFlipDy = // 100 is est. tooltip height\n          nextPosition.dy > 0 && 100 - (y + nextPosition.dy) < approxTooltipHeight || nextPosition.dy < 0 && y + nextPosition.dy - approxTooltipHeight <= 0;\n          setAnnotationPosition({\n            x,\n            y,\n            dx: (shouldFlipDx ? -1 : 1) * nextPosition.dx,\n            dy: (shouldFlipDy ? -1 : 1) * nextPosition.dy\n          });\n        },\n        children: [/*#__PURE__*/_jsxDEV(Connector, {\n          stroke: orange,\n          type: connectorType\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Label, {\n          backgroundFill: \"white\",\n          showAnchorLine: showAnchorLine,\n          anchorLineStroke: greens[2],\n          backgroundProps: {\n            stroke: greens[1]\n          },\n          fontColor: greens[2],\n          horizontalAnchor: horizontalAnchor,\n          subtitle: subtitle,\n          title: title,\n          verticalAnchor: verticalAnchor,\n          width: labelWidth\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this), subjectType === 'circle' && /*#__PURE__*/_jsxDEV(CircleSubject, {\n          stroke: orange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 42\n        }, this), subjectType !== 'circle' && /*#__PURE__*/_jsxDEV(LineSubject, {\n          orientation: subjectType === 'vertical-line' ? 'vertical' : 'horizontal',\n          stroke: orange,\n          min: 0,\n          max: subjectType === 'vertical-line' ? 100 : 300\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }, this);\n};\n\n_c = VsxChart;\nexport default VsxChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"VsxChart\");","map":{"version":3,"sources":["F:/Rlab/client/src/Components/Home/Locations/VsxChart.js"],"names":["React","Label","Connector","CircleSubject","LineSubject","LinePath","ExampleControls","findNearestDatum","orange","greens","VsxChart","AnnotationComponent","annotationPosition","approxTooltipHeight","connectorType","data","editLabelPosition","editSubjectPosition","getDate","getStockValue","horizontalAnchor","labelWidth","setAnnotationPosition","showAnchorLine","subjectType","subtitle","title","verticalAnchor","xScale","yScale","d","x","y","dx","dy","event","nextPosition","nearestDatum","accessor","scale","value","shouldFlipDx","shouldFlipDy","stroke"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Label, Connector, CircleSubject, LineSubject } from '@visx/annotation';\r\nimport { LinePath } from '@visx/shape';\r\n\r\nimport ExampleControls from './ExampleControls';\r\nimport findNearestDatum from './findNearestDatum';\r\n\r\n\r\nexport const orange = '#ff7e67';\r\nexport const greens = ['#ecf4f3', '#68b0ab', '#006a71'];\r\n\r\n\r\nconst VsxChart = () => {\r\n    return (\r\n        <ExampleControls width={700} height={500} compact={true}>\r\n      {({\r\n        AnnotationComponent,\r\n        annotationPosition,\r\n        approxTooltipHeight,\r\n        connectorType,\r\n        data,\r\n        editLabelPosition,\r\n        editSubjectPosition,\r\n        getDate,\r\n        getStockValue,\r\n        horizontalAnchor,\r\n        labelWidth,\r\n        setAnnotationPosition,\r\n        showAnchorLine,\r\n        subjectType,\r\n        subtitle,\r\n        title,\r\n        verticalAnchor,\r\n        xScale,\r\n        yScale,\r\n      }) => (\r\n        <svg width={300} height={100}>\r\n          <rect width={300} height={100} fill={greens[0]} />\r\n          <LinePath\r\n            stroke={greens[2]}\r\n            strokeWidth={2}\r\n            data={data}\r\n            x={d => xScale(getDate(d)) ?? 0}\r\n            y={d => yScale(getStockValue(d)) ?? 0}\r\n          />\r\n          <AnnotationComponent\r\n            width={300}\r\n            height={100}\r\n            x={annotationPosition.x}\r\n            y={annotationPosition.y}\r\n            dx={annotationPosition.dx}\r\n            dy={annotationPosition.dy}\r\n            canEditLabel={editLabelPosition}\r\n            canEditSubject={editSubjectPosition}\r\n            onDragEnd={({ event, ...nextPosition }) => {\r\n              // snap Annotation to the nearest data point\r\n              const nearestDatum = findNearestDatum({\r\n                accessor: subjectType === 'horizontal-line' ? getStockValue : getDate,\r\n                data,\r\n                scale: subjectType === 'horizontal-line' ? yScale : xScale,\r\n                value: subjectType === 'horizontal-line' ? nextPosition.y : nextPosition.x,\r\n              });\r\n              const x = xScale(getDate(nearestDatum)) ?? 0;\r\n              const y = yScale(getStockValue(nearestDatum)) ?? 0;\r\n\r\n              // flip label to keep in view\r\n              const shouldFlipDx =\r\n                (nextPosition.dx > 0 && x + nextPosition.dx + labelWidth > 300) ||\r\n                (nextPosition.dx < 0 && x + nextPosition.dx - labelWidth <= 0);\r\n              const shouldFlipDy = // 100 is est. tooltip height\r\n                (nextPosition.dy > 0 && 100 - (y + nextPosition.dy) < approxTooltipHeight) ||\r\n                (nextPosition.dy < 0 && y + nextPosition.dy - approxTooltipHeight <= 0);\r\n              setAnnotationPosition({\r\n                x,\r\n                y,\r\n                dx: (shouldFlipDx ? -1 : 1) * nextPosition.dx,\r\n                dy: (shouldFlipDy ? -1 : 1) * nextPosition.dy,\r\n              });\r\n            }}\r\n          >\r\n            <Connector stroke={orange} type={connectorType} />\r\n            <Label\r\n              backgroundFill=\"white\"\r\n              showAnchorLine={showAnchorLine}\r\n              anchorLineStroke={greens[2]}\r\n              backgroundProps={{ stroke: greens[1] }}\r\n              fontColor={greens[2]}\r\n              horizontalAnchor={horizontalAnchor}\r\n              subtitle={subtitle}\r\n              title={title}\r\n              verticalAnchor={verticalAnchor}\r\n              width={labelWidth}\r\n            />\r\n            {subjectType === 'circle' && <CircleSubject stroke={orange} />}\r\n            {subjectType !== 'circle' && (\r\n              <LineSubject\r\n                orientation={subjectType === 'vertical-line' ? 'vertical' : 'horizontal'}\r\n                stroke={orange}\r\n                min={0}\r\n                max={subjectType === 'vertical-line' ? 100 : 300}\r\n              />\r\n            )}\r\n          </AnnotationComponent>\r\n        </svg>\r\n      )}\r\n    </ExampleControls>\r\n    );\r\n};\r\n\r\nexport default VsxChart;"]},"metadata":{},"sourceType":"module"}