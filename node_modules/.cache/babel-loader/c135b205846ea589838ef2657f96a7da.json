{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getGlobal, registerGlobal, unregisterGlobal } from '../internal/global-utils';\nimport { NoopTextMapPropagator } from '../propagation/NoopTextMapPropagator';\nimport { defaultTextMapGetter, defaultTextMapSetter } from '../propagation/TextMapPropagator';\nimport { getBaggage, setBaggage, deleteBaggage } from '../baggage/context-helpers';\nimport { createBaggage } from '../baggage/utils';\nvar API_NAME = 'propagation';\nvar NOOP_TEXT_MAP_PROPAGATOR = new NoopTextMapPropagator();\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Propagation API\n */\n\nvar PropagationAPI =\n/** @class */\nfunction () {\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  function PropagationAPI() {\n    this.createBaggage = createBaggage;\n    this.getBaggage = getBaggage;\n    this.setBaggage = setBaggage;\n    this.deleteBaggage = deleteBaggage;\n  }\n  /** Get the singleton instance of the Propagator API */\n\n\n  PropagationAPI.getInstance = function () {\n    if (!this._instance) {\n      this._instance = new PropagationAPI();\n    }\n\n    return this._instance;\n  };\n  /**\n   * Set the current propagator.\n   *\n   * @returns true if the propagator was successfully registered, else false\n   */\n\n\n  PropagationAPI.prototype.setGlobalPropagator = function (propagator) {\n    return registerGlobal(API_NAME, propagator);\n  };\n  /**\n   * Inject context into a carrier to be propagated inter-process\n   *\n   * @param context Context carrying tracing data to inject\n   * @param carrier carrier to inject context into\n   * @param setter Function used to set values on the carrier\n   */\n\n\n  PropagationAPI.prototype.inject = function (context, carrier, setter) {\n    if (setter === void 0) {\n      setter = defaultTextMapSetter;\n    }\n\n    return this._getGlobalPropagator().inject(context, carrier, setter);\n  };\n  /**\n   * Extract context from a carrier\n   *\n   * @param context Context which the newly created context will inherit from\n   * @param carrier Carrier to extract context from\n   * @param getter Function used to extract keys from a carrier\n   */\n\n\n  PropagationAPI.prototype.extract = function (context, carrier, getter) {\n    if (getter === void 0) {\n      getter = defaultTextMapGetter;\n    }\n\n    return this._getGlobalPropagator().extract(context, carrier, getter);\n  };\n  /**\n   * Return a list of all fields which may be used by the propagator.\n   */\n\n\n  PropagationAPI.prototype.fields = function () {\n    return this._getGlobalPropagator().fields();\n  };\n  /** Remove the global propagator */\n\n\n  PropagationAPI.prototype.disable = function () {\n    unregisterGlobal(API_NAME);\n  };\n\n  PropagationAPI.prototype._getGlobalPropagator = function () {\n    return getGlobal(API_NAME) || NOOP_TEXT_MAP_PROPAGATOR;\n  };\n\n  return PropagationAPI;\n}();\n\nexport { PropagationAPI };","map":{"version":3,"sources":["../../../src/api/propagation.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAGH,SACE,SADF,EAEE,cAFF,EAGE,gBAHF,QAIO,0BAJP;AAKA,SAAS,qBAAT,QAAsC,sCAAtC;AACA,SACE,oBADF,EAEE,oBAFF,QAMO,kCANP;AAOA,SACE,UADF,EAEE,UAFF,EAGE,aAHF,QAIO,4BAJP;AAKA,SAAS,aAAT,QAA8B,kBAA9B;AAEA,IAAM,QAAQ,GAAG,aAAjB;AACA,IAAM,wBAAwB,GAAG,IAAI,qBAAJ,EAAjC;AAEA;;AAEG;;AACH,IAAA,cAAA;AAAA;AAAA,YAAA;AAGE;AACA,WAAA,cAAA,GAAA;AA8DO,SAAA,aAAA,GAAgB,aAAhB;AAEA,SAAA,UAAA,GAAa,UAAb;AAEA,SAAA,UAAA,GAAa,UAAb;AAEA,SAAA,aAAA,GAAgB,aAAhB;AApEiB;AAExB;;;AACc,EAAA,cAAA,CAAA,WAAA,GAAd,YAAA;AACE,QAAI,CAAC,KAAK,SAAV,EAAqB;AACnB,WAAK,SAAL,GAAiB,IAAI,cAAJ,EAAjB;AACD;;AAED,WAAO,KAAK,SAAZ;AACD,GANa;AAQd;;;;AAIG;;;AACI,EAAA,cAAA,CAAA,SAAA,CAAA,mBAAA,GAAP,UAA2B,UAA3B,EAAwD;AACtD,WAAO,cAAc,CAAC,QAAD,EAAW,UAAX,CAArB;AACD,GAFM;AAIP;;;;;;AAMG;;;AACI,EAAA,cAAA,CAAA,SAAA,CAAA,MAAA,GAAP,UACE,OADF,EAEE,OAFF,EAGE,MAHF,EAGuD;AAArD,QAAA,MAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,MAAA,GAAA,oBAAA;AAAqD;;AAErD,WAAO,KAAK,oBAAL,GAA4B,MAA5B,CAAmC,OAAnC,EAA4C,OAA5C,EAAqD,MAArD,CAAP;AACD,GANM;AAQP;;;;;;AAMG;;;AACI,EAAA,cAAA,CAAA,SAAA,CAAA,OAAA,GAAP,UACE,OADF,EAEE,OAFF,EAGE,MAHF,EAGuD;AAArD,QAAA,MAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,MAAA,GAAA,oBAAA;AAAqD;;AAErD,WAAO,KAAK,oBAAL,GAA4B,OAA5B,CAAoC,OAApC,EAA6C,OAA7C,EAAsD,MAAtD,CAAP;AACD,GANM;AAQP;;AAEG;;;AACI,EAAA,cAAA,CAAA,SAAA,CAAA,MAAA,GAAP,YAAA;AACE,WAAO,KAAK,oBAAL,GAA4B,MAA5B,EAAP;AACD,GAFM;AAIP;;;AACO,EAAA,cAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA;AACE,IAAA,gBAAgB,CAAC,QAAD,CAAhB;AACD,GAFM;;AAYC,EAAA,cAAA,CAAA,SAAA,CAAA,oBAAA,GAAR,YAAA;AACE,WAAO,SAAS,CAAC,QAAD,CAAT,IAAuB,wBAA9B;AACD,GAFO;;AAGV,SAAA,cAAA;AAAC,CA7ED,EAAA","sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getGlobal, registerGlobal, unregisterGlobal, } from '../internal/global-utils';\nimport { NoopTextMapPropagator } from '../propagation/NoopTextMapPropagator';\nimport { defaultTextMapGetter, defaultTextMapSetter, } from '../propagation/TextMapPropagator';\nimport { getBaggage, setBaggage, deleteBaggage, } from '../baggage/context-helpers';\nimport { createBaggage } from '../baggage/utils';\nvar API_NAME = 'propagation';\nvar NOOP_TEXT_MAP_PROPAGATOR = new NoopTextMapPropagator();\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Propagation API\n */\nvar PropagationAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function PropagationAPI() {\n        this.createBaggage = createBaggage;\n        this.getBaggage = getBaggage;\n        this.setBaggage = setBaggage;\n        this.deleteBaggage = deleteBaggage;\n    }\n    /** Get the singleton instance of the Propagator API */\n    PropagationAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new PropagationAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current propagator.\n     *\n     * @returns true if the propagator was successfully registered, else false\n     */\n    PropagationAPI.prototype.setGlobalPropagator = function (propagator) {\n        return registerGlobal(API_NAME, propagator);\n    };\n    /**\n     * Inject context into a carrier to be propagated inter-process\n     *\n     * @param context Context carrying tracing data to inject\n     * @param carrier carrier to inject context into\n     * @param setter Function used to set values on the carrier\n     */\n    PropagationAPI.prototype.inject = function (context, carrier, setter) {\n        if (setter === void 0) { setter = defaultTextMapSetter; }\n        return this._getGlobalPropagator().inject(context, carrier, setter);\n    };\n    /**\n     * Extract context from a carrier\n     *\n     * @param context Context which the newly created context will inherit from\n     * @param carrier Carrier to extract context from\n     * @param getter Function used to extract keys from a carrier\n     */\n    PropagationAPI.prototype.extract = function (context, carrier, getter) {\n        if (getter === void 0) { getter = defaultTextMapGetter; }\n        return this._getGlobalPropagator().extract(context, carrier, getter);\n    };\n    /**\n     * Return a list of all fields which may be used by the propagator.\n     */\n    PropagationAPI.prototype.fields = function () {\n        return this._getGlobalPropagator().fields();\n    };\n    /** Remove the global propagator */\n    PropagationAPI.prototype.disable = function () {\n        unregisterGlobal(API_NAME);\n    };\n    PropagationAPI.prototype._getGlobalPropagator = function () {\n        return getGlobal(API_NAME) || NOOP_TEXT_MAP_PROPAGATOR;\n    };\n    return PropagationAPI;\n}());\nexport { PropagationAPI };\n//# sourceMappingURL=propagation.js.map"]},"metadata":{},"sourceType":"module"}