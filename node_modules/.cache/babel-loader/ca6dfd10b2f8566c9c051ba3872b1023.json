{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SchemaServiceClient = void 0;\n/* global window */\n\nconst gax = require(\"google-gax\");\n\nconst google_gax_1 = require(\"google-gax\");\n\nconst jsonProtos = require(\"../../protos/protos.json\");\n/**\n * Client JSON configuration object, loaded from\n * `src/v1/schema_service_client_config.json`.\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\n\n\nconst gapicConfig = require(\"./schema_service_client_config.json\");\n\nconst version = require('../../../package.json').version;\n/**\n *  Service for doing schema-related operations.\n * @class\n * @memberof v1\n */\n\n\nclass SchemaServiceClient {\n  /**\n   * Construct an instance of SchemaServiceClient.\n   *\n   * @param {object} [options] - The configuration object.\n   * The options accepted by the constructor are described in detail\n   * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).\n   * The common options are:\n   * @param {object} [options.credentials] - Credentials object.\n   * @param {string} [options.credentials.client_email]\n   * @param {string} [options.credentials.private_key]\n   * @param {string} [options.email] - Account email address. Required when\n   *     using a .pem or .p12 keyFilename.\n   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n   *     .p12 key downloaded from the Google Developers Console. If you provide\n   *     a path to a JSON file, the projectId option below is not necessary.\n   *     NOTE: .pem and .p12 require you to specify options.email as well.\n   * @param {number} [options.port] - The port on which to connect to\n   *     the remote host.\n   * @param {string} [options.projectId] - The project ID from the Google\n   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n   *     the environment variable GCLOUD_PROJECT for your project ID. If your\n   *     app is running in an environment which supports\n   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n   *     your project ID will be detected automatically.\n   * @param {string} [options.apiEndpoint] - The domain name of the\n   *     API remote host.\n   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n   *     Follows the structure of {@link gapicConfig}.\n   * @param {boolean} [options.fallback] - Use HTTP fallback mode.\n   *     In fallback mode, a special browser-compatible transport implementation is used\n   *     instead of gRPC transport. In browser context (if the `window` object is defined)\n   *     the fallback mode is enabled automatically; set `options.fallback` to `false`\n   *     if you need to override this behavior.\n   */\n  constructor(opts) {\n    var _a, _b;\n\n    this._terminated = false;\n    this.descriptors = {\n      page: {},\n      stream: {},\n      longrunning: {},\n      batching: {}\n    }; // Ensure that options include all the required fields.\n\n    const staticMembers = this.constructor;\n    const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;\n    const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n    const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};\n    const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function';\n    opts = Object.assign({\n      servicePath,\n      port,\n      clientConfig,\n      fallback\n    }, opts); // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n\n    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {\n      opts['scopes'] = staticMembers.scopes;\n    } // Choose either gRPC or proto-over-HTTP implementation of google-gax.\n\n\n    this._gaxModule = opts.fallback ? gax.fallback : gax; // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.\n\n    this._gaxGrpc = new this._gaxModule.GrpcClient(opts); // Save options to use in initialize() method.\n\n    this._opts = opts; // Save the auth object to the client, for use by other methods.\n\n    this.auth = this._gaxGrpc.auth; // Set the default scopes in auth client if needed.\n\n    if (servicePath === staticMembers.servicePath) {\n      this.auth.defaultScopes = staticMembers.scopes;\n    }\n\n    this.iamClient = new google_gax_1.IamClient(this._gaxGrpc, opts); // Determine the client header string.\n\n    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n\n    if (typeof process !== 'undefined' && 'versions' in process) {\n      clientHeader.push(`gl-node/${process.versions.node}`);\n    } else {\n      clientHeader.push(`gl-web/${this._gaxModule.version}`);\n    }\n\n    if (!opts.fallback) {\n      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n    } else if (opts.fallback === 'rest') {\n      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);\n    }\n\n    if (opts.libName && opts.libVersion) {\n      clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n    } // Load the applicable protos.\n\n\n    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos); // This API contains \"path templates\"; forward-slash-separated\n    // identifiers to uniquely identify resources within the API.\n    // Create useful helper objects for these.\n\n    this.pathTemplates = {\n      projectPathTemplate: new this._gaxModule.PathTemplate('projects/{project}'),\n      projectTopicPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/topics/{topic}'),\n      schemaPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/schemas/{schema}'),\n      snapshotPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/snapshots/{snapshot}'),\n      subscriptionPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/subscriptions/{subscription}')\n    }; // Some of the methods on this service return \"paged\" results,\n    // (e.g. 50 results at a time, with tokens to get subsequent\n    // pages). Denote the keys used for pagination and results.\n\n    this.descriptors.page = {\n      listSchemas: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'schemas')\n    }; // Put together the default options sent with requests.\n\n    this._defaults = this._gaxGrpc.constructSettings('google.pubsub.v1.SchemaService', gapicConfig, opts.clientConfig || {}, {\n      'x-goog-api-client': clientHeader.join(' ')\n    }); // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n\n    this.innerApiCalls = {};\n  }\n  /**\n   * Initialize the client.\n   * Performs asynchronous operations (such as authentication) and prepares the client.\n   * This function will be called automatically when any class method is called for the\n   * first time, but if you need to initialize it before calling an actual method,\n   * feel free to call initialize() directly.\n   *\n   * You can await on this method if you want to make sure the client is initialized.\n   *\n   * @returns {Promise} A promise that resolves to an authenticated service stub.\n   */\n\n\n  initialize() {\n    // If the client stub promise is already initialized, return immediately.\n    if (this.schemaServiceStub) {\n      return this.schemaServiceStub;\n    } // Put together the \"service stub\" for\n    // google.pubsub.v1.SchemaService.\n\n\n    this.schemaServiceStub = this._gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService('google.pubsub.v1.SchemaService') : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this._protos.google.pubsub.v1.SchemaService, this._opts); // Iterate over each of the methods that the service provides\n    // and create an API call method for each.\n\n    const schemaServiceStubMethods = ['createSchema', 'getSchema', 'listSchemas', 'deleteSchema', 'validateSchema', 'validateMessage'];\n\n    for (const methodName of schemaServiceStubMethods) {\n      const callPromise = this.schemaServiceStub.then(stub => (...args) => {\n        if (this._terminated) {\n          return Promise.reject('The client has already been closed.');\n        }\n\n        const func = stub[methodName];\n        return func.apply(stub, args);\n      }, err => () => {\n        throw err;\n      });\n      const descriptor = this.descriptors.page[methodName] || undefined;\n\n      const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor);\n\n      this.innerApiCalls[methodName] = apiCall;\n    }\n\n    return this.schemaServiceStub;\n  }\n  /**\n   * The DNS address for this API service.\n   * @returns {string} The DNS address for this service.\n   */\n\n\n  static get servicePath() {\n    return 'pubsub.googleapis.com';\n  }\n  /**\n   * The DNS address for this API service - same as servicePath(),\n   * exists for compatibility reasons.\n   * @returns {string} The DNS address for this service.\n   */\n\n\n  static get apiEndpoint() {\n    return 'pubsub.googleapis.com';\n  }\n  /**\n   * The port for this API service.\n   * @returns {number} The default port for this service.\n   */\n\n\n  static get port() {\n    return 443;\n  }\n  /**\n   * The scopes needed to make gRPC calls for every method defined\n   * in this service.\n   * @returns {string[]} List of default scopes.\n   */\n\n\n  static get scopes() {\n    return ['https://www.googleapis.com/auth/cloud-platform', 'https://www.googleapis.com/auth/pubsub'];\n  }\n  /**\n   * Return the project ID used by this class.\n   * @returns {Promise} A promise that resolves to string containing the project ID.\n   */\n\n\n  getProjectId(callback) {\n    if (callback) {\n      this.auth.getProjectId(callback);\n      return;\n    }\n\n    return this.auth.getProjectId();\n  }\n  /**\n   * Creates a schema.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The name of the project in which to create the schema.\n   *   Format is `projects/{project-id}`.\n   * @param {google.pubsub.v1.Schema} request.schema\n   *   Required. The schema object to create.\n   *\n   *   This schema's `name` parameter is ignored. The schema object returned\n   *   by CreateSchema will have a `name` made using the given `parent` and\n   *   `schema_id`.\n   * @param {string} request.schemaId\n   *   The ID to use for the schema, which will become the final component of\n   *   the schema's resource name.\n   *\n   *   See https://cloud.google.com/pubsub/docs/admin#resource_names for resource\n   *   name constraints.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Schema]{@link google.pubsub.v1.Schema}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.createSchema(request);\n   */\n\n\n  createSchema(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.createSchema(request, options, callback);\n  }\n  /**\n   * Gets a schema.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Required. The name of the schema to get.\n   *   Format is `projects/{project}/schemas/{schema}`.\n   * @param {google.pubsub.v1.SchemaView} request.view\n   *   The set of fields to return in the response. If not set, returns a Schema\n   *   with `name` and `type`, but not `definition`. Set to `FULL` to retrieve all\n   *   fields.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Schema]{@link google.pubsub.v1.Schema}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.getSchema(request);\n   */\n\n\n  getSchema(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.getSchema(request, options, callback);\n  }\n  /**\n   * Deletes a schema.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Required. Name of the schema to delete.\n   *   Format is `projects/{project}/schemas/{schema}`.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.deleteSchema(request);\n   */\n\n\n  deleteSchema(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.deleteSchema(request, options, callback);\n  }\n  /**\n   * Validates a schema.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The name of the project in which to validate schemas.\n   *   Format is `projects/{project-id}`.\n   * @param {google.pubsub.v1.Schema} request.schema\n   *   Required. The schema object to validate.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [ValidateSchemaResponse]{@link google.pubsub.v1.ValidateSchemaResponse}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.validateSchema(request);\n   */\n\n\n  validateSchema(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.validateSchema(request, options, callback);\n  }\n  /**\n   * Validates a message against a schema.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The name of the project in which to validate schemas.\n   *   Format is `projects/{project-id}`.\n   * @param {string} request.name\n   *   Name of the schema against which to validate.\n   *\n   *   Format is `projects/{project}/schemas/{schema}`.\n   * @param {google.pubsub.v1.Schema} request.schema\n   *   Ad-hoc schema against which to validate\n   * @param {Buffer} request.message\n   *   Message to validate against the provided `schema_spec`.\n   * @param {google.pubsub.v1.Encoding} request.encoding\n   *   The encoding expected for messages\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [ValidateMessageResponse]{@link google.pubsub.v1.ValidateMessageResponse}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.validateMessage(request);\n   */\n\n\n  validateMessage(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.validateMessage(request, options, callback);\n  }\n  /**\n   * Lists schemas in a project.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The name of the project in which to list schemas.\n   *   Format is `projects/{project-id}`.\n   * @param {google.pubsub.v1.SchemaView} request.view\n   *   The set of Schema fields to return in the response. If not set, returns\n   *   Schemas with `name` and `type`, but not `definition`. Set to `FULL` to\n   *   retrieve all fields.\n   * @param {number} request.pageSize\n   *   Maximum number of schemas to return.\n   * @param {string} request.pageToken\n   *   The value returned by the last `ListSchemasResponse`; indicates that\n   *   this is a continuation of a prior `ListSchemas` call, and that the\n   *   system should return the next page of data.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of [Schema]{@link google.pubsub.v1.Schema}.\n   *   The client library will perform auto-pagination by default: it will call the API as many\n   *   times as needed and will merge results from all the pages into this array.\n   *   Note that it can affect your quota.\n   *   We recommend using `listSchemasAsync()`\n   *   method described below for async iteration which you can stop as needed.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   */\n\n\n  listSchemas(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.listSchemas(request, options, callback);\n  }\n  /**\n   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The name of the project in which to list schemas.\n   *   Format is `projects/{project-id}`.\n   * @param {google.pubsub.v1.SchemaView} request.view\n   *   The set of Schema fields to return in the response. If not set, returns\n   *   Schemas with `name` and `type`, but not `definition`. Set to `FULL` to\n   *   retrieve all fields.\n   * @param {number} request.pageSize\n   *   Maximum number of schemas to return.\n   * @param {string} request.pageToken\n   *   The value returned by the last `ListSchemasResponse`; indicates that\n   *   this is a continuation of a prior `ListSchemas` call, and that the\n   *   system should return the next page of data.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Stream}\n   *   An object stream which emits an object representing [Schema]{@link google.pubsub.v1.Schema} on 'data' event.\n   *   The client library will perform auto-pagination by default: it will call the API as many\n   *   times as needed. Note that it can affect your quota.\n   *   We recommend using `listSchemasAsync()`\n   *   method described below for async iteration which you can stop as needed.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   */\n\n\n  listSchemasStream(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    const callSettings = new gax.CallSettings(options);\n    this.initialize();\n    return this.descriptors.page.listSchemas.createStream(this.innerApiCalls.listSchemas, request, callSettings);\n  }\n  /**\n   * Equivalent to `listSchemas`, but returns an iterable object.\n   *\n   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The name of the project in which to list schemas.\n   *   Format is `projects/{project-id}`.\n   * @param {google.pubsub.v1.SchemaView} request.view\n   *   The set of Schema fields to return in the response. If not set, returns\n   *   Schemas with `name` and `type`, but not `definition`. Set to `FULL` to\n   *   retrieve all fields.\n   * @param {number} request.pageSize\n   *   Maximum number of schemas to return.\n   * @param {string} request.pageToken\n   *   The value returned by the last `ListSchemasResponse`; indicates that\n   *   this is a continuation of a prior `ListSchemas` call, and that the\n   *   system should return the next page of data.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Object}\n   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n   *   When you iterate the returned iterable, each element will be an object representing\n   *   [Schema]{@link google.pubsub.v1.Schema}. The API will be called under the hood as needed, once per the page,\n   *   so you can stop the iteration when you don't need more results.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   * @example\n   * const iterable = client.listSchemasAsync(request);\n   * for await (const response of iterable) {\n   *   // process response\n   * }\n   */\n\n\n  listSchemasAsync(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    options = options || {};\n    const callSettings = new gax.CallSettings(options);\n    this.initialize();\n    return this.descriptors.page.listSchemas.asyncIterate(this.innerApiCalls['listSchemas'], request, callSettings);\n  }\n  /**\n   * Gets the access control policy for a resource. Returns an empty policy\n   * if the resource exists and does not have a policy set.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.resource\n   *   REQUIRED: The resource for which the policy is being requested.\n   *   See the operation documentation for the appropriate value for this field.\n   * @param {Object} [request.options]\n   *   OPTIONAL: A `GetPolicyOptions` object for specifying options to\n   *   `GetIamPolicy`. This field is only used by Cloud IAM.\n   *\n   *   This object should have the same structure as [GetPolicyOptions]{@link google.iam.v1.GetPolicyOptions}\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [Policy]{@link google.iam.v1.Policy}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  getIamPolicy(request, options, callback) {\n    return this.iamClient.getIamPolicy(request, options, callback);\n  }\n  /**\n   * Returns permissions that a caller has on the specified resource. If the\n   * resource does not exist, this will return an empty set of\n   * permissions, not a NOT_FOUND error.\n   *\n   * Note: This operation is designed to be used for building\n   * permission-aware UIs and command-line tools, not for authorization\n   * checking. This operation may \"fail open\" without warning.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.resource\n   *   REQUIRED: The resource for which the policy detail is being requested.\n   *   See the operation documentation for the appropriate value for this field.\n   * @param {string[]} request.permissions\n   *   The set of permissions to check for the `resource`. Permissions with\n   *   wildcards (such as '*' or 'storage.*') are not allowed. For more\n   *   information see\n   *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  setIamPolicy(request, options, callback) {\n    return this.iamClient.setIamPolicy(request, options, callback);\n  }\n  /**\n   * Returns permissions that a caller has on the specified resource. If the\n   * resource does not exist, this will return an empty set of\n   * permissions, not a NOT_FOUND error.\n   *\n   * Note: This operation is designed to be used for building\n   * permission-aware UIs and command-line tools, not for authorization\n   * checking. This operation may \"fail open\" without warning.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.resource\n   *   REQUIRED: The resource for which the policy detail is being requested.\n   *   See the operation documentation for the appropriate value for this field.\n   * @param {string[]} request.permissions\n   *   The set of permissions to check for the `resource`. Permissions with\n   *   wildcards (such as '*' or 'storage.*') are not allowed. For more\n   *   information see\n   *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   */\n\n\n  testIamPermissions(request, options, callback) {\n    return this.iamClient.testIamPermissions(request, options, callback);\n  } // --------------------\n  // -- Path templates --\n  // --------------------\n\n  /**\n   * Return a fully-qualified project resource name string.\n   *\n   * @param {string} project\n   * @returns {string} Resource name string.\n   */\n\n\n  projectPath(project) {\n    return this.pathTemplates.projectPathTemplate.render({\n      project: project\n    });\n  }\n  /**\n   * Parse the project from Project resource.\n   *\n   * @param {string} projectName\n   *   A fully-qualified path representing Project resource.\n   * @returns {string} A string representing the project.\n   */\n\n\n  matchProjectFromProjectName(projectName) {\n    return this.pathTemplates.projectPathTemplate.match(projectName).project;\n  }\n  /**\n   * Return a fully-qualified projectTopic resource name string.\n   *\n   * @param {string} project\n   * @param {string} topic\n   * @returns {string} Resource name string.\n   */\n\n\n  projectTopicPath(project, topic) {\n    return this.pathTemplates.projectTopicPathTemplate.render({\n      project: project,\n      topic: topic\n    });\n  }\n  /**\n   * Parse the project from ProjectTopic resource.\n   *\n   * @param {string} projectTopicName\n   *   A fully-qualified path representing project_topic resource.\n   * @returns {string} A string representing the project.\n   */\n\n\n  matchProjectFromProjectTopicName(projectTopicName) {\n    return this.pathTemplates.projectTopicPathTemplate.match(projectTopicName).project;\n  }\n  /**\n   * Parse the topic from ProjectTopic resource.\n   *\n   * @param {string} projectTopicName\n   *   A fully-qualified path representing project_topic resource.\n   * @returns {string} A string representing the topic.\n   */\n\n\n  matchTopicFromProjectTopicName(projectTopicName) {\n    return this.pathTemplates.projectTopicPathTemplate.match(projectTopicName).topic;\n  }\n  /**\n   * Return a fully-qualified schema resource name string.\n   *\n   * @param {string} project\n   * @param {string} schema\n   * @returns {string} Resource name string.\n   */\n\n\n  schemaPath(project, schema) {\n    return this.pathTemplates.schemaPathTemplate.render({\n      project: project,\n      schema: schema\n    });\n  }\n  /**\n   * Parse the project from Schema resource.\n   *\n   * @param {string} schemaName\n   *   A fully-qualified path representing Schema resource.\n   * @returns {string} A string representing the project.\n   */\n\n\n  matchProjectFromSchemaName(schemaName) {\n    return this.pathTemplates.schemaPathTemplate.match(schemaName).project;\n  }\n  /**\n   * Parse the schema from Schema resource.\n   *\n   * @param {string} schemaName\n   *   A fully-qualified path representing Schema resource.\n   * @returns {string} A string representing the schema.\n   */\n\n\n  matchSchemaFromSchemaName(schemaName) {\n    return this.pathTemplates.schemaPathTemplate.match(schemaName).schema;\n  }\n  /**\n   * Return a fully-qualified snapshot resource name string.\n   *\n   * @param {string} project\n   * @param {string} snapshot\n   * @returns {string} Resource name string.\n   */\n\n\n  snapshotPath(project, snapshot) {\n    return this.pathTemplates.snapshotPathTemplate.render({\n      project: project,\n      snapshot: snapshot\n    });\n  }\n  /**\n   * Parse the project from Snapshot resource.\n   *\n   * @param {string} snapshotName\n   *   A fully-qualified path representing Snapshot resource.\n   * @returns {string} A string representing the project.\n   */\n\n\n  matchProjectFromSnapshotName(snapshotName) {\n    return this.pathTemplates.snapshotPathTemplate.match(snapshotName).project;\n  }\n  /**\n   * Parse the snapshot from Snapshot resource.\n   *\n   * @param {string} snapshotName\n   *   A fully-qualified path representing Snapshot resource.\n   * @returns {string} A string representing the snapshot.\n   */\n\n\n  matchSnapshotFromSnapshotName(snapshotName) {\n    return this.pathTemplates.snapshotPathTemplate.match(snapshotName).snapshot;\n  }\n  /**\n   * Return a fully-qualified subscription resource name string.\n   *\n   * @param {string} project\n   * @param {string} subscription\n   * @returns {string} Resource name string.\n   */\n\n\n  subscriptionPath(project, subscription) {\n    return this.pathTemplates.subscriptionPathTemplate.render({\n      project: project,\n      subscription: subscription\n    });\n  }\n  /**\n   * Parse the project from Subscription resource.\n   *\n   * @param {string} subscriptionName\n   *   A fully-qualified path representing Subscription resource.\n   * @returns {string} A string representing the project.\n   */\n\n\n  matchProjectFromSubscriptionName(subscriptionName) {\n    return this.pathTemplates.subscriptionPathTemplate.match(subscriptionName).project;\n  }\n  /**\n   * Parse the subscription from Subscription resource.\n   *\n   * @param {string} subscriptionName\n   *   A fully-qualified path representing Subscription resource.\n   * @returns {string} A string representing the subscription.\n   */\n\n\n  matchSubscriptionFromSubscriptionName(subscriptionName) {\n    return this.pathTemplates.subscriptionPathTemplate.match(subscriptionName).subscription;\n  }\n  /**\n   * Terminate the gRPC channel and close the client.\n   *\n   * The client will no longer be usable and all future behavior is undefined.\n   * @returns {Promise} A promise that resolves when the client is closed.\n   */\n\n\n  close() {\n    this.initialize();\n\n    if (!this._terminated) {\n      return this.schemaServiceStub.then(stub => {\n        this._terminated = true;\n        stub.close();\n      });\n    }\n\n    return Promise.resolve();\n  }\n\n}\n\nexports.SchemaServiceClient = SchemaServiceClient;","map":{"version":3,"sources":["../../../src/v1/schema_service_client.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SchemaServiceClient = void 0;\n/* global window */\nconst gax = require(\"google-gax\");\nconst google_gax_1 = require(\"google-gax\");\nconst jsonProtos = require(\"../../protos/protos.json\");\n/**\n * Client JSON configuration object, loaded from\n * `src/v1/schema_service_client_config.json`.\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\nconst gapicConfig = require(\"./schema_service_client_config.json\");\nconst version = require('../../../package.json').version;\n/**\n *  Service for doing schema-related operations.\n * @class\n * @memberof v1\n */\nclass SchemaServiceClient {\n    /**\n     * Construct an instance of SchemaServiceClient.\n     *\n     * @param {object} [options] - The configuration object.\n     * The options accepted by the constructor are described in detail\n     * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).\n     * The common options are:\n     * @param {object} [options.credentials] - Credentials object.\n     * @param {string} [options.credentials.client_email]\n     * @param {string} [options.credentials.private_key]\n     * @param {string} [options.email] - Account email address. Required when\n     *     using a .pem or .p12 keyFilename.\n     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n     *     .p12 key downloaded from the Google Developers Console. If you provide\n     *     a path to a JSON file, the projectId option below is not necessary.\n     *     NOTE: .pem and .p12 require you to specify options.email as well.\n     * @param {number} [options.port] - The port on which to connect to\n     *     the remote host.\n     * @param {string} [options.projectId] - The project ID from the Google\n     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n     *     the environment variable GCLOUD_PROJECT for your project ID. If your\n     *     app is running in an environment which supports\n     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n     *     your project ID will be detected automatically.\n     * @param {string} [options.apiEndpoint] - The domain name of the\n     *     API remote host.\n     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n     *     Follows the structure of {@link gapicConfig}.\n     * @param {boolean} [options.fallback] - Use HTTP fallback mode.\n     *     In fallback mode, a special browser-compatible transport implementation is used\n     *     instead of gRPC transport. In browser context (if the `window` object is defined)\n     *     the fallback mode is enabled automatically; set `options.fallback` to `false`\n     *     if you need to override this behavior.\n     */\n    constructor(opts) {\n        var _a, _b;\n        this._terminated = false;\n        this.descriptors = {\n            page: {},\n            stream: {},\n            longrunning: {},\n            batching: {},\n        };\n        // Ensure that options include all the required fields.\n        const staticMembers = this.constructor;\n        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;\n        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};\n        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');\n        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);\n        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {\n            opts['scopes'] = staticMembers.scopes;\n        }\n        // Choose either gRPC or proto-over-HTTP implementation of google-gax.\n        this._gaxModule = opts.fallback ? gax.fallback : gax;\n        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.\n        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);\n        // Save options to use in initialize() method.\n        this._opts = opts;\n        // Save the auth object to the client, for use by other methods.\n        this.auth = this._gaxGrpc.auth;\n        // Set the default scopes in auth client if needed.\n        if (servicePath === staticMembers.servicePath) {\n            this.auth.defaultScopes = staticMembers.scopes;\n        }\n        this.iamClient = new google_gax_1.IamClient(this._gaxGrpc, opts);\n        // Determine the client header string.\n        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n        if (typeof process !== 'undefined' && 'versions' in process) {\n            clientHeader.push(`gl-node/${process.versions.node}`);\n        }\n        else {\n            clientHeader.push(`gl-web/${this._gaxModule.version}`);\n        }\n        if (!opts.fallback) {\n            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n        }\n        else if (opts.fallback === 'rest') {\n            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);\n        }\n        if (opts.libName && opts.libVersion) {\n            clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n        }\n        // Load the applicable protos.\n        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);\n        // This API contains \"path templates\"; forward-slash-separated\n        // identifiers to uniquely identify resources within the API.\n        // Create useful helper objects for these.\n        this.pathTemplates = {\n            projectPathTemplate: new this._gaxModule.PathTemplate('projects/{project}'),\n            projectTopicPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/topics/{topic}'),\n            schemaPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/schemas/{schema}'),\n            snapshotPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/snapshots/{snapshot}'),\n            subscriptionPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/subscriptions/{subscription}'),\n        };\n        // Some of the methods on this service return \"paged\" results,\n        // (e.g. 50 results at a time, with tokens to get subsequent\n        // pages). Denote the keys used for pagination and results.\n        this.descriptors.page = {\n            listSchemas: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'schemas'),\n        };\n        // Put together the default options sent with requests.\n        this._defaults = this._gaxGrpc.constructSettings('google.pubsub.v1.SchemaService', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });\n        // Set up a dictionary of \"inner API calls\"; the core implementation\n        // of calling the API is handled in `google-gax`, with this code\n        // merely providing the destination and request information.\n        this.innerApiCalls = {};\n    }\n    /**\n     * Initialize the client.\n     * Performs asynchronous operations (such as authentication) and prepares the client.\n     * This function will be called automatically when any class method is called for the\n     * first time, but if you need to initialize it before calling an actual method,\n     * feel free to call initialize() directly.\n     *\n     * You can await on this method if you want to make sure the client is initialized.\n     *\n     * @returns {Promise} A promise that resolves to an authenticated service stub.\n     */\n    initialize() {\n        // If the client stub promise is already initialized, return immediately.\n        if (this.schemaServiceStub) {\n            return this.schemaServiceStub;\n        }\n        // Put together the \"service stub\" for\n        // google.pubsub.v1.SchemaService.\n        this.schemaServiceStub = this._gaxGrpc.createStub(this._opts.fallback\n            ? this._protos.lookupService('google.pubsub.v1.SchemaService')\n            : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this._protos.google.pubsub.v1.SchemaService, this._opts);\n        // Iterate over each of the methods that the service provides\n        // and create an API call method for each.\n        const schemaServiceStubMethods = [\n            'createSchema',\n            'getSchema',\n            'listSchemas',\n            'deleteSchema',\n            'validateSchema',\n            'validateMessage',\n        ];\n        for (const methodName of schemaServiceStubMethods) {\n            const callPromise = this.schemaServiceStub.then(stub => (...args) => {\n                if (this._terminated) {\n                    return Promise.reject('The client has already been closed.');\n                }\n                const func = stub[methodName];\n                return func.apply(stub, args);\n            }, (err) => () => {\n                throw err;\n            });\n            const descriptor = this.descriptors.page[methodName] || undefined;\n            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor);\n            this.innerApiCalls[methodName] = apiCall;\n        }\n        return this.schemaServiceStub;\n    }\n    /**\n     * The DNS address for this API service.\n     * @returns {string} The DNS address for this service.\n     */\n    static get servicePath() {\n        return 'pubsub.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service - same as servicePath(),\n     * exists for compatibility reasons.\n     * @returns {string} The DNS address for this service.\n     */\n    static get apiEndpoint() {\n        return 'pubsub.googleapis.com';\n    }\n    /**\n     * The port for this API service.\n     * @returns {number} The default port for this service.\n     */\n    static get port() {\n        return 443;\n    }\n    /**\n     * The scopes needed to make gRPC calls for every method defined\n     * in this service.\n     * @returns {string[]} List of default scopes.\n     */\n    static get scopes() {\n        return [\n            'https://www.googleapis.com/auth/cloud-platform',\n            'https://www.googleapis.com/auth/pubsub',\n        ];\n    }\n    /**\n     * Return the project ID used by this class.\n     * @returns {Promise} A promise that resolves to string containing the project ID.\n     */\n    getProjectId(callback) {\n        if (callback) {\n            this.auth.getProjectId(callback);\n            return;\n        }\n        return this.auth.getProjectId();\n    }\n    /**\n     * Creates a schema.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The name of the project in which to create the schema.\n     *   Format is `projects/{project-id}`.\n     * @param {google.pubsub.v1.Schema} request.schema\n     *   Required. The schema object to create.\n     *\n     *   This schema's `name` parameter is ignored. The schema object returned\n     *   by CreateSchema will have a `name` made using the given `parent` and\n     *   `schema_id`.\n     * @param {string} request.schemaId\n     *   The ID to use for the schema, which will become the final component of\n     *   the schema's resource name.\n     *\n     *   See https://cloud.google.com/pubsub/docs/admin#resource_names for resource\n     *   name constraints.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Schema]{@link google.pubsub.v1.Schema}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.createSchema(request);\n     */\n    createSchema(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            gax.routingHeader.fromParams({\n                parent: request.parent || '',\n            });\n        this.initialize();\n        return this.innerApiCalls.createSchema(request, options, callback);\n    }\n    /**\n     * Gets a schema.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. The name of the schema to get.\n     *   Format is `projects/{project}/schemas/{schema}`.\n     * @param {google.pubsub.v1.SchemaView} request.view\n     *   The set of fields to return in the response. If not set, returns a Schema\n     *   with `name` and `type`, but not `definition`. Set to `FULL` to retrieve all\n     *   fields.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Schema]{@link google.pubsub.v1.Schema}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.getSchema(request);\n     */\n    getSchema(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            gax.routingHeader.fromParams({\n                name: request.name || '',\n            });\n        this.initialize();\n        return this.innerApiCalls.getSchema(request, options, callback);\n    }\n    /**\n     * Deletes a schema.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. Name of the schema to delete.\n     *   Format is `projects/{project}/schemas/{schema}`.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.deleteSchema(request);\n     */\n    deleteSchema(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            gax.routingHeader.fromParams({\n                name: request.name || '',\n            });\n        this.initialize();\n        return this.innerApiCalls.deleteSchema(request, options, callback);\n    }\n    /**\n     * Validates a schema.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The name of the project in which to validate schemas.\n     *   Format is `projects/{project-id}`.\n     * @param {google.pubsub.v1.Schema} request.schema\n     *   Required. The schema object to validate.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [ValidateSchemaResponse]{@link google.pubsub.v1.ValidateSchemaResponse}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.validateSchema(request);\n     */\n    validateSchema(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            gax.routingHeader.fromParams({\n                parent: request.parent || '',\n            });\n        this.initialize();\n        return this.innerApiCalls.validateSchema(request, options, callback);\n    }\n    /**\n     * Validates a message against a schema.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The name of the project in which to validate schemas.\n     *   Format is `projects/{project-id}`.\n     * @param {string} request.name\n     *   Name of the schema against which to validate.\n     *\n     *   Format is `projects/{project}/schemas/{schema}`.\n     * @param {google.pubsub.v1.Schema} request.schema\n     *   Ad-hoc schema against which to validate\n     * @param {Buffer} request.message\n     *   Message to validate against the provided `schema_spec`.\n     * @param {google.pubsub.v1.Encoding} request.encoding\n     *   The encoding expected for messages\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [ValidateMessageResponse]{@link google.pubsub.v1.ValidateMessageResponse}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.validateMessage(request);\n     */\n    validateMessage(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            gax.routingHeader.fromParams({\n                parent: request.parent || '',\n            });\n        this.initialize();\n        return this.innerApiCalls.validateMessage(request, options, callback);\n    }\n    /**\n     * Lists schemas in a project.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The name of the project in which to list schemas.\n     *   Format is `projects/{project-id}`.\n     * @param {google.pubsub.v1.SchemaView} request.view\n     *   The set of Schema fields to return in the response. If not set, returns\n     *   Schemas with `name` and `type`, but not `definition`. Set to `FULL` to\n     *   retrieve all fields.\n     * @param {number} request.pageSize\n     *   Maximum number of schemas to return.\n     * @param {string} request.pageToken\n     *   The value returned by the last `ListSchemasResponse`; indicates that\n     *   this is a continuation of a prior `ListSchemas` call, and that the\n     *   system should return the next page of data.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of [Schema]{@link google.pubsub.v1.Schema}.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed and will merge results from all the pages into this array.\n     *   Note that it can affect your quota.\n     *   We recommend using `listSchemasAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     */\n    listSchemas(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            gax.routingHeader.fromParams({\n                parent: request.parent || '',\n            });\n        this.initialize();\n        return this.innerApiCalls.listSchemas(request, options, callback);\n    }\n    /**\n     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The name of the project in which to list schemas.\n     *   Format is `projects/{project-id}`.\n     * @param {google.pubsub.v1.SchemaView} request.view\n     *   The set of Schema fields to return in the response. If not set, returns\n     *   Schemas with `name` and `type`, but not `definition`. Set to `FULL` to\n     *   retrieve all fields.\n     * @param {number} request.pageSize\n     *   Maximum number of schemas to return.\n     * @param {string} request.pageToken\n     *   The value returned by the last `ListSchemasResponse`; indicates that\n     *   this is a continuation of a prior `ListSchemas` call, and that the\n     *   system should return the next page of data.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing [Schema]{@link google.pubsub.v1.Schema} on 'data' event.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed. Note that it can affect your quota.\n     *   We recommend using `listSchemasAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     */\n    listSchemasStream(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            gax.routingHeader.fromParams({\n                parent: request.parent || '',\n            });\n        const callSettings = new gax.CallSettings(options);\n        this.initialize();\n        return this.descriptors.page.listSchemas.createStream(this.innerApiCalls.listSchemas, request, callSettings);\n    }\n    /**\n     * Equivalent to `listSchemas`, but returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The name of the project in which to list schemas.\n     *   Format is `projects/{project-id}`.\n     * @param {google.pubsub.v1.SchemaView} request.view\n     *   The set of Schema fields to return in the response. If not set, returns\n     *   Schemas with `name` and `type`, but not `definition`. Set to `FULL` to\n     *   retrieve all fields.\n     * @param {number} request.pageSize\n     *   Maximum number of schemas to return.\n     * @param {string} request.pageToken\n     *   The value returned by the last `ListSchemasResponse`; indicates that\n     *   this is a continuation of a prior `ListSchemas` call, and that the\n     *   system should return the next page of data.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   [Schema]{@link google.pubsub.v1.Schema}. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     * @example\n     * const iterable = client.listSchemasAsync(request);\n     * for await (const response of iterable) {\n     *   // process response\n     * }\n     */\n    listSchemasAsync(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            gax.routingHeader.fromParams({\n                parent: request.parent || '',\n            });\n        options = options || {};\n        const callSettings = new gax.CallSettings(options);\n        this.initialize();\n        return this.descriptors.page.listSchemas.asyncIterate(this.innerApiCalls['listSchemas'], request, callSettings);\n    }\n    /**\n     * Gets the access control policy for a resource. Returns an empty policy\n     * if the resource exists and does not have a policy set.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.resource\n     *   REQUIRED: The resource for which the policy is being requested.\n     *   See the operation documentation for the appropriate value for this field.\n     * @param {Object} [request.options]\n     *   OPTIONAL: A `GetPolicyOptions` object for specifying options to\n     *   `GetIamPolicy`. This field is only used by Cloud IAM.\n     *\n     *   This object should have the same structure as [GetPolicyOptions]{@link google.iam.v1.GetPolicyOptions}\n     * @param {Object} [options]\n     *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n     *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n     * @param {function(?Error, ?Object)} [callback]\n     *   The function which will be called with the result of the API call.\n     *\n     *   The second parameter to the callback is an object representing [Policy]{@link google.iam.v1.Policy}.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    getIamPolicy(request, options, callback) {\n        return this.iamClient.getIamPolicy(request, options, callback);\n    }\n    /**\n     * Returns permissions that a caller has on the specified resource. If the\n     * resource does not exist, this will return an empty set of\n     * permissions, not a NOT_FOUND error.\n     *\n     * Note: This operation is designed to be used for building\n     * permission-aware UIs and command-line tools, not for authorization\n     * checking. This operation may \"fail open\" without warning.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.resource\n     *   REQUIRED: The resource for which the policy detail is being requested.\n     *   See the operation documentation for the appropriate value for this field.\n     * @param {string[]} request.permissions\n     *   The set of permissions to check for the `resource`. Permissions with\n     *   wildcards (such as '*' or 'storage.*') are not allowed. For more\n     *   information see\n     *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).\n     * @param {Object} [options]\n     *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n     *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n     * @param {function(?Error, ?Object)} [callback]\n     *   The function which will be called with the result of the API call.\n     *\n     *   The second parameter to the callback is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    setIamPolicy(request, options, callback) {\n        return this.iamClient.setIamPolicy(request, options, callback);\n    }\n    /**\n     * Returns permissions that a caller has on the specified resource. If the\n     * resource does not exist, this will return an empty set of\n     * permissions, not a NOT_FOUND error.\n     *\n     * Note: This operation is designed to be used for building\n     * permission-aware UIs and command-line tools, not for authorization\n     * checking. This operation may \"fail open\" without warning.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.resource\n     *   REQUIRED: The resource for which the policy detail is being requested.\n     *   See the operation documentation for the appropriate value for this field.\n     * @param {string[]} request.permissions\n     *   The set of permissions to check for the `resource`. Permissions with\n     *   wildcards (such as '*' or 'storage.*') are not allowed. For more\n     *   information see\n     *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).\n     * @param {Object} [options]\n     *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n     *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n     * @param {function(?Error, ?Object)} [callback]\n     *   The function which will be called with the result of the API call.\n     *\n     *   The second parameter to the callback is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     *\n     */\n    testIamPermissions(request, options, callback) {\n        return this.iamClient.testIamPermissions(request, options, callback);\n    }\n    // --------------------\n    // -- Path templates --\n    // --------------------\n    /**\n     * Return a fully-qualified project resource name string.\n     *\n     * @param {string} project\n     * @returns {string} Resource name string.\n     */\n    projectPath(project) {\n        return this.pathTemplates.projectPathTemplate.render({\n            project: project,\n        });\n    }\n    /**\n     * Parse the project from Project resource.\n     *\n     * @param {string} projectName\n     *   A fully-qualified path representing Project resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectName(projectName) {\n        return this.pathTemplates.projectPathTemplate.match(projectName).project;\n    }\n    /**\n     * Return a fully-qualified projectTopic resource name string.\n     *\n     * @param {string} project\n     * @param {string} topic\n     * @returns {string} Resource name string.\n     */\n    projectTopicPath(project, topic) {\n        return this.pathTemplates.projectTopicPathTemplate.render({\n            project: project,\n            topic: topic,\n        });\n    }\n    /**\n     * Parse the project from ProjectTopic resource.\n     *\n     * @param {string} projectTopicName\n     *   A fully-qualified path representing project_topic resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectTopicName(projectTopicName) {\n        return this.pathTemplates.projectTopicPathTemplate.match(projectTopicName)\n            .project;\n    }\n    /**\n     * Parse the topic from ProjectTopic resource.\n     *\n     * @param {string} projectTopicName\n     *   A fully-qualified path representing project_topic resource.\n     * @returns {string} A string representing the topic.\n     */\n    matchTopicFromProjectTopicName(projectTopicName) {\n        return this.pathTemplates.projectTopicPathTemplate.match(projectTopicName)\n            .topic;\n    }\n    /**\n     * Return a fully-qualified schema resource name string.\n     *\n     * @param {string} project\n     * @param {string} schema\n     * @returns {string} Resource name string.\n     */\n    schemaPath(project, schema) {\n        return this.pathTemplates.schemaPathTemplate.render({\n            project: project,\n            schema: schema,\n        });\n    }\n    /**\n     * Parse the project from Schema resource.\n     *\n     * @param {string} schemaName\n     *   A fully-qualified path representing Schema resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromSchemaName(schemaName) {\n        return this.pathTemplates.schemaPathTemplate.match(schemaName).project;\n    }\n    /**\n     * Parse the schema from Schema resource.\n     *\n     * @param {string} schemaName\n     *   A fully-qualified path representing Schema resource.\n     * @returns {string} A string representing the schema.\n     */\n    matchSchemaFromSchemaName(schemaName) {\n        return this.pathTemplates.schemaPathTemplate.match(schemaName).schema;\n    }\n    /**\n     * Return a fully-qualified snapshot resource name string.\n     *\n     * @param {string} project\n     * @param {string} snapshot\n     * @returns {string} Resource name string.\n     */\n    snapshotPath(project, snapshot) {\n        return this.pathTemplates.snapshotPathTemplate.render({\n            project: project,\n            snapshot: snapshot,\n        });\n    }\n    /**\n     * Parse the project from Snapshot resource.\n     *\n     * @param {string} snapshotName\n     *   A fully-qualified path representing Snapshot resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromSnapshotName(snapshotName) {\n        return this.pathTemplates.snapshotPathTemplate.match(snapshotName).project;\n    }\n    /**\n     * Parse the snapshot from Snapshot resource.\n     *\n     * @param {string} snapshotName\n     *   A fully-qualified path representing Snapshot resource.\n     * @returns {string} A string representing the snapshot.\n     */\n    matchSnapshotFromSnapshotName(snapshotName) {\n        return this.pathTemplates.snapshotPathTemplate.match(snapshotName).snapshot;\n    }\n    /**\n     * Return a fully-qualified subscription resource name string.\n     *\n     * @param {string} project\n     * @param {string} subscription\n     * @returns {string} Resource name string.\n     */\n    subscriptionPath(project, subscription) {\n        return this.pathTemplates.subscriptionPathTemplate.render({\n            project: project,\n            subscription: subscription,\n        });\n    }\n    /**\n     * Parse the project from Subscription resource.\n     *\n     * @param {string} subscriptionName\n     *   A fully-qualified path representing Subscription resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromSubscriptionName(subscriptionName) {\n        return this.pathTemplates.subscriptionPathTemplate.match(subscriptionName)\n            .project;\n    }\n    /**\n     * Parse the subscription from Subscription resource.\n     *\n     * @param {string} subscriptionName\n     *   A fully-qualified path representing Subscription resource.\n     * @returns {string} A string representing the subscription.\n     */\n    matchSubscriptionFromSubscriptionName(subscriptionName) {\n        return this.pathTemplates.subscriptionPathTemplate.match(subscriptionName)\n            .subscription;\n    }\n    /**\n     * Terminate the gRPC channel and close the client.\n     *\n     * The client will no longer be usable and all future behavior is undefined.\n     * @returns {Promise} A promise that resolves when the client is closed.\n     */\n    close() {\n        this.initialize();\n        if (!this._terminated) {\n            return this.schemaServiceStub.then(stub => {\n                this._terminated = true;\n                stub.close();\n            });\n        }\n        return Promise.resolve();\n    }\n}\nexports.SchemaServiceClient = SchemaServiceClient;\n//# sourceMappingURL=schema_service_client.js.map"]},"metadata":{},"sourceType":"script"}