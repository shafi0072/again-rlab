{"ast":null,"code":"/** Returns the value which forms a stack group. */\nexport var getStackValue = function getStackValue(d) {\n  return d.stack;\n};\n/**\n * Merges `seriesChildren` `props.data` by their `stack` value which\n * forms the stack grouping (`x` if vertical, `y` if horizontal)\n * and returns `CombinedStackData[]`.\n */\n\nexport default function combineBarStackData(seriesChildren, horizontal) {\n  var dataByStackValue = {};\n  seriesChildren.forEach(function (child) {\n    var _child$props = child.props,\n        dataKey = _child$props.dataKey,\n        data = _child$props.data,\n        xAccessor = _child$props.xAccessor,\n        yAccessor = _child$props.yAccessor; // this should exist but double check\n\n    if (!xAccessor || !yAccessor) return;\n\n    var _ref = horizontal ? [yAccessor, xAccessor] : [xAccessor, yAccessor],\n        stackFn = _ref[0],\n        valueFn = _ref[1];\n\n    data.forEach(function (d) {\n      var stack = stackFn(d);\n      var numericValue = valueFn(d);\n      var stackKey = String(stack);\n\n      if (!dataByStackValue[stackKey]) {\n        dataByStackValue[stackKey] = {\n          stack: stack,\n          positiveSum: 0,\n          negativeSum: 0\n        };\n      }\n\n      dataByStackValue[stackKey][dataKey] = numericValue;\n      dataByStackValue[stackKey][numericValue >= 0 ? 'positiveSum' : 'negativeSum'] += numericValue;\n    });\n  });\n  return Object.values(dataByStackValue);\n}","map":{"version":3,"sources":["C:/remotePackRlab-acab49ee44aa8f06acbfc147116dbc3387885161/node_modules/@visx/xychart/esm/utils/combineBarStackData.js"],"names":["getStackValue","d","stack","combineBarStackData","seriesChildren","horizontal","dataByStackValue","forEach","child","_child$props","props","dataKey","data","xAccessor","yAccessor","_ref","stackFn","valueFn","numericValue","stackKey","String","positiveSum","negativeSum","Object","values"],"mappings":"AAAA;AACA,OAAO,IAAIA,aAAa,GAAG,SAASA,aAAT,CAAuBC,CAAvB,EAA0B;AACnD,SAAOA,CAAC,CAACC,KAAT;AACD,CAFM;AAGP;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,mBAAT,CAA6BC,cAA7B,EAA6CC,UAA7C,EAAyD;AACtE,MAAIC,gBAAgB,GAAG,EAAvB;AACAF,EAAAA,cAAc,CAACG,OAAf,CAAuB,UAAUC,KAAV,EAAiB;AACtC,QAAIC,YAAY,GAAGD,KAAK,CAACE,KAAzB;AAAA,QACIC,OAAO,GAAGF,YAAY,CAACE,OAD3B;AAAA,QAEIC,IAAI,GAAGH,YAAY,CAACG,IAFxB;AAAA,QAGIC,SAAS,GAAGJ,YAAY,CAACI,SAH7B;AAAA,QAIIC,SAAS,GAAGL,YAAY,CAACK,SAJ7B,CADsC,CAKE;;AAExC,QAAI,CAACD,SAAD,IAAc,CAACC,SAAnB,EAA8B;;AAE9B,QAAIC,IAAI,GAAGV,UAAU,GAAG,CAACS,SAAD,EAAYD,SAAZ,CAAH,GAA4B,CAACA,SAAD,EAAYC,SAAZ,CAAjD;AAAA,QACIE,OAAO,GAAGD,IAAI,CAAC,CAAD,CADlB;AAAA,QAEIE,OAAO,GAAGF,IAAI,CAAC,CAAD,CAFlB;;AAIAH,IAAAA,IAAI,CAACL,OAAL,CAAa,UAAUN,CAAV,EAAa;AACxB,UAAIC,KAAK,GAAGc,OAAO,CAACf,CAAD,CAAnB;AACA,UAAIiB,YAAY,GAAGD,OAAO,CAAChB,CAAD,CAA1B;AACA,UAAIkB,QAAQ,GAAGC,MAAM,CAAClB,KAAD,CAArB;;AAEA,UAAI,CAACI,gBAAgB,CAACa,QAAD,CAArB,EAAiC;AAC/Bb,QAAAA,gBAAgB,CAACa,QAAD,CAAhB,GAA6B;AAC3BjB,UAAAA,KAAK,EAAEA,KADoB;AAE3BmB,UAAAA,WAAW,EAAE,CAFc;AAG3BC,UAAAA,WAAW,EAAE;AAHc,SAA7B;AAKD;;AAEDhB,MAAAA,gBAAgB,CAACa,QAAD,CAAhB,CAA2BR,OAA3B,IAAsCO,YAAtC;AACAZ,MAAAA,gBAAgB,CAACa,QAAD,CAAhB,CAA2BD,YAAY,IAAI,CAAhB,GAAoB,aAApB,GAAoC,aAA/D,KAAiFA,YAAjF;AACD,KAfD;AAgBD,GA7BD;AA8BA,SAAOK,MAAM,CAACC,MAAP,CAAclB,gBAAd,CAAP;AACD","sourcesContent":["/** Returns the value which forms a stack group. */\nexport var getStackValue = function getStackValue(d) {\n  return d.stack;\n};\n/**\n * Merges `seriesChildren` `props.data` by their `stack` value which\n * forms the stack grouping (`x` if vertical, `y` if horizontal)\n * and returns `CombinedStackData[]`.\n */\n\nexport default function combineBarStackData(seriesChildren, horizontal) {\n  var dataByStackValue = {};\n  seriesChildren.forEach(function (child) {\n    var _child$props = child.props,\n        dataKey = _child$props.dataKey,\n        data = _child$props.data,\n        xAccessor = _child$props.xAccessor,\n        yAccessor = _child$props.yAccessor; // this should exist but double check\n\n    if (!xAccessor || !yAccessor) return;\n\n    var _ref = horizontal ? [yAccessor, xAccessor] : [xAccessor, yAccessor],\n        stackFn = _ref[0],\n        valueFn = _ref[1];\n\n    data.forEach(function (d) {\n      var stack = stackFn(d);\n      var numericValue = valueFn(d);\n      var stackKey = String(stack);\n\n      if (!dataByStackValue[stackKey]) {\n        dataByStackValue[stackKey] = {\n          stack: stack,\n          positiveSum: 0,\n          negativeSum: 0\n        };\n      }\n\n      dataByStackValue[stackKey][dataKey] = numericValue;\n      dataByStackValue[stackKey][numericValue >= 0 ? 'positiveSum' : 'negativeSum'] += numericValue;\n    });\n  });\n  return Object.values(dataByStackValue);\n}"]},"metadata":{},"sourceType":"module"}