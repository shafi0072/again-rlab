{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SubscriberClient = void 0;\n/* global window */\n\nconst gax = require(\"google-gax\");\n\nconst google_gax_1 = require(\"google-gax\");\n\nconst jsonProtos = require(\"../../protos/protos.json\");\n/**\n * Client JSON configuration object, loaded from\n * `src/v1/subscriber_client_config.json`.\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\n\n\nconst gapicConfig = require(\"./subscriber_client_config.json\");\n\nconst version = require('../../../package.json').version;\n/**\n *  The service that an application uses to manipulate subscriptions and to\n *  consume messages from a subscription via the `Pull` method or by\n *  establishing a bi-directional stream using the `StreamingPull` method.\n * @class\n * @memberof v1\n */\n\n\nclass SubscriberClient {\n  /**\n   * Construct an instance of SubscriberClient.\n   *\n   * @param {object} [options] - The configuration object.\n   * The options accepted by the constructor are described in detail\n   * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).\n   * The common options are:\n   * @param {object} [options.credentials] - Credentials object.\n   * @param {string} [options.credentials.client_email]\n   * @param {string} [options.credentials.private_key]\n   * @param {string} [options.email] - Account email address. Required when\n   *     using a .pem or .p12 keyFilename.\n   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n   *     .p12 key downloaded from the Google Developers Console. If you provide\n   *     a path to a JSON file, the projectId option below is not necessary.\n   *     NOTE: .pem and .p12 require you to specify options.email as well.\n   * @param {number} [options.port] - The port on which to connect to\n   *     the remote host.\n   * @param {string} [options.projectId] - The project ID from the Google\n   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n   *     the environment variable GCLOUD_PROJECT for your project ID. If your\n   *     app is running in an environment which supports\n   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n   *     your project ID will be detected automatically.\n   * @param {string} [options.apiEndpoint] - The domain name of the\n   *     API remote host.\n   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n   *     Follows the structure of {@link gapicConfig}.\n   * @param {boolean} [options.fallback] - Use HTTP fallback mode.\n   *     In fallback mode, a special browser-compatible transport implementation is used\n   *     instead of gRPC transport. In browser context (if the `window` object is defined)\n   *     the fallback mode is enabled automatically; set `options.fallback` to `false`\n   *     if you need to override this behavior.\n   */\n  constructor(opts) {\n    var _a, _b;\n\n    this._terminated = false;\n    this.descriptors = {\n      page: {},\n      stream: {},\n      longrunning: {},\n      batching: {}\n    }; // Ensure that options include all the required fields.\n\n    const staticMembers = this.constructor;\n    const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;\n    const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n    const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};\n    const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function';\n    opts = Object.assign({\n      servicePath,\n      port,\n      clientConfig,\n      fallback\n    }, opts); // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n\n    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {\n      opts['scopes'] = staticMembers.scopes;\n    } // Choose either gRPC or proto-over-HTTP implementation of google-gax.\n\n\n    this._gaxModule = opts.fallback ? gax.fallback : gax; // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.\n\n    this._gaxGrpc = new this._gaxModule.GrpcClient(opts); // Save options to use in initialize() method.\n\n    this._opts = opts; // Save the auth object to the client, for use by other methods.\n\n    this.auth = this._gaxGrpc.auth; // Set the default scopes in auth client if needed.\n\n    if (servicePath === staticMembers.servicePath) {\n      this.auth.defaultScopes = staticMembers.scopes;\n    }\n\n    this.iamClient = new google_gax_1.IamClient(this._gaxGrpc, opts); // Determine the client header string.\n\n    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n\n    if (typeof process !== 'undefined' && 'versions' in process) {\n      clientHeader.push(`gl-node/${process.versions.node}`);\n    } else {\n      clientHeader.push(`gl-web/${this._gaxModule.version}`);\n    }\n\n    if (!opts.fallback) {\n      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n    } else if (opts.fallback === 'rest') {\n      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);\n    }\n\n    if (opts.libName && opts.libVersion) {\n      clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n    } // Load the applicable protos.\n\n\n    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos); // This API contains \"path templates\"; forward-slash-separated\n    // identifiers to uniquely identify resources within the API.\n    // Create useful helper objects for these.\n\n    this.pathTemplates = {\n      projectPathTemplate: new this._gaxModule.PathTemplate('projects/{project}'),\n      projectTopicPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/topics/{topic}'),\n      schemaPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/schemas/{schema}'),\n      snapshotPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/snapshots/{snapshot}'),\n      subscriptionPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/subscriptions/{subscription}')\n    }; // Some of the methods on this service return \"paged\" results,\n    // (e.g. 50 results at a time, with tokens to get subsequent\n    // pages). Denote the keys used for pagination and results.\n\n    this.descriptors.page = {\n      listSubscriptions: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'subscriptions'),\n      listSnapshots: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'snapshots')\n    }; // Some of the methods on this service provide streaming responses.\n    // Provide descriptors for these.\n\n    this.descriptors.stream = {\n      streamingPull: new this._gaxModule.StreamDescriptor(gax.StreamType.BIDI_STREAMING)\n    }; // Put together the default options sent with requests.\n\n    this._defaults = this._gaxGrpc.constructSettings('google.pubsub.v1.Subscriber', gapicConfig, opts.clientConfig || {}, {\n      'x-goog-api-client': clientHeader.join(' ')\n    }); // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n\n    this.innerApiCalls = {};\n  }\n  /**\n   * Initialize the client.\n   * Performs asynchronous operations (such as authentication) and prepares the client.\n   * This function will be called automatically when any class method is called for the\n   * first time, but if you need to initialize it before calling an actual method,\n   * feel free to call initialize() directly.\n   *\n   * You can await on this method if you want to make sure the client is initialized.\n   *\n   * @returns {Promise} A promise that resolves to an authenticated service stub.\n   */\n\n\n  initialize() {\n    // If the client stub promise is already initialized, return immediately.\n    if (this.subscriberStub) {\n      return this.subscriberStub;\n    } // Put together the \"service stub\" for\n    // google.pubsub.v1.Subscriber.\n\n\n    this.subscriberStub = this._gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService('google.pubsub.v1.Subscriber') : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this._protos.google.pubsub.v1.Subscriber, this._opts); // Iterate over each of the methods that the service provides\n    // and create an API call method for each.\n\n    const subscriberStubMethods = ['createSubscription', 'getSubscription', 'updateSubscription', 'listSubscriptions', 'deleteSubscription', 'modifyAckDeadline', 'acknowledge', 'pull', 'streamingPull', 'modifyPushConfig', 'getSnapshot', 'listSnapshots', 'createSnapshot', 'updateSnapshot', 'deleteSnapshot', 'seek'];\n\n    for (const methodName of subscriberStubMethods) {\n      const callPromise = this.subscriberStub.then(stub => (...args) => {\n        if (this._terminated) {\n          return Promise.reject('The client has already been closed.');\n        }\n\n        const func = stub[methodName];\n        return func.apply(stub, args);\n      }, err => () => {\n        throw err;\n      });\n      const descriptor = this.descriptors.page[methodName] || this.descriptors.stream[methodName] || undefined;\n\n      const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor);\n\n      this.innerApiCalls[methodName] = apiCall;\n    }\n\n    return this.subscriberStub;\n  }\n  /**\n   * The DNS address for this API service.\n   * @returns {string} The DNS address for this service.\n   */\n\n\n  static get servicePath() {\n    return 'pubsub.googleapis.com';\n  }\n  /**\n   * The DNS address for this API service - same as servicePath(),\n   * exists for compatibility reasons.\n   * @returns {string} The DNS address for this service.\n   */\n\n\n  static get apiEndpoint() {\n    return 'pubsub.googleapis.com';\n  }\n  /**\n   * The port for this API service.\n   * @returns {number} The default port for this service.\n   */\n\n\n  static get port() {\n    return 443;\n  }\n  /**\n   * The scopes needed to make gRPC calls for every method defined\n   * in this service.\n   * @returns {string[]} List of default scopes.\n   */\n\n\n  static get scopes() {\n    return ['https://www.googleapis.com/auth/cloud-platform', 'https://www.googleapis.com/auth/pubsub'];\n  }\n  /**\n   * Return the project ID used by this class.\n   * @returns {Promise} A promise that resolves to string containing the project ID.\n   */\n\n\n  getProjectId(callback) {\n    if (callback) {\n      this.auth.getProjectId(callback);\n      return;\n    }\n\n    return this.auth.getProjectId();\n  }\n  /**\n   * Creates a subscription to a given topic. See the [resource name rules]\n   * (https://cloud.google.com/pubsub/docs/admin#resource_names).\n   * If the subscription already exists, returns `ALREADY_EXISTS`.\n   * If the corresponding topic doesn't exist, returns `NOT_FOUND`.\n   *\n   * If the name is not provided in the request, the server will assign a random\n   * name for this subscription on the same project as the topic, conforming\n   * to the [resource name format]\n   * (https://cloud.google.com/pubsub/docs/admin#resource_names). The generated\n   * name is populated in the returned Subscription object. Note that for REST\n   * API requests, you must specify a name in the request.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Required. The name of the subscription. It must have the format\n   *   `\"projects/{project}/subscriptions/{subscription}\"`. `{subscription}` must\n   *   start with a letter, and contain only letters (`[A-Za-z]`), numbers\n   *   (`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes (`~`),\n   *   plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters\n   *   in length, and it must not start with `\"goog\"`.\n   * @param {string} request.topic\n   *   Required. The name of the topic from which this subscription is receiving\n   *   messages. Format is `projects/{project}/topics/{topic}`. The value of this\n   *   field will be `_deleted-topic_` if the topic has been deleted.\n   * @param {google.pubsub.v1.PushConfig} request.pushConfig\n   *   If push delivery is used with this subscription, this field is\n   *   used to configure it. An empty `pushConfig` signifies that the subscriber\n   *   will pull and ack messages using API methods.\n   * @param {number} request.ackDeadlineSeconds\n   *   The approximate amount of time (on a best-effort basis) Pub/Sub waits for\n   *   the subscriber to acknowledge receipt before resending the message. In the\n   *   interval after the message is delivered and before it is acknowledged, it\n   *   is considered to be <i>outstanding</i>. During that time period, the\n   *   message will not be redelivered (on a best-effort basis).\n   *\n   *   For pull subscriptions, this value is used as the initial value for the ack\n   *   deadline. To override this value for a given message, call\n   *   `ModifyAckDeadline` with the corresponding `ack_id` if using\n   *   non-streaming pull or send the `ack_id` in a\n   *   `StreamingModifyAckDeadlineRequest` if using streaming pull.\n   *   The minimum custom deadline you can specify is 10 seconds.\n   *   The maximum custom deadline you can specify is 600 seconds (10 minutes).\n   *   If this parameter is 0, a default value of 10 seconds is used.\n   *\n   *   For push delivery, this value is also used to set the request timeout for\n   *   the call to the push endpoint.\n   *\n   *   If the subscriber never acknowledges the message, the Pub/Sub\n   *   system will eventually redeliver the message.\n   * @param {boolean} request.retainAckedMessages\n   *   Indicates whether to retain acknowledged messages. If true, then\n   *   messages are not expunged from the subscription's backlog, even if they are\n   *   acknowledged, until they fall out of the `message_retention_duration`\n   *   window. This must be true if you would like to [Seek to a timestamp]\n   *   (https://cloud.google.com/pubsub/docs/replay-overview#seek_to_a_time).\n   * @param {google.protobuf.Duration} request.messageRetentionDuration\n   *   How long to retain unacknowledged messages in the subscription's backlog,\n   *   from the moment a message is published.\n   *   If `retain_acked_messages` is true, then this also configures the retention\n   *   of acknowledged messages, and thus configures how far back in time a `Seek`\n   *   can be done. Defaults to 7 days. Cannot be more than 7 days or less than 10\n   *   minutes.\n   * @param {number[]} request.labels\n   *   See <a href=\"https://cloud.google.com/pubsub/docs/labels\"> Creating and\n   *   managing labels</a>.\n   * @param {boolean} request.enableMessageOrdering\n   *   If true, messages published with the same `ordering_key` in `PubsubMessage`\n   *   will be delivered to the subscribers in the order in which they\n   *   are received by the Pub/Sub system. Otherwise, they may be delivered in\n   *   any order.\n   * @param {google.pubsub.v1.ExpirationPolicy} request.expirationPolicy\n   *   A policy that specifies the conditions for this subscription's expiration.\n   *   A subscription is considered active as long as any connected subscriber is\n   *   successfully consuming messages from the subscription or is issuing\n   *   operations on the subscription. If `expiration_policy` is not set, a\n   *   *default policy* with `ttl` of 31 days will be used. The minimum allowed\n   *   value for `expiration_policy.ttl` is 1 day.\n   * @param {string} request.filter\n   *   An expression written in the Pub/Sub [filter\n   *   language](https://cloud.google.com/pubsub/docs/filtering). If non-empty,\n   *   then only `PubsubMessage`s whose `attributes` field matches the filter are\n   *   delivered on this subscription. If empty, then no messages are filtered\n   *   out.\n   * @param {google.pubsub.v1.DeadLetterPolicy} request.deadLetterPolicy\n   *   A policy that specifies the conditions for dead lettering messages in\n   *   this subscription. If dead_letter_policy is not set, dead lettering\n   *   is disabled.\n   *\n   *   The Cloud Pub/Sub service account associated with this subscriptions's\n   *   parent project (i.e.,\n   *   service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have\n   *   permission to Acknowledge() messages on this subscription.\n   * @param {google.pubsub.v1.RetryPolicy} request.retryPolicy\n   *   A policy that specifies how Pub/Sub retries message delivery for this\n   *   subscription.\n   *\n   *   If not set, the default retry policy is applied. This generally implies\n   *   that messages will be retried as soon as possible for healthy subscribers.\n   *   RetryPolicy will be triggered on NACKs or acknowledgement deadline\n   *   exceeded events for a given message.\n   * @param {boolean} request.detached\n   *   Indicates whether the subscription is detached from its topic. Detached\n   *   subscriptions don't receive messages from their topic and don't retain any\n   *   backlog. `Pull` and `StreamingPull` requests will return\n   *   FAILED_PRECONDITION. If the subscription is a push subscription, pushes to\n   *   the endpoint will not be made.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Subscription]{@link google.pubsub.v1.Subscription}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.createSubscription(request);\n   */\n\n\n  createSubscription(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.createSubscription(request, options, callback);\n  }\n  /**\n   * Gets the configuration details of a subscription.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.subscription\n   *   Required. The name of the subscription to get.\n   *   Format is `projects/{project}/subscriptions/{sub}`.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Subscription]{@link google.pubsub.v1.Subscription}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.getSubscription(request);\n   */\n\n\n  getSubscription(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      subscription: request.subscription || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.getSubscription(request, options, callback);\n  }\n  /**\n   * Updates an existing subscription. Note that certain properties of a\n   * subscription, such as its topic, are not modifiable.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {google.pubsub.v1.Subscription} request.subscription\n   *   Required. The updated subscription object.\n   * @param {google.protobuf.FieldMask} request.updateMask\n   *   Required. Indicates which fields in the provided subscription to update.\n   *   Must be specified and non-empty.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Subscription]{@link google.pubsub.v1.Subscription}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.updateSubscription(request);\n   */\n\n\n  updateSubscription(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      'subscription.name': request.subscription.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.updateSubscription(request, options, callback);\n  }\n  /**\n   * Deletes an existing subscription. All messages retained in the subscription\n   * are immediately dropped. Calls to `Pull` after deletion will return\n   * `NOT_FOUND`. After a subscription is deleted, a new one may be created with\n   * the same name, but the new one has no association with the old\n   * subscription or its topic unless the same topic is specified.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.subscription\n   *   Required. The subscription to delete.\n   *   Format is `projects/{project}/subscriptions/{sub}`.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.deleteSubscription(request);\n   */\n\n\n  deleteSubscription(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      subscription: request.subscription || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.deleteSubscription(request, options, callback);\n  }\n  /**\n   * Modifies the ack deadline for a specific message. This method is useful\n   * to indicate that more time is needed to process a message by the\n   * subscriber, or to make the message available for redelivery if the\n   * processing was interrupted. Note that this does not modify the\n   * subscription-level `ackDeadlineSeconds` used for subsequent messages.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.subscription\n   *   Required. The name of the subscription.\n   *   Format is `projects/{project}/subscriptions/{sub}`.\n   * @param {string[]} request.ackIds\n   *   Required. List of acknowledgment IDs.\n   * @param {number} request.ackDeadlineSeconds\n   *   Required. The new ack deadline with respect to the time this request was\n   *   sent to the Pub/Sub system. For example, if the value is 10, the new ack\n   *   deadline will expire 10 seconds after the `ModifyAckDeadline` call was\n   *   made. Specifying zero might immediately make the message available for\n   *   delivery to another subscriber client. This typically results in an\n   *   increase in the rate of message redeliveries (that is, duplicates).\n   *   The minimum deadline you can specify is 0 seconds.\n   *   The maximum deadline you can specify is 600 seconds (10 minutes).\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.modifyAckDeadline(request);\n   */\n\n\n  modifyAckDeadline(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      subscription: request.subscription || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.modifyAckDeadline(request, options, callback);\n  }\n  /**\n   * Acknowledges the messages associated with the `ack_ids` in the\n   * `AcknowledgeRequest`. The Pub/Sub system can remove the relevant messages\n   * from the subscription.\n   *\n   * Acknowledging a message whose ack deadline has expired may succeed,\n   * but such a message may be redelivered later. Acknowledging a message more\n   * than once will not result in an error.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.subscription\n   *   Required. The subscription whose message is being acknowledged.\n   *   Format is `projects/{project}/subscriptions/{sub}`.\n   * @param {string[]} request.ackIds\n   *   Required. The acknowledgment ID for the messages being acknowledged that\n   *   was returned by the Pub/Sub system in the `Pull` response. Must not be\n   *   empty.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.acknowledge(request);\n   */\n\n\n  acknowledge(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      subscription: request.subscription || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.acknowledge(request, options, callback);\n  }\n  /**\n   * Pulls messages from the server. The server may return `UNAVAILABLE` if\n   * there are too many concurrent pull requests pending for the given\n   * subscription.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.subscription\n   *   Required. The subscription from which messages should be pulled.\n   *   Format is `projects/{project}/subscriptions/{sub}`.\n   * @param {boolean} [request.returnImmediately]\n   *   Optional. If this field set to true, the system will respond immediately\n   *   even if it there are no messages available to return in the `Pull`\n   *   response. Otherwise, the system may wait (for a bounded amount of time)\n   *   until at least one message is available, rather than returning no messages.\n   *   Warning: setting this field to `true` is discouraged because it adversely\n   *   impacts the performance of `Pull` operations. We recommend that users do\n   *   not set this field.\n   * @param {number} request.maxMessages\n   *   Required. The maximum number of messages to return for this request. Must\n   *   be a positive integer. The Pub/Sub system may return fewer than the number\n   *   specified.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [PullResponse]{@link google.pubsub.v1.PullResponse}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.pull(request);\n   */\n\n\n  pull(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      subscription: request.subscription || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.pull(request, options, callback);\n  }\n  /**\n   * Modifies the `PushConfig` for a specified subscription.\n   *\n   * This may be used to change a push subscription to a pull one (signified by\n   * an empty `PushConfig`) or vice versa, or change the endpoint URL and other\n   * attributes of a push subscription. Messages will accumulate for delivery\n   * continuously through the call regardless of changes to the `PushConfig`.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.subscription\n   *   Required. The name of the subscription.\n   *   Format is `projects/{project}/subscriptions/{sub}`.\n   * @param {google.pubsub.v1.PushConfig} request.pushConfig\n   *   Required. The push configuration for future deliveries.\n   *\n   *   An empty `pushConfig` indicates that the Pub/Sub system should\n   *   stop pushing messages from the given subscription and allow\n   *   messages to be pulled and acknowledged - effectively pausing\n   *   the subscription if `Pull` or `StreamingPull` is not called.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.modifyPushConfig(request);\n   */\n\n\n  modifyPushConfig(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      subscription: request.subscription || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.modifyPushConfig(request, options, callback);\n  }\n  /**\n   * Gets the configuration details of a snapshot. Snapshots are used in\n   * <a href=\"https://cloud.google.com/pubsub/docs/replay-overview\">Seek</a>\n   * operations, which allow you to manage message acknowledgments in bulk. That\n   * is, you can set the acknowledgment state of messages in an existing\n   * subscription to the state captured by a snapshot.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.snapshot\n   *   Required. The name of the snapshot to get.\n   *   Format is `projects/{project}/snapshots/{snap}`.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Snapshot]{@link google.pubsub.v1.Snapshot}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.getSnapshot(request);\n   */\n\n\n  getSnapshot(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      snapshot: request.snapshot || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.getSnapshot(request, options, callback);\n  }\n  /**\n   * Creates a snapshot from the requested subscription. Snapshots are used in\n   * [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations,\n   * which allow you to manage message acknowledgments in bulk. That is, you can\n   * set the acknowledgment state of messages in an existing subscription to the\n   * state captured by a snapshot.\n   * If the snapshot already exists, returns `ALREADY_EXISTS`.\n   * If the requested subscription doesn't exist, returns `NOT_FOUND`.\n   * If the backlog in the subscription is too old -- and the resulting snapshot\n   * would expire in less than 1 hour -- then `FAILED_PRECONDITION` is returned.\n   * See also the `Snapshot.expire_time` field. If the name is not provided in\n   * the request, the server will assign a random\n   * name for this snapshot on the same project as the subscription, conforming\n   * to the [resource name format]\n   * (https://cloud.google.com/pubsub/docs/admin#resource_names). The\n   * generated name is populated in the returned Snapshot object. Note that for\n   * REST API requests, you must specify a name in the request.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Required. User-provided name for this snapshot. If the name is not provided\n   *   in the request, the server will assign a random name for this snapshot on\n   *   the same project as the subscription. Note that for REST API requests, you\n   *   must specify a name.  See the <a\n   *   href=\"https://cloud.google.com/pubsub/docs/admin#resource_names\"> resource\n   *   name rules</a>. Format is `projects/{project}/snapshots/{snap}`.\n   * @param {string} request.subscription\n   *   Required. The subscription whose backlog the snapshot retains.\n   *   Specifically, the created snapshot is guaranteed to retain:\n   *    (a) The existing backlog on the subscription. More precisely, this is\n   *        defined as the messages in the subscription's backlog that are\n   *        unacknowledged upon the successful completion of the\n   *        `CreateSnapshot` request; as well as:\n   *    (b) Any messages published to the subscription's topic following the\n   *        successful completion of the CreateSnapshot request.\n   *   Format is `projects/{project}/subscriptions/{sub}`.\n   * @param {number[]} request.labels\n   *   See <a href=\"https://cloud.google.com/pubsub/docs/labels\"> Creating and\n   *   managing labels</a>.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Snapshot]{@link google.pubsub.v1.Snapshot}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.createSnapshot(request);\n   */\n\n\n  createSnapshot(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.createSnapshot(request, options, callback);\n  }\n  /**\n   * Updates an existing snapshot. Snapshots are used in\n   * <a href=\"https://cloud.google.com/pubsub/docs/replay-overview\">Seek</a>\n   * operations, which allow\n   * you to manage message acknowledgments in bulk. That is, you can set the\n   * acknowledgment state of messages in an existing subscription to the state\n   * captured by a snapshot.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {google.pubsub.v1.Snapshot} request.snapshot\n   *   Required. The updated snapshot object.\n   * @param {google.protobuf.FieldMask} request.updateMask\n   *   Required. Indicates which fields in the provided snapshot to update.\n   *   Must be specified and non-empty.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Snapshot]{@link google.pubsub.v1.Snapshot}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.updateSnapshot(request);\n   */\n\n\n  updateSnapshot(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      'snapshot.name': request.snapshot.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.updateSnapshot(request, options, callback);\n  }\n  /**\n   * Removes an existing snapshot. Snapshots are used in [Seek]\n   * (https://cloud.google.com/pubsub/docs/replay-overview) operations, which\n   * allow you to manage message acknowledgments in bulk. That is, you can set\n   * the acknowledgment state of messages in an existing subscription to the\n   * state captured by a snapshot.\n   * When the snapshot is deleted, all messages retained in the snapshot\n   * are immediately dropped. After a snapshot is deleted, a new one may be\n   * created with the same name, but the new one has no association with the old\n   * snapshot or its subscription, unless the same subscription is specified.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.snapshot\n   *   Required. The name of the snapshot to delete.\n   *   Format is `projects/{project}/snapshots/{snap}`.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.deleteSnapshot(request);\n   */\n\n\n  deleteSnapshot(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      snapshot: request.snapshot || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.deleteSnapshot(request, options, callback);\n  }\n  /**\n   * Seeks an existing subscription to a point in time or to a given snapshot,\n   * whichever is provided in the request. Snapshots are used in [Seek]\n   * (https://cloud.google.com/pubsub/docs/replay-overview) operations, which\n   * allow you to manage message acknowledgments in bulk. That is, you can set\n   * the acknowledgment state of messages in an existing subscription to the\n   * state captured by a snapshot. Note that both the subscription and the\n   * snapshot must be on the same topic.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.subscription\n   *   Required. The subscription to affect.\n   * @param {google.protobuf.Timestamp} request.time\n   *   The time to seek to.\n   *   Messages retained in the subscription that were published before this\n   *   time are marked as acknowledged, and messages retained in the\n   *   subscription that were published after this time are marked as\n   *   unacknowledged. Note that this operation affects only those messages\n   *   retained in the subscription (configured by the combination of\n   *   `message_retention_duration` and `retain_acked_messages`). For example,\n   *   if `time` corresponds to a point before the message retention\n   *   window (or to a point before the system's notion of the subscription\n   *   creation time), only retained messages will be marked as unacknowledged,\n   *   and already-expunged messages will not be restored.\n   * @param {string} request.snapshot\n   *   The snapshot to seek to. The snapshot's topic must be the same as that of\n   *   the provided subscription.\n   *   Format is `projects/{project}/snapshots/{snap}`.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [SeekResponse]{@link google.pubsub.v1.SeekResponse}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.seek(request);\n   */\n\n\n  seek(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      subscription: request.subscription || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.seek(request, options, callback);\n  }\n  /**\n   * Establishes a stream with the server, which sends messages down to the\n   * client. The client streams acknowledgements and ack deadline modifications\n   * back to the server. The server will close the stream and return the status\n   * on any error. The server may close the stream with status `UNAVAILABLE` to\n   * reassign server-side resources, in which case, the client should\n   * re-establish the stream. Flow control can be achieved by configuring the\n   * underlying RPC channel.\n   *\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Stream}\n   *   An object stream which is both readable and writable. It accepts objects\n   *   representing [StreamingPullRequest]{@link google.pubsub.v1.StreamingPullRequest} for write() method, and\n   *   will emit objects representing [StreamingPullResponse]{@link google.pubsub.v1.StreamingPullResponse} on 'data' event asynchronously.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#bi-directional-streaming)\n   *   for more details and examples.\n   * @example\n   * const stream = client.streamingPull();\n   * stream.on('data', (response) => { ... });\n   * stream.on('end', () => { ... });\n   * stream.write(request);\n   * stream.end();\n   */\n\n\n  streamingPull(options) {\n    this.initialize();\n    return this.innerApiCalls.streamingPull(options);\n  }\n  /**\n   * Lists matching subscriptions.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.project\n   *   Required. The name of the project in which to list subscriptions.\n   *   Format is `projects/{project-id}`.\n   * @param {number} request.pageSize\n   *   Maximum number of subscriptions to return.\n   * @param {string} request.pageToken\n   *   The value returned by the last `ListSubscriptionsResponse`; indicates that\n   *   this is a continuation of a prior `ListSubscriptions` call, and that the\n   *   system should return the next page of data.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of [Subscription]{@link google.pubsub.v1.Subscription}.\n   *   The client library will perform auto-pagination by default: it will call the API as many\n   *   times as needed and will merge results from all the pages into this array.\n   *   Note that it can affect your quota.\n   *   We recommend using `listSubscriptionsAsync()`\n   *   method described below for async iteration which you can stop as needed.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   */\n\n\n  listSubscriptions(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      project: request.project || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.listSubscriptions(request, options, callback);\n  }\n  /**\n   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.project\n   *   Required. The name of the project in which to list subscriptions.\n   *   Format is `projects/{project-id}`.\n   * @param {number} request.pageSize\n   *   Maximum number of subscriptions to return.\n   * @param {string} request.pageToken\n   *   The value returned by the last `ListSubscriptionsResponse`; indicates that\n   *   this is a continuation of a prior `ListSubscriptions` call, and that the\n   *   system should return the next page of data.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Stream}\n   *   An object stream which emits an object representing [Subscription]{@link google.pubsub.v1.Subscription} on 'data' event.\n   *   The client library will perform auto-pagination by default: it will call the API as many\n   *   times as needed. Note that it can affect your quota.\n   *   We recommend using `listSubscriptionsAsync()`\n   *   method described below for async iteration which you can stop as needed.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   */\n\n\n  listSubscriptionsStream(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      project: request.project || ''\n    });\n    const callSettings = new gax.CallSettings(options);\n    this.initialize();\n    return this.descriptors.page.listSubscriptions.createStream(this.innerApiCalls.listSubscriptions, request, callSettings);\n  }\n  /**\n   * Equivalent to `listSubscriptions`, but returns an iterable object.\n   *\n   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.project\n   *   Required. The name of the project in which to list subscriptions.\n   *   Format is `projects/{project-id}`.\n   * @param {number} request.pageSize\n   *   Maximum number of subscriptions to return.\n   * @param {string} request.pageToken\n   *   The value returned by the last `ListSubscriptionsResponse`; indicates that\n   *   this is a continuation of a prior `ListSubscriptions` call, and that the\n   *   system should return the next page of data.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Object}\n   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n   *   When you iterate the returned iterable, each element will be an object representing\n   *   [Subscription]{@link google.pubsub.v1.Subscription}. The API will be called under the hood as needed, once per the page,\n   *   so you can stop the iteration when you don't need more results.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   * @example\n   * const iterable = client.listSubscriptionsAsync(request);\n   * for await (const response of iterable) {\n   *   // process response\n   * }\n   */\n\n\n  listSubscriptionsAsync(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      project: request.project || ''\n    });\n    options = options || {};\n    const callSettings = new gax.CallSettings(options);\n    this.initialize();\n    return this.descriptors.page.listSubscriptions.asyncIterate(this.innerApiCalls['listSubscriptions'], request, callSettings);\n  }\n  /**\n   * Lists the existing snapshots. Snapshots are used in [Seek](\n   * https://cloud.google.com/pubsub/docs/replay-overview) operations, which\n   * allow you to manage message acknowledgments in bulk. That is, you can set\n   * the acknowledgment state of messages in an existing subscription to the\n   * state captured by a snapshot.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.project\n   *   Required. The name of the project in which to list snapshots.\n   *   Format is `projects/{project-id}`.\n   * @param {number} request.pageSize\n   *   Maximum number of snapshots to return.\n   * @param {string} request.pageToken\n   *   The value returned by the last `ListSnapshotsResponse`; indicates that this\n   *   is a continuation of a prior `ListSnapshots` call, and that the system\n   *   should return the next page of data.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of [Snapshot]{@link google.pubsub.v1.Snapshot}.\n   *   The client library will perform auto-pagination by default: it will call the API as many\n   *   times as needed and will merge results from all the pages into this array.\n   *   Note that it can affect your quota.\n   *   We recommend using `listSnapshotsAsync()`\n   *   method described below for async iteration which you can stop as needed.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   */\n\n\n  listSnapshots(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      project: request.project || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.listSnapshots(request, options, callback);\n  }\n  /**\n   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.project\n   *   Required. The name of the project in which to list snapshots.\n   *   Format is `projects/{project-id}`.\n   * @param {number} request.pageSize\n   *   Maximum number of snapshots to return.\n   * @param {string} request.pageToken\n   *   The value returned by the last `ListSnapshotsResponse`; indicates that this\n   *   is a continuation of a prior `ListSnapshots` call, and that the system\n   *   should return the next page of data.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Stream}\n   *   An object stream which emits an object representing [Snapshot]{@link google.pubsub.v1.Snapshot} on 'data' event.\n   *   The client library will perform auto-pagination by default: it will call the API as many\n   *   times as needed. Note that it can affect your quota.\n   *   We recommend using `listSnapshotsAsync()`\n   *   method described below for async iteration which you can stop as needed.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   */\n\n\n  listSnapshotsStream(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      project: request.project || ''\n    });\n    const callSettings = new gax.CallSettings(options);\n    this.initialize();\n    return this.descriptors.page.listSnapshots.createStream(this.innerApiCalls.listSnapshots, request, callSettings);\n  }\n  /**\n   * Equivalent to `listSnapshots`, but returns an iterable object.\n   *\n   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.project\n   *   Required. The name of the project in which to list snapshots.\n   *   Format is `projects/{project-id}`.\n   * @param {number} request.pageSize\n   *   Maximum number of snapshots to return.\n   * @param {string} request.pageToken\n   *   The value returned by the last `ListSnapshotsResponse`; indicates that this\n   *   is a continuation of a prior `ListSnapshots` call, and that the system\n   *   should return the next page of data.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Object}\n   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n   *   When you iterate the returned iterable, each element will be an object representing\n   *   [Snapshot]{@link google.pubsub.v1.Snapshot}. The API will be called under the hood as needed, once per the page,\n   *   so you can stop the iteration when you don't need more results.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   * @example\n   * const iterable = client.listSnapshotsAsync(request);\n   * for await (const response of iterable) {\n   *   // process response\n   * }\n   */\n\n\n  listSnapshotsAsync(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      project: request.project || ''\n    });\n    options = options || {};\n    const callSettings = new gax.CallSettings(options);\n    this.initialize();\n    return this.descriptors.page.listSnapshots.asyncIterate(this.innerApiCalls['listSnapshots'], request, callSettings);\n  }\n  /**\n   * Gets the access control policy for a resource. Returns an empty policy\n   * if the resource exists and does not have a policy set.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.resource\n   *   REQUIRED: The resource for which the policy is being requested.\n   *   See the operation documentation for the appropriate value for this field.\n   * @param {Object} [request.options]\n   *   OPTIONAL: A `GetPolicyOptions` object for specifying options to\n   *   `GetIamPolicy`. This field is only used by Cloud IAM.\n   *\n   *   This object should have the same structure as [GetPolicyOptions]{@link google.iam.v1.GetPolicyOptions}\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [Policy]{@link google.iam.v1.Policy}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  getIamPolicy(request, options, callback) {\n    return this.iamClient.getIamPolicy(request, options, callback);\n  }\n  /**\n   * Returns permissions that a caller has on the specified resource. If the\n   * resource does not exist, this will return an empty set of\n   * permissions, not a NOT_FOUND error.\n   *\n   * Note: This operation is designed to be used for building\n   * permission-aware UIs and command-line tools, not for authorization\n   * checking. This operation may \"fail open\" without warning.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.resource\n   *   REQUIRED: The resource for which the policy detail is being requested.\n   *   See the operation documentation for the appropriate value for this field.\n   * @param {string[]} request.permissions\n   *   The set of permissions to check for the `resource`. Permissions with\n   *   wildcards (such as '*' or 'storage.*') are not allowed. For more\n   *   information see\n   *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  setIamPolicy(request, options, callback) {\n    return this.iamClient.setIamPolicy(request, options, callback);\n  }\n  /**\n   * Returns permissions that a caller has on the specified resource. If the\n   * resource does not exist, this will return an empty set of\n   * permissions, not a NOT_FOUND error.\n   *\n   * Note: This operation is designed to be used for building\n   * permission-aware UIs and command-line tools, not for authorization\n   * checking. This operation may \"fail open\" without warning.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.resource\n   *   REQUIRED: The resource for which the policy detail is being requested.\n   *   See the operation documentation for the appropriate value for this field.\n   * @param {string[]} request.permissions\n   *   The set of permissions to check for the `resource`. Permissions with\n   *   wildcards (such as '*' or 'storage.*') are not allowed. For more\n   *   information see\n   *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   */\n\n\n  testIamPermissions(request, options, callback) {\n    return this.iamClient.testIamPermissions(request, options, callback);\n  } // --------------------\n  // -- Path templates --\n  // --------------------\n\n  /**\n   * Return a fully-qualified project resource name string.\n   *\n   * @param {string} project\n   * @returns {string} Resource name string.\n   */\n\n\n  projectPath(project) {\n    return this.pathTemplates.projectPathTemplate.render({\n      project: project\n    });\n  }\n  /**\n   * Parse the project from Project resource.\n   *\n   * @param {string} projectName\n   *   A fully-qualified path representing Project resource.\n   * @returns {string} A string representing the project.\n   */\n\n\n  matchProjectFromProjectName(projectName) {\n    return this.pathTemplates.projectPathTemplate.match(projectName).project;\n  }\n  /**\n   * Return a fully-qualified projectTopic resource name string.\n   *\n   * @param {string} project\n   * @param {string} topic\n   * @returns {string} Resource name string.\n   */\n\n\n  projectTopicPath(project, topic) {\n    return this.pathTemplates.projectTopicPathTemplate.render({\n      project: project,\n      topic: topic\n    });\n  }\n  /**\n   * Parse the project from ProjectTopic resource.\n   *\n   * @param {string} projectTopicName\n   *   A fully-qualified path representing project_topic resource.\n   * @returns {string} A string representing the project.\n   */\n\n\n  matchProjectFromProjectTopicName(projectTopicName) {\n    return this.pathTemplates.projectTopicPathTemplate.match(projectTopicName).project;\n  }\n  /**\n   * Parse the topic from ProjectTopic resource.\n   *\n   * @param {string} projectTopicName\n   *   A fully-qualified path representing project_topic resource.\n   * @returns {string} A string representing the topic.\n   */\n\n\n  matchTopicFromProjectTopicName(projectTopicName) {\n    return this.pathTemplates.projectTopicPathTemplate.match(projectTopicName).topic;\n  }\n  /**\n   * Return a fully-qualified schema resource name string.\n   *\n   * @param {string} project\n   * @param {string} schema\n   * @returns {string} Resource name string.\n   */\n\n\n  schemaPath(project, schema) {\n    return this.pathTemplates.schemaPathTemplate.render({\n      project: project,\n      schema: schema\n    });\n  }\n  /**\n   * Parse the project from Schema resource.\n   *\n   * @param {string} schemaName\n   *   A fully-qualified path representing Schema resource.\n   * @returns {string} A string representing the project.\n   */\n\n\n  matchProjectFromSchemaName(schemaName) {\n    return this.pathTemplates.schemaPathTemplate.match(schemaName).project;\n  }\n  /**\n   * Parse the schema from Schema resource.\n   *\n   * @param {string} schemaName\n   *   A fully-qualified path representing Schema resource.\n   * @returns {string} A string representing the schema.\n   */\n\n\n  matchSchemaFromSchemaName(schemaName) {\n    return this.pathTemplates.schemaPathTemplate.match(schemaName).schema;\n  }\n  /**\n   * Return a fully-qualified snapshot resource name string.\n   *\n   * @param {string} project\n   * @param {string} snapshot\n   * @returns {string} Resource name string.\n   */\n\n\n  snapshotPath(project, snapshot) {\n    return this.pathTemplates.snapshotPathTemplate.render({\n      project: project,\n      snapshot: snapshot\n    });\n  }\n  /**\n   * Parse the project from Snapshot resource.\n   *\n   * @param {string} snapshotName\n   *   A fully-qualified path representing Snapshot resource.\n   * @returns {string} A string representing the project.\n   */\n\n\n  matchProjectFromSnapshotName(snapshotName) {\n    return this.pathTemplates.snapshotPathTemplate.match(snapshotName).project;\n  }\n  /**\n   * Parse the snapshot from Snapshot resource.\n   *\n   * @param {string} snapshotName\n   *   A fully-qualified path representing Snapshot resource.\n   * @returns {string} A string representing the snapshot.\n   */\n\n\n  matchSnapshotFromSnapshotName(snapshotName) {\n    return this.pathTemplates.snapshotPathTemplate.match(snapshotName).snapshot;\n  }\n  /**\n   * Return a fully-qualified subscription resource name string.\n   *\n   * @param {string} project\n   * @param {string} subscription\n   * @returns {string} Resource name string.\n   */\n\n\n  subscriptionPath(project, subscription) {\n    return this.pathTemplates.subscriptionPathTemplate.render({\n      project: project,\n      subscription: subscription\n    });\n  }\n  /**\n   * Parse the project from Subscription resource.\n   *\n   * @param {string} subscriptionName\n   *   A fully-qualified path representing Subscription resource.\n   * @returns {string} A string representing the project.\n   */\n\n\n  matchProjectFromSubscriptionName(subscriptionName) {\n    return this.pathTemplates.subscriptionPathTemplate.match(subscriptionName).project;\n  }\n  /**\n   * Parse the subscription from Subscription resource.\n   *\n   * @param {string} subscriptionName\n   *   A fully-qualified path representing Subscription resource.\n   * @returns {string} A string representing the subscription.\n   */\n\n\n  matchSubscriptionFromSubscriptionName(subscriptionName) {\n    return this.pathTemplates.subscriptionPathTemplate.match(subscriptionName).subscription;\n  }\n  /**\n   * Terminate the gRPC channel and close the client.\n   *\n   * The client will no longer be usable and all future behavior is undefined.\n   * @returns {Promise} A promise that resolves when the client is closed.\n   */\n\n\n  close() {\n    this.initialize();\n\n    if (!this._terminated) {\n      return this.subscriberStub.then(stub => {\n        this._terminated = true;\n        stub.close();\n      });\n    }\n\n    return Promise.resolve();\n  }\n\n}\n\nexports.SubscriberClient = SubscriberClient;","map":{"version":3,"sources":["../../../src/v1/subscriber_client.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SubscriberClient = void 0;\n/* global window */\nconst gax = require(\"google-gax\");\nconst google_gax_1 = require(\"google-gax\");\nconst jsonProtos = require(\"../../protos/protos.json\");\n/**\n * Client JSON configuration object, loaded from\n * `src/v1/subscriber_client_config.json`.\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\nconst gapicConfig = require(\"./subscriber_client_config.json\");\nconst version = require('../../../package.json').version;\n/**\n *  The service that an application uses to manipulate subscriptions and to\n *  consume messages from a subscription via the `Pull` method or by\n *  establishing a bi-directional stream using the `StreamingPull` method.\n * @class\n * @memberof v1\n */\nclass SubscriberClient {\n    /**\n     * Construct an instance of SubscriberClient.\n     *\n     * @param {object} [options] - The configuration object.\n     * The options accepted by the constructor are described in detail\n     * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).\n     * The common options are:\n     * @param {object} [options.credentials] - Credentials object.\n     * @param {string} [options.credentials.client_email]\n     * @param {string} [options.credentials.private_key]\n     * @param {string} [options.email] - Account email address. Required when\n     *     using a .pem or .p12 keyFilename.\n     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n     *     .p12 key downloaded from the Google Developers Console. If you provide\n     *     a path to a JSON file, the projectId option below is not necessary.\n     *     NOTE: .pem and .p12 require you to specify options.email as well.\n     * @param {number} [options.port] - The port on which to connect to\n     *     the remote host.\n     * @param {string} [options.projectId] - The project ID from the Google\n     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n     *     the environment variable GCLOUD_PROJECT for your project ID. If your\n     *     app is running in an environment which supports\n     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n     *     your project ID will be detected automatically.\n     * @param {string} [options.apiEndpoint] - The domain name of the\n     *     API remote host.\n     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n     *     Follows the structure of {@link gapicConfig}.\n     * @param {boolean} [options.fallback] - Use HTTP fallback mode.\n     *     In fallback mode, a special browser-compatible transport implementation is used\n     *     instead of gRPC transport. In browser context (if the `window` object is defined)\n     *     the fallback mode is enabled automatically; set `options.fallback` to `false`\n     *     if you need to override this behavior.\n     */\n    constructor(opts) {\n        var _a, _b;\n        this._terminated = false;\n        this.descriptors = {\n            page: {},\n            stream: {},\n            longrunning: {},\n            batching: {},\n        };\n        // Ensure that options include all the required fields.\n        const staticMembers = this.constructor;\n        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;\n        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};\n        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');\n        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);\n        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {\n            opts['scopes'] = staticMembers.scopes;\n        }\n        // Choose either gRPC or proto-over-HTTP implementation of google-gax.\n        this._gaxModule = opts.fallback ? gax.fallback : gax;\n        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.\n        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);\n        // Save options to use in initialize() method.\n        this._opts = opts;\n        // Save the auth object to the client, for use by other methods.\n        this.auth = this._gaxGrpc.auth;\n        // Set the default scopes in auth client if needed.\n        if (servicePath === staticMembers.servicePath) {\n            this.auth.defaultScopes = staticMembers.scopes;\n        }\n        this.iamClient = new google_gax_1.IamClient(this._gaxGrpc, opts);\n        // Determine the client header string.\n        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n        if (typeof process !== 'undefined' && 'versions' in process) {\n            clientHeader.push(`gl-node/${process.versions.node}`);\n        }\n        else {\n            clientHeader.push(`gl-web/${this._gaxModule.version}`);\n        }\n        if (!opts.fallback) {\n            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n        }\n        else if (opts.fallback === 'rest') {\n            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);\n        }\n        if (opts.libName && opts.libVersion) {\n            clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n        }\n        // Load the applicable protos.\n        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);\n        // This API contains \"path templates\"; forward-slash-separated\n        // identifiers to uniquely identify resources within the API.\n        // Create useful helper objects for these.\n        this.pathTemplates = {\n            projectPathTemplate: new this._gaxModule.PathTemplate('projects/{project}'),\n            projectTopicPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/topics/{topic}'),\n            schemaPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/schemas/{schema}'),\n            snapshotPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/snapshots/{snapshot}'),\n            subscriptionPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/subscriptions/{subscription}'),\n        };\n        // Some of the methods on this service return \"paged\" results,\n        // (e.g. 50 results at a time, with tokens to get subsequent\n        // pages). Denote the keys used for pagination and results.\n        this.descriptors.page = {\n            listSubscriptions: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'subscriptions'),\n            listSnapshots: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'snapshots'),\n        };\n        // Some of the methods on this service provide streaming responses.\n        // Provide descriptors for these.\n        this.descriptors.stream = {\n            streamingPull: new this._gaxModule.StreamDescriptor(gax.StreamType.BIDI_STREAMING),\n        };\n        // Put together the default options sent with requests.\n        this._defaults = this._gaxGrpc.constructSettings('google.pubsub.v1.Subscriber', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });\n        // Set up a dictionary of \"inner API calls\"; the core implementation\n        // of calling the API is handled in `google-gax`, with this code\n        // merely providing the destination and request information.\n        this.innerApiCalls = {};\n    }\n    /**\n     * Initialize the client.\n     * Performs asynchronous operations (such as authentication) and prepares the client.\n     * This function will be called automatically when any class method is called for the\n     * first time, but if you need to initialize it before calling an actual method,\n     * feel free to call initialize() directly.\n     *\n     * You can await on this method if you want to make sure the client is initialized.\n     *\n     * @returns {Promise} A promise that resolves to an authenticated service stub.\n     */\n    initialize() {\n        // If the client stub promise is already initialized, return immediately.\n        if (this.subscriberStub) {\n            return this.subscriberStub;\n        }\n        // Put together the \"service stub\" for\n        // google.pubsub.v1.Subscriber.\n        this.subscriberStub = this._gaxGrpc.createStub(this._opts.fallback\n            ? this._protos.lookupService('google.pubsub.v1.Subscriber')\n            : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this._protos.google.pubsub.v1.Subscriber, this._opts);\n        // Iterate over each of the methods that the service provides\n        // and create an API call method for each.\n        const subscriberStubMethods = [\n            'createSubscription',\n            'getSubscription',\n            'updateSubscription',\n            'listSubscriptions',\n            'deleteSubscription',\n            'modifyAckDeadline',\n            'acknowledge',\n            'pull',\n            'streamingPull',\n            'modifyPushConfig',\n            'getSnapshot',\n            'listSnapshots',\n            'createSnapshot',\n            'updateSnapshot',\n            'deleteSnapshot',\n            'seek',\n        ];\n        for (const methodName of subscriberStubMethods) {\n            const callPromise = this.subscriberStub.then(stub => (...args) => {\n                if (this._terminated) {\n                    return Promise.reject('The client has already been closed.');\n                }\n                const func = stub[methodName];\n                return func.apply(stub, args);\n            }, (err) => () => {\n                throw err;\n            });\n            const descriptor = this.descriptors.page[methodName] ||\n                this.descriptors.stream[methodName] ||\n                undefined;\n            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor);\n            this.innerApiCalls[methodName] = apiCall;\n        }\n        return this.subscriberStub;\n    }\n    /**\n     * The DNS address for this API service.\n     * @returns {string} The DNS address for this service.\n     */\n    static get servicePath() {\n        return 'pubsub.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service - same as servicePath(),\n     * exists for compatibility reasons.\n     * @returns {string} The DNS address for this service.\n     */\n    static get apiEndpoint() {\n        return 'pubsub.googleapis.com';\n    }\n    /**\n     * The port for this API service.\n     * @returns {number} The default port for this service.\n     */\n    static get port() {\n        return 443;\n    }\n    /**\n     * The scopes needed to make gRPC calls for every method defined\n     * in this service.\n     * @returns {string[]} List of default scopes.\n     */\n    static get scopes() {\n        return [\n            'https://www.googleapis.com/auth/cloud-platform',\n            'https://www.googleapis.com/auth/pubsub',\n        ];\n    }\n    /**\n     * Return the project ID used by this class.\n     * @returns {Promise} A promise that resolves to string containing the project ID.\n     */\n    getProjectId(callback) {\n        if (callback) {\n            this.auth.getProjectId(callback);\n            return;\n        }\n        return this.auth.getProjectId();\n    }\n    /**\n     * Creates a subscription to a given topic. See the [resource name rules]\n     * (https://cloud.google.com/pubsub/docs/admin#resource_names).\n     * If the subscription already exists, returns `ALREADY_EXISTS`.\n     * If the corresponding topic doesn't exist, returns `NOT_FOUND`.\n     *\n     * If the name is not provided in the request, the server will assign a random\n     * name for this subscription on the same project as the topic, conforming\n     * to the [resource name format]\n     * (https://cloud.google.com/pubsub/docs/admin#resource_names). The generated\n     * name is populated in the returned Subscription object. Note that for REST\n     * API requests, you must specify a name in the request.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. The name of the subscription. It must have the format\n     *   `\"projects/{project}/subscriptions/{subscription}\"`. `{subscription}` must\n     *   start with a letter, and contain only letters (`[A-Za-z]`), numbers\n     *   (`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes (`~`),\n     *   plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters\n     *   in length, and it must not start with `\"goog\"`.\n     * @param {string} request.topic\n     *   Required. The name of the topic from which this subscription is receiving\n     *   messages. Format is `projects/{project}/topics/{topic}`. The value of this\n     *   field will be `_deleted-topic_` if the topic has been deleted.\n     * @param {google.pubsub.v1.PushConfig} request.pushConfig\n     *   If push delivery is used with this subscription, this field is\n     *   used to configure it. An empty `pushConfig` signifies that the subscriber\n     *   will pull and ack messages using API methods.\n     * @param {number} request.ackDeadlineSeconds\n     *   The approximate amount of time (on a best-effort basis) Pub/Sub waits for\n     *   the subscriber to acknowledge receipt before resending the message. In the\n     *   interval after the message is delivered and before it is acknowledged, it\n     *   is considered to be <i>outstanding</i>. During that time period, the\n     *   message will not be redelivered (on a best-effort basis).\n     *\n     *   For pull subscriptions, this value is used as the initial value for the ack\n     *   deadline. To override this value for a given message, call\n     *   `ModifyAckDeadline` with the corresponding `ack_id` if using\n     *   non-streaming pull or send the `ack_id` in a\n     *   `StreamingModifyAckDeadlineRequest` if using streaming pull.\n     *   The minimum custom deadline you can specify is 10 seconds.\n     *   The maximum custom deadline you can specify is 600 seconds (10 minutes).\n     *   If this parameter is 0, a default value of 10 seconds is used.\n     *\n     *   For push delivery, this value is also used to set the request timeout for\n     *   the call to the push endpoint.\n     *\n     *   If the subscriber never acknowledges the message, the Pub/Sub\n     *   system will eventually redeliver the message.\n     * @param {boolean} request.retainAckedMessages\n     *   Indicates whether to retain acknowledged messages. If true, then\n     *   messages are not expunged from the subscription's backlog, even if they are\n     *   acknowledged, until they fall out of the `message_retention_duration`\n     *   window. This must be true if you would like to [Seek to a timestamp]\n     *   (https://cloud.google.com/pubsub/docs/replay-overview#seek_to_a_time).\n     * @param {google.protobuf.Duration} request.messageRetentionDuration\n     *   How long to retain unacknowledged messages in the subscription's backlog,\n     *   from the moment a message is published.\n     *   If `retain_acked_messages` is true, then this also configures the retention\n     *   of acknowledged messages, and thus configures how far back in time a `Seek`\n     *   can be done. Defaults to 7 days. Cannot be more than 7 days or less than 10\n     *   minutes.\n     * @param {number[]} request.labels\n     *   See <a href=\"https://cloud.google.com/pubsub/docs/labels\"> Creating and\n     *   managing labels</a>.\n     * @param {boolean} request.enableMessageOrdering\n     *   If true, messages published with the same `ordering_key` in `PubsubMessage`\n     *   will be delivered to the subscribers in the order in which they\n     *   are received by the Pub/Sub system. Otherwise, they may be delivered in\n     *   any order.\n     * @param {google.pubsub.v1.ExpirationPolicy} request.expirationPolicy\n     *   A policy that specifies the conditions for this subscription's expiration.\n     *   A subscription is considered active as long as any connected subscriber is\n     *   successfully consuming messages from the subscription or is issuing\n     *   operations on the subscription. If `expiration_policy` is not set, a\n     *   *default policy* with `ttl` of 31 days will be used. The minimum allowed\n     *   value for `expiration_policy.ttl` is 1 day.\n     * @param {string} request.filter\n     *   An expression written in the Pub/Sub [filter\n     *   language](https://cloud.google.com/pubsub/docs/filtering). If non-empty,\n     *   then only `PubsubMessage`s whose `attributes` field matches the filter are\n     *   delivered on this subscription. If empty, then no messages are filtered\n     *   out.\n     * @param {google.pubsub.v1.DeadLetterPolicy} request.deadLetterPolicy\n     *   A policy that specifies the conditions for dead lettering messages in\n     *   this subscription. If dead_letter_policy is not set, dead lettering\n     *   is disabled.\n     *\n     *   The Cloud Pub/Sub service account associated with this subscriptions's\n     *   parent project (i.e.,\n     *   service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have\n     *   permission to Acknowledge() messages on this subscription.\n     * @param {google.pubsub.v1.RetryPolicy} request.retryPolicy\n     *   A policy that specifies how Pub/Sub retries message delivery for this\n     *   subscription.\n     *\n     *   If not set, the default retry policy is applied. This generally implies\n     *   that messages will be retried as soon as possible for healthy subscribers.\n     *   RetryPolicy will be triggered on NACKs or acknowledgement deadline\n     *   exceeded events for a given message.\n     * @param {boolean} request.detached\n     *   Indicates whether the subscription is detached from its topic. Detached\n     *   subscriptions don't receive messages from their topic and don't retain any\n     *   backlog. `Pull` and `StreamingPull` requests will return\n     *   FAILED_PRECONDITION. If the subscription is a push subscription, pushes to\n     *   the endpoint will not be made.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Subscription]{@link google.pubsub.v1.Subscription}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.createSubscription(request);\n     */\n    createSubscription(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            gax.routingHeader.fromParams({\n                name: request.name || '',\n            });\n        this.initialize();\n        return this.innerApiCalls.createSubscription(request, options, callback);\n    }\n    /**\n     * Gets the configuration details of a subscription.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.subscription\n     *   Required. The name of the subscription to get.\n     *   Format is `projects/{project}/subscriptions/{sub}`.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Subscription]{@link google.pubsub.v1.Subscription}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.getSubscription(request);\n     */\n    getSubscription(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            gax.routingHeader.fromParams({\n                subscription: request.subscription || '',\n            });\n        this.initialize();\n        return this.innerApiCalls.getSubscription(request, options, callback);\n    }\n    /**\n     * Updates an existing subscription. Note that certain properties of a\n     * subscription, such as its topic, are not modifiable.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {google.pubsub.v1.Subscription} request.subscription\n     *   Required. The updated subscription object.\n     * @param {google.protobuf.FieldMask} request.updateMask\n     *   Required. Indicates which fields in the provided subscription to update.\n     *   Must be specified and non-empty.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Subscription]{@link google.pubsub.v1.Subscription}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.updateSubscription(request);\n     */\n    updateSubscription(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            gax.routingHeader.fromParams({\n                'subscription.name': request.subscription.name || '',\n            });\n        this.initialize();\n        return this.innerApiCalls.updateSubscription(request, options, callback);\n    }\n    /**\n     * Deletes an existing subscription. All messages retained in the subscription\n     * are immediately dropped. Calls to `Pull` after deletion will return\n     * `NOT_FOUND`. After a subscription is deleted, a new one may be created with\n     * the same name, but the new one has no association with the old\n     * subscription or its topic unless the same topic is specified.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.subscription\n     *   Required. The subscription to delete.\n     *   Format is `projects/{project}/subscriptions/{sub}`.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.deleteSubscription(request);\n     */\n    deleteSubscription(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            gax.routingHeader.fromParams({\n                subscription: request.subscription || '',\n            });\n        this.initialize();\n        return this.innerApiCalls.deleteSubscription(request, options, callback);\n    }\n    /**\n     * Modifies the ack deadline for a specific message. This method is useful\n     * to indicate that more time is needed to process a message by the\n     * subscriber, or to make the message available for redelivery if the\n     * processing was interrupted. Note that this does not modify the\n     * subscription-level `ackDeadlineSeconds` used for subsequent messages.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.subscription\n     *   Required. The name of the subscription.\n     *   Format is `projects/{project}/subscriptions/{sub}`.\n     * @param {string[]} request.ackIds\n     *   Required. List of acknowledgment IDs.\n     * @param {number} request.ackDeadlineSeconds\n     *   Required. The new ack deadline with respect to the time this request was\n     *   sent to the Pub/Sub system. For example, if the value is 10, the new ack\n     *   deadline will expire 10 seconds after the `ModifyAckDeadline` call was\n     *   made. Specifying zero might immediately make the message available for\n     *   delivery to another subscriber client. This typically results in an\n     *   increase in the rate of message redeliveries (that is, duplicates).\n     *   The minimum deadline you can specify is 0 seconds.\n     *   The maximum deadline you can specify is 600 seconds (10 minutes).\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.modifyAckDeadline(request);\n     */\n    modifyAckDeadline(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            gax.routingHeader.fromParams({\n                subscription: request.subscription || '',\n            });\n        this.initialize();\n        return this.innerApiCalls.modifyAckDeadline(request, options, callback);\n    }\n    /**\n     * Acknowledges the messages associated with the `ack_ids` in the\n     * `AcknowledgeRequest`. The Pub/Sub system can remove the relevant messages\n     * from the subscription.\n     *\n     * Acknowledging a message whose ack deadline has expired may succeed,\n     * but such a message may be redelivered later. Acknowledging a message more\n     * than once will not result in an error.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.subscription\n     *   Required. The subscription whose message is being acknowledged.\n     *   Format is `projects/{project}/subscriptions/{sub}`.\n     * @param {string[]} request.ackIds\n     *   Required. The acknowledgment ID for the messages being acknowledged that\n     *   was returned by the Pub/Sub system in the `Pull` response. Must not be\n     *   empty.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.acknowledge(request);\n     */\n    acknowledge(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            gax.routingHeader.fromParams({\n                subscription: request.subscription || '',\n            });\n        this.initialize();\n        return this.innerApiCalls.acknowledge(request, options, callback);\n    }\n    /**\n     * Pulls messages from the server. The server may return `UNAVAILABLE` if\n     * there are too many concurrent pull requests pending for the given\n     * subscription.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.subscription\n     *   Required. The subscription from which messages should be pulled.\n     *   Format is `projects/{project}/subscriptions/{sub}`.\n     * @param {boolean} [request.returnImmediately]\n     *   Optional. If this field set to true, the system will respond immediately\n     *   even if it there are no messages available to return in the `Pull`\n     *   response. Otherwise, the system may wait (for a bounded amount of time)\n     *   until at least one message is available, rather than returning no messages.\n     *   Warning: setting this field to `true` is discouraged because it adversely\n     *   impacts the performance of `Pull` operations. We recommend that users do\n     *   not set this field.\n     * @param {number} request.maxMessages\n     *   Required. The maximum number of messages to return for this request. Must\n     *   be a positive integer. The Pub/Sub system may return fewer than the number\n     *   specified.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [PullResponse]{@link google.pubsub.v1.PullResponse}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.pull(request);\n     */\n    pull(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            gax.routingHeader.fromParams({\n                subscription: request.subscription || '',\n            });\n        this.initialize();\n        return this.innerApiCalls.pull(request, options, callback);\n    }\n    /**\n     * Modifies the `PushConfig` for a specified subscription.\n     *\n     * This may be used to change a push subscription to a pull one (signified by\n     * an empty `PushConfig`) or vice versa, or change the endpoint URL and other\n     * attributes of a push subscription. Messages will accumulate for delivery\n     * continuously through the call regardless of changes to the `PushConfig`.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.subscription\n     *   Required. The name of the subscription.\n     *   Format is `projects/{project}/subscriptions/{sub}`.\n     * @param {google.pubsub.v1.PushConfig} request.pushConfig\n     *   Required. The push configuration for future deliveries.\n     *\n     *   An empty `pushConfig` indicates that the Pub/Sub system should\n     *   stop pushing messages from the given subscription and allow\n     *   messages to be pulled and acknowledged - effectively pausing\n     *   the subscription if `Pull` or `StreamingPull` is not called.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.modifyPushConfig(request);\n     */\n    modifyPushConfig(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            gax.routingHeader.fromParams({\n                subscription: request.subscription || '',\n            });\n        this.initialize();\n        return this.innerApiCalls.modifyPushConfig(request, options, callback);\n    }\n    /**\n     * Gets the configuration details of a snapshot. Snapshots are used in\n     * <a href=\"https://cloud.google.com/pubsub/docs/replay-overview\">Seek</a>\n     * operations, which allow you to manage message acknowledgments in bulk. That\n     * is, you can set the acknowledgment state of messages in an existing\n     * subscription to the state captured by a snapshot.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.snapshot\n     *   Required. The name of the snapshot to get.\n     *   Format is `projects/{project}/snapshots/{snap}`.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Snapshot]{@link google.pubsub.v1.Snapshot}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.getSnapshot(request);\n     */\n    getSnapshot(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            gax.routingHeader.fromParams({\n                snapshot: request.snapshot || '',\n            });\n        this.initialize();\n        return this.innerApiCalls.getSnapshot(request, options, callback);\n    }\n    /**\n     * Creates a snapshot from the requested subscription. Snapshots are used in\n     * [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations,\n     * which allow you to manage message acknowledgments in bulk. That is, you can\n     * set the acknowledgment state of messages in an existing subscription to the\n     * state captured by a snapshot.\n     * If the snapshot already exists, returns `ALREADY_EXISTS`.\n     * If the requested subscription doesn't exist, returns `NOT_FOUND`.\n     * If the backlog in the subscription is too old -- and the resulting snapshot\n     * would expire in less than 1 hour -- then `FAILED_PRECONDITION` is returned.\n     * See also the `Snapshot.expire_time` field. If the name is not provided in\n     * the request, the server will assign a random\n     * name for this snapshot on the same project as the subscription, conforming\n     * to the [resource name format]\n     * (https://cloud.google.com/pubsub/docs/admin#resource_names). The\n     * generated name is populated in the returned Snapshot object. Note that for\n     * REST API requests, you must specify a name in the request.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. User-provided name for this snapshot. If the name is not provided\n     *   in the request, the server will assign a random name for this snapshot on\n     *   the same project as the subscription. Note that for REST API requests, you\n     *   must specify a name.  See the <a\n     *   href=\"https://cloud.google.com/pubsub/docs/admin#resource_names\"> resource\n     *   name rules</a>. Format is `projects/{project}/snapshots/{snap}`.\n     * @param {string} request.subscription\n     *   Required. The subscription whose backlog the snapshot retains.\n     *   Specifically, the created snapshot is guaranteed to retain:\n     *    (a) The existing backlog on the subscription. More precisely, this is\n     *        defined as the messages in the subscription's backlog that are\n     *        unacknowledged upon the successful completion of the\n     *        `CreateSnapshot` request; as well as:\n     *    (b) Any messages published to the subscription's topic following the\n     *        successful completion of the CreateSnapshot request.\n     *   Format is `projects/{project}/subscriptions/{sub}`.\n     * @param {number[]} request.labels\n     *   See <a href=\"https://cloud.google.com/pubsub/docs/labels\"> Creating and\n     *   managing labels</a>.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Snapshot]{@link google.pubsub.v1.Snapshot}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.createSnapshot(request);\n     */\n    createSnapshot(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            gax.routingHeader.fromParams({\n                name: request.name || '',\n            });\n        this.initialize();\n        return this.innerApiCalls.createSnapshot(request, options, callback);\n    }\n    /**\n     * Updates an existing snapshot. Snapshots are used in\n     * <a href=\"https://cloud.google.com/pubsub/docs/replay-overview\">Seek</a>\n     * operations, which allow\n     * you to manage message acknowledgments in bulk. That is, you can set the\n     * acknowledgment state of messages in an existing subscription to the state\n     * captured by a snapshot.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {google.pubsub.v1.Snapshot} request.snapshot\n     *   Required. The updated snapshot object.\n     * @param {google.protobuf.FieldMask} request.updateMask\n     *   Required. Indicates which fields in the provided snapshot to update.\n     *   Must be specified and non-empty.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Snapshot]{@link google.pubsub.v1.Snapshot}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.updateSnapshot(request);\n     */\n    updateSnapshot(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            gax.routingHeader.fromParams({\n                'snapshot.name': request.snapshot.name || '',\n            });\n        this.initialize();\n        return this.innerApiCalls.updateSnapshot(request, options, callback);\n    }\n    /**\n     * Removes an existing snapshot. Snapshots are used in [Seek]\n     * (https://cloud.google.com/pubsub/docs/replay-overview) operations, which\n     * allow you to manage message acknowledgments in bulk. That is, you can set\n     * the acknowledgment state of messages in an existing subscription to the\n     * state captured by a snapshot.\n     * When the snapshot is deleted, all messages retained in the snapshot\n     * are immediately dropped. After a snapshot is deleted, a new one may be\n     * created with the same name, but the new one has no association with the old\n     * snapshot or its subscription, unless the same subscription is specified.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.snapshot\n     *   Required. The name of the snapshot to delete.\n     *   Format is `projects/{project}/snapshots/{snap}`.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.deleteSnapshot(request);\n     */\n    deleteSnapshot(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            gax.routingHeader.fromParams({\n                snapshot: request.snapshot || '',\n            });\n        this.initialize();\n        return this.innerApiCalls.deleteSnapshot(request, options, callback);\n    }\n    /**\n     * Seeks an existing subscription to a point in time or to a given snapshot,\n     * whichever is provided in the request. Snapshots are used in [Seek]\n     * (https://cloud.google.com/pubsub/docs/replay-overview) operations, which\n     * allow you to manage message acknowledgments in bulk. That is, you can set\n     * the acknowledgment state of messages in an existing subscription to the\n     * state captured by a snapshot. Note that both the subscription and the\n     * snapshot must be on the same topic.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.subscription\n     *   Required. The subscription to affect.\n     * @param {google.protobuf.Timestamp} request.time\n     *   The time to seek to.\n     *   Messages retained in the subscription that were published before this\n     *   time are marked as acknowledged, and messages retained in the\n     *   subscription that were published after this time are marked as\n     *   unacknowledged. Note that this operation affects only those messages\n     *   retained in the subscription (configured by the combination of\n     *   `message_retention_duration` and `retain_acked_messages`). For example,\n     *   if `time` corresponds to a point before the message retention\n     *   window (or to a point before the system's notion of the subscription\n     *   creation time), only retained messages will be marked as unacknowledged,\n     *   and already-expunged messages will not be restored.\n     * @param {string} request.snapshot\n     *   The snapshot to seek to. The snapshot's topic must be the same as that of\n     *   the provided subscription.\n     *   Format is `projects/{project}/snapshots/{snap}`.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [SeekResponse]{@link google.pubsub.v1.SeekResponse}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.seek(request);\n     */\n    seek(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            gax.routingHeader.fromParams({\n                subscription: request.subscription || '',\n            });\n        this.initialize();\n        return this.innerApiCalls.seek(request, options, callback);\n    }\n    /**\n     * Establishes a stream with the server, which sends messages down to the\n     * client. The client streams acknowledgements and ack deadline modifications\n     * back to the server. The server will close the stream and return the status\n     * on any error. The server may close the stream with status `UNAVAILABLE` to\n     * reassign server-side resources, in which case, the client should\n     * re-establish the stream. Flow control can be achieved by configuring the\n     * underlying RPC channel.\n     *\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which is both readable and writable. It accepts objects\n     *   representing [StreamingPullRequest]{@link google.pubsub.v1.StreamingPullRequest} for write() method, and\n     *   will emit objects representing [StreamingPullResponse]{@link google.pubsub.v1.StreamingPullResponse} on 'data' event asynchronously.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#bi-directional-streaming)\n     *   for more details and examples.\n     * @example\n     * const stream = client.streamingPull();\n     * stream.on('data', (response) => { ... });\n     * stream.on('end', () => { ... });\n     * stream.write(request);\n     * stream.end();\n     */\n    streamingPull(options) {\n        this.initialize();\n        return this.innerApiCalls.streamingPull(options);\n    }\n    /**\n     * Lists matching subscriptions.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.project\n     *   Required. The name of the project in which to list subscriptions.\n     *   Format is `projects/{project-id}`.\n     * @param {number} request.pageSize\n     *   Maximum number of subscriptions to return.\n     * @param {string} request.pageToken\n     *   The value returned by the last `ListSubscriptionsResponse`; indicates that\n     *   this is a continuation of a prior `ListSubscriptions` call, and that the\n     *   system should return the next page of data.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of [Subscription]{@link google.pubsub.v1.Subscription}.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed and will merge results from all the pages into this array.\n     *   Note that it can affect your quota.\n     *   We recommend using `listSubscriptionsAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     */\n    listSubscriptions(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            gax.routingHeader.fromParams({\n                project: request.project || '',\n            });\n        this.initialize();\n        return this.innerApiCalls.listSubscriptions(request, options, callback);\n    }\n    /**\n     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.project\n     *   Required. The name of the project in which to list subscriptions.\n     *   Format is `projects/{project-id}`.\n     * @param {number} request.pageSize\n     *   Maximum number of subscriptions to return.\n     * @param {string} request.pageToken\n     *   The value returned by the last `ListSubscriptionsResponse`; indicates that\n     *   this is a continuation of a prior `ListSubscriptions` call, and that the\n     *   system should return the next page of data.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing [Subscription]{@link google.pubsub.v1.Subscription} on 'data' event.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed. Note that it can affect your quota.\n     *   We recommend using `listSubscriptionsAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     */\n    listSubscriptionsStream(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            gax.routingHeader.fromParams({\n                project: request.project || '',\n            });\n        const callSettings = new gax.CallSettings(options);\n        this.initialize();\n        return this.descriptors.page.listSubscriptions.createStream(this.innerApiCalls.listSubscriptions, request, callSettings);\n    }\n    /**\n     * Equivalent to `listSubscriptions`, but returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.project\n     *   Required. The name of the project in which to list subscriptions.\n     *   Format is `projects/{project-id}`.\n     * @param {number} request.pageSize\n     *   Maximum number of subscriptions to return.\n     * @param {string} request.pageToken\n     *   The value returned by the last `ListSubscriptionsResponse`; indicates that\n     *   this is a continuation of a prior `ListSubscriptions` call, and that the\n     *   system should return the next page of data.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   [Subscription]{@link google.pubsub.v1.Subscription}. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     * @example\n     * const iterable = client.listSubscriptionsAsync(request);\n     * for await (const response of iterable) {\n     *   // process response\n     * }\n     */\n    listSubscriptionsAsync(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            gax.routingHeader.fromParams({\n                project: request.project || '',\n            });\n        options = options || {};\n        const callSettings = new gax.CallSettings(options);\n        this.initialize();\n        return this.descriptors.page.listSubscriptions.asyncIterate(this.innerApiCalls['listSubscriptions'], request, callSettings);\n    }\n    /**\n     * Lists the existing snapshots. Snapshots are used in [Seek](\n     * https://cloud.google.com/pubsub/docs/replay-overview) operations, which\n     * allow you to manage message acknowledgments in bulk. That is, you can set\n     * the acknowledgment state of messages in an existing subscription to the\n     * state captured by a snapshot.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.project\n     *   Required. The name of the project in which to list snapshots.\n     *   Format is `projects/{project-id}`.\n     * @param {number} request.pageSize\n     *   Maximum number of snapshots to return.\n     * @param {string} request.pageToken\n     *   The value returned by the last `ListSnapshotsResponse`; indicates that this\n     *   is a continuation of a prior `ListSnapshots` call, and that the system\n     *   should return the next page of data.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of [Snapshot]{@link google.pubsub.v1.Snapshot}.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed and will merge results from all the pages into this array.\n     *   Note that it can affect your quota.\n     *   We recommend using `listSnapshotsAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     */\n    listSnapshots(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            gax.routingHeader.fromParams({\n                project: request.project || '',\n            });\n        this.initialize();\n        return this.innerApiCalls.listSnapshots(request, options, callback);\n    }\n    /**\n     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.project\n     *   Required. The name of the project in which to list snapshots.\n     *   Format is `projects/{project-id}`.\n     * @param {number} request.pageSize\n     *   Maximum number of snapshots to return.\n     * @param {string} request.pageToken\n     *   The value returned by the last `ListSnapshotsResponse`; indicates that this\n     *   is a continuation of a prior `ListSnapshots` call, and that the system\n     *   should return the next page of data.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing [Snapshot]{@link google.pubsub.v1.Snapshot} on 'data' event.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed. Note that it can affect your quota.\n     *   We recommend using `listSnapshotsAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     */\n    listSnapshotsStream(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            gax.routingHeader.fromParams({\n                project: request.project || '',\n            });\n        const callSettings = new gax.CallSettings(options);\n        this.initialize();\n        return this.descriptors.page.listSnapshots.createStream(this.innerApiCalls.listSnapshots, request, callSettings);\n    }\n    /**\n     * Equivalent to `listSnapshots`, but returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.project\n     *   Required. The name of the project in which to list snapshots.\n     *   Format is `projects/{project-id}`.\n     * @param {number} request.pageSize\n     *   Maximum number of snapshots to return.\n     * @param {string} request.pageToken\n     *   The value returned by the last `ListSnapshotsResponse`; indicates that this\n     *   is a continuation of a prior `ListSnapshots` call, and that the system\n     *   should return the next page of data.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   [Snapshot]{@link google.pubsub.v1.Snapshot}. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     * @example\n     * const iterable = client.listSnapshotsAsync(request);\n     * for await (const response of iterable) {\n     *   // process response\n     * }\n     */\n    listSnapshotsAsync(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            gax.routingHeader.fromParams({\n                project: request.project || '',\n            });\n        options = options || {};\n        const callSettings = new gax.CallSettings(options);\n        this.initialize();\n        return this.descriptors.page.listSnapshots.asyncIterate(this.innerApiCalls['listSnapshots'], request, callSettings);\n    }\n    /**\n     * Gets the access control policy for a resource. Returns an empty policy\n     * if the resource exists and does not have a policy set.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.resource\n     *   REQUIRED: The resource for which the policy is being requested.\n     *   See the operation documentation for the appropriate value for this field.\n     * @param {Object} [request.options]\n     *   OPTIONAL: A `GetPolicyOptions` object for specifying options to\n     *   `GetIamPolicy`. This field is only used by Cloud IAM.\n     *\n     *   This object should have the same structure as [GetPolicyOptions]{@link google.iam.v1.GetPolicyOptions}\n     * @param {Object} [options]\n     *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n     *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n     * @param {function(?Error, ?Object)} [callback]\n     *   The function which will be called with the result of the API call.\n     *\n     *   The second parameter to the callback is an object representing [Policy]{@link google.iam.v1.Policy}.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    getIamPolicy(request, options, callback) {\n        return this.iamClient.getIamPolicy(request, options, callback);\n    }\n    /**\n     * Returns permissions that a caller has on the specified resource. If the\n     * resource does not exist, this will return an empty set of\n     * permissions, not a NOT_FOUND error.\n     *\n     * Note: This operation is designed to be used for building\n     * permission-aware UIs and command-line tools, not for authorization\n     * checking. This operation may \"fail open\" without warning.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.resource\n     *   REQUIRED: The resource for which the policy detail is being requested.\n     *   See the operation documentation for the appropriate value for this field.\n     * @param {string[]} request.permissions\n     *   The set of permissions to check for the `resource`. Permissions with\n     *   wildcards (such as '*' or 'storage.*') are not allowed. For more\n     *   information see\n     *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).\n     * @param {Object} [options]\n     *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n     *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n     * @param {function(?Error, ?Object)} [callback]\n     *   The function which will be called with the result of the API call.\n     *\n     *   The second parameter to the callback is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    setIamPolicy(request, options, callback) {\n        return this.iamClient.setIamPolicy(request, options, callback);\n    }\n    /**\n     * Returns permissions that a caller has on the specified resource. If the\n     * resource does not exist, this will return an empty set of\n     * permissions, not a NOT_FOUND error.\n     *\n     * Note: This operation is designed to be used for building\n     * permission-aware UIs and command-line tools, not for authorization\n     * checking. This operation may \"fail open\" without warning.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.resource\n     *   REQUIRED: The resource for which the policy detail is being requested.\n     *   See the operation documentation for the appropriate value for this field.\n     * @param {string[]} request.permissions\n     *   The set of permissions to check for the `resource`. Permissions with\n     *   wildcards (such as '*' or 'storage.*') are not allowed. For more\n     *   information see\n     *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).\n     * @param {Object} [options]\n     *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n     *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n     * @param {function(?Error, ?Object)} [callback]\n     *   The function which will be called with the result of the API call.\n     *\n     *   The second parameter to the callback is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     *\n     */\n    testIamPermissions(request, options, callback) {\n        return this.iamClient.testIamPermissions(request, options, callback);\n    }\n    // --------------------\n    // -- Path templates --\n    // --------------------\n    /**\n     * Return a fully-qualified project resource name string.\n     *\n     * @param {string} project\n     * @returns {string} Resource name string.\n     */\n    projectPath(project) {\n        return this.pathTemplates.projectPathTemplate.render({\n            project: project,\n        });\n    }\n    /**\n     * Parse the project from Project resource.\n     *\n     * @param {string} projectName\n     *   A fully-qualified path representing Project resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectName(projectName) {\n        return this.pathTemplates.projectPathTemplate.match(projectName).project;\n    }\n    /**\n     * Return a fully-qualified projectTopic resource name string.\n     *\n     * @param {string} project\n     * @param {string} topic\n     * @returns {string} Resource name string.\n     */\n    projectTopicPath(project, topic) {\n        return this.pathTemplates.projectTopicPathTemplate.render({\n            project: project,\n            topic: topic,\n        });\n    }\n    /**\n     * Parse the project from ProjectTopic resource.\n     *\n     * @param {string} projectTopicName\n     *   A fully-qualified path representing project_topic resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectTopicName(projectTopicName) {\n        return this.pathTemplates.projectTopicPathTemplate.match(projectTopicName)\n            .project;\n    }\n    /**\n     * Parse the topic from ProjectTopic resource.\n     *\n     * @param {string} projectTopicName\n     *   A fully-qualified path representing project_topic resource.\n     * @returns {string} A string representing the topic.\n     */\n    matchTopicFromProjectTopicName(projectTopicName) {\n        return this.pathTemplates.projectTopicPathTemplate.match(projectTopicName)\n            .topic;\n    }\n    /**\n     * Return a fully-qualified schema resource name string.\n     *\n     * @param {string} project\n     * @param {string} schema\n     * @returns {string} Resource name string.\n     */\n    schemaPath(project, schema) {\n        return this.pathTemplates.schemaPathTemplate.render({\n            project: project,\n            schema: schema,\n        });\n    }\n    /**\n     * Parse the project from Schema resource.\n     *\n     * @param {string} schemaName\n     *   A fully-qualified path representing Schema resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromSchemaName(schemaName) {\n        return this.pathTemplates.schemaPathTemplate.match(schemaName).project;\n    }\n    /**\n     * Parse the schema from Schema resource.\n     *\n     * @param {string} schemaName\n     *   A fully-qualified path representing Schema resource.\n     * @returns {string} A string representing the schema.\n     */\n    matchSchemaFromSchemaName(schemaName) {\n        return this.pathTemplates.schemaPathTemplate.match(schemaName).schema;\n    }\n    /**\n     * Return a fully-qualified snapshot resource name string.\n     *\n     * @param {string} project\n     * @param {string} snapshot\n     * @returns {string} Resource name string.\n     */\n    snapshotPath(project, snapshot) {\n        return this.pathTemplates.snapshotPathTemplate.render({\n            project: project,\n            snapshot: snapshot,\n        });\n    }\n    /**\n     * Parse the project from Snapshot resource.\n     *\n     * @param {string} snapshotName\n     *   A fully-qualified path representing Snapshot resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromSnapshotName(snapshotName) {\n        return this.pathTemplates.snapshotPathTemplate.match(snapshotName).project;\n    }\n    /**\n     * Parse the snapshot from Snapshot resource.\n     *\n     * @param {string} snapshotName\n     *   A fully-qualified path representing Snapshot resource.\n     * @returns {string} A string representing the snapshot.\n     */\n    matchSnapshotFromSnapshotName(snapshotName) {\n        return this.pathTemplates.snapshotPathTemplate.match(snapshotName).snapshot;\n    }\n    /**\n     * Return a fully-qualified subscription resource name string.\n     *\n     * @param {string} project\n     * @param {string} subscription\n     * @returns {string} Resource name string.\n     */\n    subscriptionPath(project, subscription) {\n        return this.pathTemplates.subscriptionPathTemplate.render({\n            project: project,\n            subscription: subscription,\n        });\n    }\n    /**\n     * Parse the project from Subscription resource.\n     *\n     * @param {string} subscriptionName\n     *   A fully-qualified path representing Subscription resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromSubscriptionName(subscriptionName) {\n        return this.pathTemplates.subscriptionPathTemplate.match(subscriptionName)\n            .project;\n    }\n    /**\n     * Parse the subscription from Subscription resource.\n     *\n     * @param {string} subscriptionName\n     *   A fully-qualified path representing Subscription resource.\n     * @returns {string} A string representing the subscription.\n     */\n    matchSubscriptionFromSubscriptionName(subscriptionName) {\n        return this.pathTemplates.subscriptionPathTemplate.match(subscriptionName)\n            .subscription;\n    }\n    /**\n     * Terminate the gRPC channel and close the client.\n     *\n     * The client will no longer be usable and all future behavior is undefined.\n     * @returns {Promise} A promise that resolves when the client is closed.\n     */\n    close() {\n        this.initialize();\n        if (!this._terminated) {\n            return this.subscriberStub.then(stub => {\n                this._terminated = true;\n                stub.close();\n            });\n        }\n        return Promise.resolve();\n    }\n}\nexports.SubscriberClient = SubscriberClient;\n//# sourceMappingURL=subscriber_client.js.map"]},"metadata":{},"sourceType":"script"}