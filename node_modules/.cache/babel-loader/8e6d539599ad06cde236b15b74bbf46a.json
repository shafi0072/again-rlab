{"ast":null,"code":"import { randomNormal } from 'd3-random';\nimport getSeededRandom from './getSeededRandom';\nvar sqrt3 = Math.sqrt(3);\n\nfunction range(length) {\n  return new Array(length).fill(1);\n}\n\nexport function genPointsRange(length, _ref, random) {\n  var offsetX = _ref[0],\n      offsetY = _ref[1],\n      index = _ref[2];\n\n  if (random === void 0) {\n    random = randomNormal(0, 0.2);\n  }\n\n  return range(length).map(function () {\n    return [random() + offsetX, random() + offsetY, index];\n  });\n}\nexport default function genPoints(count,\n/** Optional random seed in the interval [0, 1). */\nseed) {\n  if (count === void 0) {\n    count = 300;\n  }\n\n  if (seed === void 0) {\n    seed = undefined;\n  }\n\n  var random = seed == null ? undefined : randomNormal.source(getSeededRandom(seed))(0, 0.2);\n  return [].concat(genPointsRange(count, [sqrt3, 1, 0], random), genPointsRange(count, [-sqrt3, 1, 1], random), genPointsRange(count, [0, -1, 2], random));\n}","map":{"version":3,"sources":["C:/remotePackRlab-acab49ee44aa8f06acbfc147116dbc3387885161/node_modules/@visx/mock-data/esm/generators/genRandomNormalPoints.js"],"names":["randomNormal","getSeededRandom","sqrt3","Math","sqrt","range","length","Array","fill","genPointsRange","_ref","random","offsetX","offsetY","index","map","genPoints","count","seed","undefined","source","concat"],"mappings":"AAAA,SAASA,YAAT,QAA6B,WAA7B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,IAAIC,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAU,CAAV,CAAZ;;AAEA,SAASC,KAAT,CAAeC,MAAf,EAAuB;AACrB,SAAO,IAAIC,KAAJ,CAAUD,MAAV,EAAkBE,IAAlB,CAAuB,CAAvB,CAAP;AACD;;AAED,OAAO,SAASC,cAAT,CAAwBH,MAAxB,EAAgCI,IAAhC,EAAsCC,MAAtC,EAA8C;AACnD,MAAIC,OAAO,GAAGF,IAAI,CAAC,CAAD,CAAlB;AAAA,MACIG,OAAO,GAAGH,IAAI,CAAC,CAAD,CADlB;AAAA,MAEII,KAAK,GAAGJ,IAAI,CAAC,CAAD,CAFhB;;AAIA,MAAIC,MAAM,KAAK,KAAK,CAApB,EAAuB;AACrBA,IAAAA,MAAM,GAAGX,YAAY,CAAC,CAAD,EAAI,GAAJ,CAArB;AACD;;AAED,SAAOK,KAAK,CAACC,MAAD,CAAL,CAAcS,GAAd,CAAkB,YAAY;AACnC,WAAO,CAACJ,MAAM,KAAKC,OAAZ,EAAqBD,MAAM,KAAKE,OAAhC,EAAyCC,KAAzC,CAAP;AACD,GAFM,CAAP;AAGD;AACD,eAAe,SAASE,SAAT,CAAmBC,KAAnB;AACf;AACAC,IAFe,EAET;AACJ,MAAID,KAAK,KAAK,KAAK,CAAnB,EAAsB;AACpBA,IAAAA,KAAK,GAAG,GAAR;AACD;;AAED,MAAIC,IAAI,KAAK,KAAK,CAAlB,EAAqB;AACnBA,IAAAA,IAAI,GAAGC,SAAP;AACD;;AAED,MAAIR,MAAM,GAAGO,IAAI,IAAI,IAAR,GAAeC,SAAf,GAA2BnB,YAAY,CAACoB,MAAb,CAAoBnB,eAAe,CAACiB,IAAD,CAAnC,EAA2C,CAA3C,EAA8C,GAA9C,CAAxC;AACA,SAAO,GAAGG,MAAH,CAAUZ,cAAc,CAACQ,KAAD,EAAQ,CAACf,KAAD,EAAQ,CAAR,EAAW,CAAX,CAAR,EAAuBS,MAAvB,CAAxB,EAAwDF,cAAc,CAACQ,KAAD,EAAQ,CAAC,CAACf,KAAF,EAAS,CAAT,EAAY,CAAZ,CAAR,EAAwBS,MAAxB,CAAtE,EAAuGF,cAAc,CAACQ,KAAD,EAAQ,CAAC,CAAD,EAAI,CAAC,CAAL,EAAQ,CAAR,CAAR,EAAoBN,MAApB,CAArH,CAAP;AACD","sourcesContent":["import { randomNormal } from 'd3-random';\nimport getSeededRandom from './getSeededRandom';\nvar sqrt3 = Math.sqrt(3);\n\nfunction range(length) {\n  return new Array(length).fill(1);\n}\n\nexport function genPointsRange(length, _ref, random) {\n  var offsetX = _ref[0],\n      offsetY = _ref[1],\n      index = _ref[2];\n\n  if (random === void 0) {\n    random = randomNormal(0, 0.2);\n  }\n\n  return range(length).map(function () {\n    return [random() + offsetX, random() + offsetY, index];\n  });\n}\nexport default function genPoints(count,\n/** Optional random seed in the interval [0, 1). */\nseed) {\n  if (count === void 0) {\n    count = 300;\n  }\n\n  if (seed === void 0) {\n    seed = undefined;\n  }\n\n  var random = seed == null ? undefined : randomNormal.source(getSeededRandom(seed))(0, 0.2);\n  return [].concat(genPointsRange(count, [sqrt3, 1, 0], random), genPointsRange(count, [-sqrt3, 1, 1], random), genPointsRange(count, [0, -1, 2], random));\n}"]},"metadata":{},"sourceType":"module"}