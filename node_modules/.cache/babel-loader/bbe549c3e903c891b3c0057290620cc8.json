{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { createScale, scaleCanBeZeroed } from '@visx/scale';\nimport { extent as d3Extent } from 'd3-array';\nimport React, { useMemo } from 'react';\nimport isDiscreteScale from '../utils/isDiscreteScale';\n/** A hook for creating memoized x- and y-scales. */\n\nexport default function useScales(_ref) {\n  var dataRegistry = _ref.dataRegistry,\n      xRange = _ref.xRange,\n      xScaleConfig = _ref.xScaleConfig,\n      yRange = _ref.yRange,\n      yScaleConfig = _ref.yScaleConfig; // pull out memoization keys that are less likely to change\n\n  var registryKeys = dataRegistry.keys();\n  var xMin = xRange[0],\n      xMax = xRange[1];\n  var yMin = yRange[0],\n      yMax = yRange[1];\n  var memoizedXScale = useMemo(function () {\n    var registryEntries = registryKeys.map(function (key) {\n      return dataRegistry.get(key);\n    });\n    var xValues = registryEntries.reduce(function (combined, entry) {\n      return entry ? combined.concat(entry.data.map(function (d) {\n        return entry.xAccessor(d);\n      })) : combined;\n    }, []); // d3Extent scale returns NaN domain for empty arrays\n\n    if (xValues.length === 0) return undefined;\n    var xDomain = isDiscreteScale(xScaleConfig) ? xValues : d3Extent(xValues);\n    var xScale = scaleCanBeZeroed(xScaleConfig) ? createScale(_extends({\n      range: [xMin, xMax],\n      domain: xDomain,\n      zero: true\n    }, xScaleConfig)) : createScale(_extends({\n      range: [xMin, xMax],\n      domain: xDomain\n    }, xScaleConfig)); // apply any scale updates from the registry\n\n    registryEntries.forEach(function (entry) {\n      if (entry == null ? void 0 : entry.xScale) xScale = entry.xScale(xScale);\n    });\n    return xScale;\n  }, [dataRegistry, xScaleConfig, registryKeys, xMin, xMax]); // same for yScale. this logic is hard to apply generically because of the scale types / accessors\n\n  var memoizedYScale = useMemo(function () {\n    var registryEntries = registryKeys.map(function (key) {\n      return dataRegistry.get(key);\n    });\n    var yValues = registryEntries.reduce(function (combined, entry) {\n      return entry ? combined.concat(entry.data.map(function (d) {\n        return entry.yAccessor(d);\n      })) : combined;\n    }, []); // d3Extent scale returns NaN domain for empty arrays\n\n    if (yValues.length === 0) return undefined;\n    var yDomain = isDiscreteScale(yScaleConfig) ? yValues : d3Extent(yValues);\n    var yScale = scaleCanBeZeroed(yScaleConfig) ? createScale(_extends({\n      range: [yMin, yMax],\n      domain: yDomain,\n      zero: true\n    }, yScaleConfig)) : createScale(_extends({\n      range: [yMin, yMax],\n      domain: yDomain\n    }, yScaleConfig)); // apply any scale updates from the registry\n\n    registryEntries.forEach(function (entry) {\n      if (entry == null ? void 0 : entry.yScale) yScale = entry.yScale(yScale);\n    });\n    return yScale;\n  }, [dataRegistry, yScaleConfig, registryKeys, yMin, yMax]);\n  return {\n    xScale: memoizedXScale,\n    yScale: memoizedYScale\n  };\n}","map":{"version":3,"sources":["C:/remotePackRlab-acab49ee44aa8f06acbfc147116dbc3387885161/node_modules/@visx/xychart/esm/hooks/useScales.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","createScale","scaleCanBeZeroed","extent","d3Extent","React","useMemo","isDiscreteScale","useScales","_ref","dataRegistry","xRange","xScaleConfig","yRange","yScaleConfig","registryKeys","keys","xMin","xMax","yMin","yMax","memoizedXScale","registryEntries","map","get","xValues","reduce","combined","entry","concat","data","d","xAccessor","undefined","xDomain","xScale","range","domain","zero","forEach","memoizedYScale","yValues","yAccessor","yDomain","yScale"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { createScale, scaleCanBeZeroed } from '@visx/scale';\nimport { extent as d3Extent } from 'd3-array';\nimport React, { useMemo } from 'react';\nimport isDiscreteScale from '../utils/isDiscreteScale';\n/** A hook for creating memoized x- and y-scales. */\n\nexport default function useScales(_ref) {\n  var dataRegistry = _ref.dataRegistry,\n      xRange = _ref.xRange,\n      xScaleConfig = _ref.xScaleConfig,\n      yRange = _ref.yRange,\n      yScaleConfig = _ref.yScaleConfig;\n  // pull out memoization keys that are less likely to change\n  var registryKeys = dataRegistry.keys();\n  var xMin = xRange[0],\n      xMax = xRange[1];\n  var yMin = yRange[0],\n      yMax = yRange[1];\n  var memoizedXScale = useMemo(function () {\n    var registryEntries = registryKeys.map(function (key) {\n      return dataRegistry.get(key);\n    });\n    var xValues = registryEntries.reduce(function (combined, entry) {\n      return entry ? combined.concat(entry.data.map(function (d) {\n        return entry.xAccessor(d);\n      })) : combined;\n    }, []); // d3Extent scale returns NaN domain for empty arrays\n\n    if (xValues.length === 0) return undefined;\n    var xDomain = isDiscreteScale(xScaleConfig) ? xValues : d3Extent(xValues);\n    var xScale = scaleCanBeZeroed(xScaleConfig) ? createScale(_extends({\n      range: [xMin, xMax],\n      domain: xDomain,\n      zero: true\n    }, xScaleConfig)) : createScale(_extends({\n      range: [xMin, xMax],\n      domain: xDomain\n    }, xScaleConfig)); // apply any scale updates from the registry\n\n    registryEntries.forEach(function (entry) {\n      if (entry == null ? void 0 : entry.xScale) xScale = entry.xScale(xScale);\n    });\n    return xScale;\n  }, [dataRegistry, xScaleConfig, registryKeys, xMin, xMax]); // same for yScale. this logic is hard to apply generically because of the scale types / accessors\n\n  var memoizedYScale = useMemo(function () {\n    var registryEntries = registryKeys.map(function (key) {\n      return dataRegistry.get(key);\n    });\n    var yValues = registryEntries.reduce(function (combined, entry) {\n      return entry ? combined.concat(entry.data.map(function (d) {\n        return entry.yAccessor(d);\n      })) : combined;\n    }, []); // d3Extent scale returns NaN domain for empty arrays\n\n    if (yValues.length === 0) return undefined;\n    var yDomain = isDiscreteScale(yScaleConfig) ? yValues : d3Extent(yValues);\n    var yScale = scaleCanBeZeroed(yScaleConfig) ? createScale(_extends({\n      range: [yMin, yMax],\n      domain: yDomain,\n      zero: true\n    }, yScaleConfig)) : createScale(_extends({\n      range: [yMin, yMax],\n      domain: yDomain\n    }, yScaleConfig)); // apply any scale updates from the registry\n\n    registryEntries.forEach(function (entry) {\n      if (entry == null ? void 0 : entry.yScale) yScale = entry.yScale(yScale);\n    });\n    return yScale;\n  }, [dataRegistry, yScaleConfig, registryKeys, yMin, yMax]);\n  return {\n    xScale: memoizedXScale,\n    yScale: memoizedYScale\n  };\n}"]},"metadata":{},"sourceType":"module"}