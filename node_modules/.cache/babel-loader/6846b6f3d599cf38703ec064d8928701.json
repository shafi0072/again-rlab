{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { VERSION } from '../version';\nvar re = /^(\\d+)\\.(\\d+)\\.(\\d+)(?:-(.*))?$/;\n/**\n * Create a function to test an API version to see if it is compatible with the provided ownVersion.\n *\n * The returned function has the following semantics:\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param ownVersion version which should be checked against\n */\n\nexport function _makeCompatibilityCheck(ownVersion) {\n  var acceptedVersions = new Set([ownVersion]);\n  var rejectedVersions = new Set();\n  var myVersionMatch = ownVersion.match(re);\n\n  if (!myVersionMatch) {\n    // we cannot guarantee compatibility so we always return noop\n    return function () {\n      return false;\n    };\n  }\n\n  var ownVersionParsed = {\n    major: +myVersionMatch[1],\n    minor: +myVersionMatch[2],\n    patch: +myVersionMatch[3]\n  };\n\n  function _reject(v) {\n    rejectedVersions.add(v);\n    return false;\n  }\n\n  function _accept(v) {\n    acceptedVersions.add(v);\n    return true;\n  }\n\n  return function isCompatible(globalVersion) {\n    if (acceptedVersions.has(globalVersion)) {\n      return true;\n    }\n\n    if (rejectedVersions.has(globalVersion)) {\n      return false;\n    }\n\n    var globalVersionMatch = globalVersion.match(re);\n\n    if (!globalVersionMatch) {\n      // cannot parse other version\n      // we cannot guarantee compatibility so we always noop\n      return _reject(globalVersion);\n    }\n\n    var globalVersionParsed = {\n      major: +globalVersionMatch[1],\n      minor: +globalVersionMatch[2],\n      patch: +globalVersionMatch[3]\n    }; // major versions must match\n\n    if (ownVersionParsed.major !== globalVersionParsed.major) {\n      return _reject(globalVersion);\n    }\n\n    if (ownVersionParsed.major === 0) {\n      if (ownVersionParsed.minor === globalVersionParsed.minor && ownVersionParsed.patch <= globalVersionParsed.patch) {\n        return _accept(globalVersion);\n      }\n\n      return _reject(globalVersion);\n    }\n\n    if (ownVersionParsed.minor <= globalVersionParsed.minor) {\n      return _accept(globalVersion);\n    }\n\n    return _reject(globalVersion);\n  };\n}\n/**\n * Test an API version to see if it is compatible with this API.\n *\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param version version of the API requesting an instance of the global API\n */\n\nexport var isCompatible = _makeCompatibilityCheck(VERSION);","map":{"version":3,"sources":["../../../src/internal/semver.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAEH,SAAS,OAAT,QAAwB,YAAxB;AAEA,IAAM,EAAE,GAAG,iCAAX;AAEA;;;;;;;;;;;;;;;AAeG;;AACH,OAAM,SAAU,uBAAV,CACJ,UADI,EACc;AAElB,MAAM,gBAAgB,GAAG,IAAI,GAAJ,CAAgB,CAAC,UAAD,CAAhB,CAAzB;AACA,MAAM,gBAAgB,GAAG,IAAI,GAAJ,EAAzB;AAEA,MAAM,cAAc,GAAG,UAAU,CAAC,KAAX,CAAiB,EAAjB,CAAvB;;AACA,MAAI,CAAC,cAAL,EAAqB;AACnB;AACA,WAAO,YAAA;AAAM,aAAA,KAAA;AAAK,KAAlB;AACD;;AAED,MAAM,gBAAgB,GAAG;AACvB,IAAA,KAAK,EAAE,CAAC,cAAc,CAAC,CAAD,CADC;AAEvB,IAAA,KAAK,EAAE,CAAC,cAAc,CAAC,CAAD,CAFC;AAGvB,IAAA,KAAK,EAAE,CAAC,cAAc,CAAC,CAAD;AAHC,GAAzB;;AAMA,WAAS,OAAT,CAAiB,CAAjB,EAA0B;AACxB,IAAA,gBAAgB,CAAC,GAAjB,CAAqB,CAArB;AACA,WAAO,KAAP;AACD;;AAED,WAAS,OAAT,CAAiB,CAAjB,EAA0B;AACxB,IAAA,gBAAgB,CAAC,GAAjB,CAAqB,CAArB;AACA,WAAO,IAAP;AACD;;AAED,SAAO,SAAS,YAAT,CAAsB,aAAtB,EAA2C;AAChD,QAAI,gBAAgB,CAAC,GAAjB,CAAqB,aAArB,CAAJ,EAAyC;AACvC,aAAO,IAAP;AACD;;AAED,QAAI,gBAAgB,CAAC,GAAjB,CAAqB,aAArB,CAAJ,EAAyC;AACvC,aAAO,KAAP;AACD;;AAED,QAAM,kBAAkB,GAAG,aAAa,CAAC,KAAd,CAAoB,EAApB,CAA3B;;AACA,QAAI,CAAC,kBAAL,EAAyB;AACvB;AACA;AACA,aAAO,OAAO,CAAC,aAAD,CAAd;AACD;;AAED,QAAM,mBAAmB,GAAG;AAC1B,MAAA,KAAK,EAAE,CAAC,kBAAkB,CAAC,CAAD,CADA;AAE1B,MAAA,KAAK,EAAE,CAAC,kBAAkB,CAAC,CAAD,CAFA;AAG1B,MAAA,KAAK,EAAE,CAAC,kBAAkB,CAAC,CAAD;AAHA,KAA5B,CAhBgD,CAsBhD;;AACA,QAAI,gBAAgB,CAAC,KAAjB,KAA2B,mBAAmB,CAAC,KAAnD,EAA0D;AACxD,aAAO,OAAO,CAAC,aAAD,CAAd;AACD;;AAED,QAAI,gBAAgB,CAAC,KAAjB,KAA2B,CAA/B,EAAkC;AAChC,UACE,gBAAgB,CAAC,KAAjB,KAA2B,mBAAmB,CAAC,KAA/C,IACA,gBAAgB,CAAC,KAAjB,IAA0B,mBAAmB,CAAC,KAFhD,EAGE;AACA,eAAO,OAAO,CAAC,aAAD,CAAd;AACD;;AAED,aAAO,OAAO,CAAC,aAAD,CAAd;AACD;;AAED,QAAI,gBAAgB,CAAC,KAAjB,IAA0B,mBAAmB,CAAC,KAAlD,EAAyD;AACvD,aAAO,OAAO,CAAC,aAAD,CAAd;AACD;;AAED,WAAO,OAAO,CAAC,aAAD,CAAd;AACD,GA3CD;AA4CD;AAED;;;;;;;;;;;;;;AAcG;;AACH,OAAO,IAAM,YAAY,GAAG,uBAAuB,CAAC,OAAD,CAA5C","sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { VERSION } from '../version';\nvar re = /^(\\d+)\\.(\\d+)\\.(\\d+)(?:-(.*))?$/;\n/**\n * Create a function to test an API version to see if it is compatible with the provided ownVersion.\n *\n * The returned function has the following semantics:\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param ownVersion version which should be checked against\n */\nexport function _makeCompatibilityCheck(ownVersion) {\n    var acceptedVersions = new Set([ownVersion]);\n    var rejectedVersions = new Set();\n    var myVersionMatch = ownVersion.match(re);\n    if (!myVersionMatch) {\n        // we cannot guarantee compatibility so we always return noop\n        return function () { return false; };\n    }\n    var ownVersionParsed = {\n        major: +myVersionMatch[1],\n        minor: +myVersionMatch[2],\n        patch: +myVersionMatch[3],\n    };\n    function _reject(v) {\n        rejectedVersions.add(v);\n        return false;\n    }\n    function _accept(v) {\n        acceptedVersions.add(v);\n        return true;\n    }\n    return function isCompatible(globalVersion) {\n        if (acceptedVersions.has(globalVersion)) {\n            return true;\n        }\n        if (rejectedVersions.has(globalVersion)) {\n            return false;\n        }\n        var globalVersionMatch = globalVersion.match(re);\n        if (!globalVersionMatch) {\n            // cannot parse other version\n            // we cannot guarantee compatibility so we always noop\n            return _reject(globalVersion);\n        }\n        var globalVersionParsed = {\n            major: +globalVersionMatch[1],\n            minor: +globalVersionMatch[2],\n            patch: +globalVersionMatch[3],\n        };\n        // major versions must match\n        if (ownVersionParsed.major !== globalVersionParsed.major) {\n            return _reject(globalVersion);\n        }\n        if (ownVersionParsed.major === 0) {\n            if (ownVersionParsed.minor === globalVersionParsed.minor &&\n                ownVersionParsed.patch <= globalVersionParsed.patch) {\n                return _accept(globalVersion);\n            }\n            return _reject(globalVersion);\n        }\n        if (ownVersionParsed.minor <= globalVersionParsed.minor) {\n            return _accept(globalVersion);\n        }\n        return _reject(globalVersion);\n    };\n}\n/**\n * Test an API version to see if it is compatible with this API.\n *\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param version version of the API requesting an instance of the global API\n */\nexport var isCompatible = _makeCompatibilityCheck(VERSION);\n//# sourceMappingURL=semver.js.map"]},"metadata":{},"sourceType":"module"}