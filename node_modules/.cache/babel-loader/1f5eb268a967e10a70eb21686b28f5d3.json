{"ast":null,"code":"import { coerceNumber } from '@visx/scale';\nimport isValidNumber from '../typeguards/isValidNumber';\n/**\n * Returns the output value of a scale's baseline value, which is either zero\n * or the minimum scale value if its domain doesn't include zero.\n */\n\nexport default function getScaleBaseline(scale) {\n  var _scale$range$map = scale.range().map(function (rangeBoundary) {\n    var _coerceNumber;\n\n    return (_coerceNumber = coerceNumber(rangeBoundary)) != null ? _coerceNumber : 0;\n  }),\n      a = _scale$range$map[0],\n      b = _scale$range$map[1];\n\n  var isDescending = a != null && b != null && b < a;\n  var maybeScaleZero = scale(0);\n\n  var _ref = isDescending ? [b, a] : [a, b],\n      minOutput = _ref[0],\n      maxOutput = _ref[1]; // if maybeScaleZero _is_ a number, but the scale is not clamped and it's outside the domain\n  // fallback to the scale's minimum\n\n\n  return isDescending ? isValidNumber(maybeScaleZero) ? Math.min(Math.max(minOutput, maybeScaleZero), maxOutput) : maxOutput : isValidNumber(maybeScaleZero) ? Math.max(maybeScaleZero, minOutput) : minOutput;\n}","map":{"version":3,"sources":["C:/remotePackRlab-acab49ee44aa8f06acbfc147116dbc3387885161/node_modules/@visx/xychart/esm/utils/getScaleBaseline.js"],"names":["coerceNumber","isValidNumber","getScaleBaseline","scale","_scale$range$map","range","map","rangeBoundary","_coerceNumber","a","b","isDescending","maybeScaleZero","_ref","minOutput","maxOutput","Math","min","max"],"mappings":"AAAA,SAASA,YAAT,QAA6B,aAA7B;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AAC9C,MAAIC,gBAAgB,GAAGD,KAAK,CAACE,KAAN,GAAcC,GAAd,CAAkB,UAAUC,aAAV,EAAyB;AAChE,QAAIC,aAAJ;;AAEA,WAAO,CAACA,aAAa,GAAGR,YAAY,CAACO,aAAD,CAA7B,KAAiD,IAAjD,GAAwDC,aAAxD,GAAwE,CAA/E;AACD,GAJsB,CAAvB;AAAA,MAKIC,CAAC,GAAGL,gBAAgB,CAAC,CAAD,CALxB;AAAA,MAMIM,CAAC,GAAGN,gBAAgB,CAAC,CAAD,CANxB;;AAQA,MAAIO,YAAY,GAAGF,CAAC,IAAI,IAAL,IAAaC,CAAC,IAAI,IAAlB,IAA0BA,CAAC,GAAGD,CAAjD;AACA,MAAIG,cAAc,GAAGT,KAAK,CAAC,CAAD,CAA1B;;AAEA,MAAIU,IAAI,GAAGF,YAAY,GAAG,CAACD,CAAD,EAAID,CAAJ,CAAH,GAAY,CAACA,CAAD,EAAIC,CAAJ,CAAnC;AAAA,MACII,SAAS,GAAGD,IAAI,CAAC,CAAD,CADpB;AAAA,MAEIE,SAAS,GAAGF,IAAI,CAAC,CAAD,CAFpB,CAZ8C,CAcrB;AACzB;;;AAGA,SAAOF,YAAY,GAAGV,aAAa,CAACW,cAAD,CAAb,GAAgCI,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAASJ,SAAT,EAAoBF,cAApB,CAAT,EAA8CG,SAA9C,CAAhC,GAA2FA,SAA9F,GAA0Gd,aAAa,CAACW,cAAD,CAAb,GAAgCI,IAAI,CAACE,GAAL,CAASN,cAAT,EAAyBE,SAAzB,CAAhC,GAAsEA,SAAnM;AACD","sourcesContent":["import { coerceNumber } from '@visx/scale';\nimport isValidNumber from '../typeguards/isValidNumber';\n/**\n * Returns the output value of a scale's baseline value, which is either zero\n * or the minimum scale value if its domain doesn't include zero.\n */\n\nexport default function getScaleBaseline(scale) {\n  var _scale$range$map = scale.range().map(function (rangeBoundary) {\n    var _coerceNumber;\n\n    return (_coerceNumber = coerceNumber(rangeBoundary)) != null ? _coerceNumber : 0;\n  }),\n      a = _scale$range$map[0],\n      b = _scale$range$map[1];\n\n  var isDescending = a != null && b != null && b < a;\n  var maybeScaleZero = scale(0);\n\n  var _ref = isDescending ? [b, a] : [a, b],\n      minOutput = _ref[0],\n      maxOutput = _ref[1]; // if maybeScaleZero _is_ a number, but the scale is not clamped and it's outside the domain\n  // fallback to the scale's minimum\n\n\n  return isDescending ? isValidNumber(maybeScaleZero) ? Math.min(Math.max(minOutput, maybeScaleZero), maxOutput) : maxOutput : isValidNumber(maybeScaleZero) ? Math.max(maybeScaleZero, minOutput) : minOutput;\n}"]},"metadata":{},"sourceType":"module"}