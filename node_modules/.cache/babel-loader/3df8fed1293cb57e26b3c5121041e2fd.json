{"ast":null,"code":"var _jsxFileName = \"C:\\\\remotePackRlab\\\\remotePackRlab\\\\src\\\\Components\\\\Home\\\\DeviceDashBoard\\\\DeviceDashBoard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Navbar from '../../Shared/Navbar';\nimport DeveiceMeter from '../Locations/DeveiceMeter';\nimport logo from '../../../Resorces/logo_RLAB.png';\nimport './DeviceDashBoard.css';\nimport { BrowserRouter as Router, Switch, Route, Link, useParams } from \"react-router-dom\";\nimport db from '../../FirebaseConfig/Firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DeviceDashBoard = () => {\n  _s();\n\n  let {\n    format,\n    id\n  } = useParams();\n  const [status, setStatus] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  function arrayFunc(arr, key) {\n    let resultArray = [];\n\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i]._id === key) {\n        resultArray = arr[i];\n      }\n    }\n\n    return resultArray;\n  }\n\n  ; //  function for liner search start\n\n  function maxNumber(arr) {\n    let i;\n    let max = arr[0].dateSocket;\n\n    for (i = 1; i < arr.length; i++) {\n      if (arr[i].dateSocket > max) {\n        max = arr[i];\n      }\n    } // const lastItem =  await arr[arr.length - 1]\n\n\n    return max;\n  } // finish |^ linear search \n  //shorting data \n\n\n  async function selectionSort(arr) {\n    let min; //start passes.\n\n    for (let i = 0; i < arr.length; i++) {\n      //index of the smallest element to be the ith element.\n      min = i; //Check through the rest of the array for a lesser element\n\n      for (let j = i + 1; j < arr.length; j++) {\n        if (arr[j].dateSocket < arr[min].dateSocket) {\n          min = j;\n        }\n      } //compare the indexes\n\n\n      if (min !== i) {\n        //swap\n        [arr[i].dateSocket, arr[min]].dateSocket = [arr[min].dateSocket, arr[i].dateSocket];\n      }\n    }\n\n    return arr;\n  }\n\n  useEffect(() => {\n    const userDb = db.collection(id).orderBy(\"dateSocket\", \"des\").onSnapshot(querySnapshot => {\n      const getDataFirebase = [];\n      querySnapshot.forEach(doc => {\n        getDataFirebase.push({ ...doc.data(),\n          key: doc.id\n        });\n      }); // const maxNumber1 = maxNumber(getDataFirebase);\n      // setStatus(maxNumber1)\n\n      console.log({\n        getDataFirebase\n      });\n    });\n    return userDb;\n  }, [loading, format, id]);\n  console.log({\n    status\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-md-1\",\n      children: /*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-md-11 text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"\",\n        style: {\n          width: '20%'\n        },\n        className: \"mt-5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(DeveiceMeter, {\n        data: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DeviceDashBoard, \"MQoZwSV3qho3QoUllczWTcyqYjk=\", false, function () {\n  return [useParams];\n});\n\n_c = DeviceDashBoard;\nexport default DeviceDashBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeviceDashBoard\");","map":{"version":3,"sources":["C:/remotePackRlab/remotePackRlab/src/Components/Home/DeviceDashBoard/DeviceDashBoard.js"],"names":["React","useEffect","useState","Navbar","DeveiceMeter","logo","BrowserRouter","Router","Switch","Route","Link","useParams","db","DeviceDashBoard","format","id","status","setStatus","loading","setLoading","arrayFunc","arr","key","resultArray","i","length","_id","maxNumber","max","dateSocket","selectionSort","min","j","userDb","collection","orderBy","onSnapshot","querySnapshot","getDataFirebase","forEach","doc","push","data","console","log","width"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Navbar from '../../Shared/Navbar';\r\nimport DeveiceMeter from '../Locations/DeveiceMeter';\r\n\r\nimport logo from '../../../Resorces/logo_RLAB.png';\r\nimport './DeviceDashBoard.css';\r\n\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link,\r\n    useParams\r\n  } from \"react-router-dom\";\r\n\r\nimport db from '../../FirebaseConfig/Firebase'\r\n\r\n\r\n\r\nconst DeviceDashBoard = () => {\r\n    let { format, id } = useParams();\r\n\r\n\r\n    const [status,setStatus] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n    function arrayFunc(arr,key) {\r\n        let resultArray = [];\r\n        for(let i = 0; i < arr.length; i++){\r\n            if(arr[i]._id === key){\r\n                resultArray = arr[i];\r\n            }\r\n        }\r\n        return resultArray\r\n    };\r\n\r\n    //  function for liner search start\r\n    \r\nfunction maxNumber(arr) {\r\n        \r\n        let i;\r\n        let max = arr[0].dateSocket;\r\n\r\n        for (i = 1; i < arr.length; i++){\r\n           if(arr[i].dateSocket > max){\r\n               max = arr[i]\r\n           }\r\n        }\r\n    // const lastItem =  await arr[arr.length - 1]\r\n        return max;\r\n    }\r\n    \r\n// finish |^ linear search \r\n//shorting data \r\nasync function selectionSort(arr) {\r\n    let min;\r\n  \r\n    //start passes.\r\n    for (let i = 0; i < arr.length; i++) {\r\n      //index of the smallest element to be the ith element.\r\n      min = i;\r\n  \r\n      //Check through the rest of the array for a lesser element\r\n      for (let j = i + 1; j < arr.length; j++) {\r\n        if (arr[j].dateSocket < arr[min].dateSocket) {\r\n          min = j;\r\n        }\r\n      }\r\n  \r\n      //compare the indexes\r\n      if (min !== i) {\r\n        //swap\r\n        [arr[i].dateSocket, arr[min]].dateSocket = [arr[min].dateSocket, arr[i].dateSocket];\r\n      }\r\n    }\r\n  \r\n    return arr;\r\n  }\r\n    \r\n    useEffect(() => {\r\n        const userDb =  db.collection(id).orderBy(\"dateSocket\", \"des\").onSnapshot((querySnapshot) => {\r\n            const getDataFirebase = [];\r\n            querySnapshot.forEach((doc) => {\r\n              getDataFirebase.push({...doc.data(), key:doc.id});\r\n              \r\n            });\r\n            // const maxNumber1 = maxNumber(getDataFirebase);\r\n            // setStatus(maxNumber1)\r\n            console.log({getDataFirebase})\r\n        });\r\n        return userDb;\r\n     \r\n    }, [loading, format, id]);\r\n  console.log({status});\r\n    return (\r\n        <div className='row'>\r\n            <div className=\"col-md-1\">\r\n                <Navbar/>\r\n            </div>\r\n            <div className=\"col-md-11 text-center\">\r\n            <img src={logo} alt=\"\" style={{width:'20%'}} className='mt-5' />\r\n                \r\n                <DeveiceMeter data={status}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DeviceDashBoard;"]},"metadata":{},"sourceType":"module"}