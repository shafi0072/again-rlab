{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nimport { ROOT_CONTEXT } from './context';\n\nvar NoopContextManager =\n/** @class */\nfunction () {\n  function NoopContextManager() {}\n\n  NoopContextManager.prototype.active = function () {\n    return ROOT_CONTEXT;\n  };\n\n  NoopContextManager.prototype.with = function (_context, fn, thisArg) {\n    var args = [];\n\n    for (var _i = 3; _i < arguments.length; _i++) {\n      args[_i - 3] = arguments[_i];\n    }\n\n    return fn.call.apply(fn, __spreadArray([thisArg], args));\n  };\n\n  NoopContextManager.prototype.bind = function (_context, target) {\n    return target;\n  };\n\n  NoopContextManager.prototype.enable = function () {\n    return this;\n  };\n\n  NoopContextManager.prototype.disable = function () {\n    return this;\n  };\n\n  return NoopContextManager;\n}();\n\nexport { NoopContextManager };","map":{"version":3,"sources":["../../../src/context/NoopContextManager.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;;;;;;;AAEH,SAAS,YAAT,QAA6B,WAA7B;;AAGA,IAAA,kBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,kBAAA,GAAA,CAyBC;;AAxBC,EAAA,kBAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACE,WAAO,YAAP;AACD,GAFD;;AAIA,EAAA,kBAAA,CAAA,SAAA,CAAA,IAAA,GAAA,UACE,QADF,EAEE,EAFF,EAGE,OAHF,EAGgC;AAC9B,QAAA,IAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAU;AAAV,MAAA,IAAA,CAAA,EAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AAEA,WAAO,EAAE,CAAC,IAAH,CAAO,KAAP,CAAA,EAAA,EAAE,aAAA,CAAA,CAAM,OAAN,CAAA,EAAkB,IAAlB,CAAF,CAAP;AACD,GAPD;;AASA,EAAA,kBAAA,CAAA,SAAA,CAAA,IAAA,GAAA,UAAQ,QAAR,EAAiC,MAAjC,EAA0C;AACxC,WAAO,MAAP;AACD,GAFD;;AAIA,EAAA,kBAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACE,WAAO,IAAP;AACD,GAFD;;AAIA,EAAA,kBAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACE,WAAO,IAAP;AACD,GAFD;;AAGF,SAAA,kBAAA;AAAC,CAzBD,EAAA","sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __spreadArray = (this && this.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\nimport { ROOT_CONTEXT } from './context';\nvar NoopContextManager = /** @class */ (function () {\n    function NoopContextManager() {\n    }\n    NoopContextManager.prototype.active = function () {\n        return ROOT_CONTEXT;\n    };\n    NoopContextManager.prototype.with = function (_context, fn, thisArg) {\n        var args = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            args[_i - 3] = arguments[_i];\n        }\n        return fn.call.apply(fn, __spreadArray([thisArg], args));\n    };\n    NoopContextManager.prototype.bind = function (_context, target) {\n        return target;\n    };\n    NoopContextManager.prototype.enable = function () {\n        return this;\n    };\n    NoopContextManager.prototype.disable = function () {\n        return this;\n    };\n    return NoopContextManager;\n}());\nexport { NoopContextManager };\n//# sourceMappingURL=NoopContextManager.js.map"]},"metadata":{},"sourceType":"module"}