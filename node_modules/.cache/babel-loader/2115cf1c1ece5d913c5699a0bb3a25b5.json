{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2014 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PubSub = void 0;\n\nconst paginator_1 = require(\"@google-cloud/paginator\");\n\nconst projectify_1 = require(\"@google-cloud/projectify\");\n\nconst extend = require(\"extend\");\n\nconst google_auth_library_1 = require(\"google-auth-library\");\n\nconst gax = require(\"google-gax\"); // eslint-disable-next-line @typescript-eslint/no-var-requires\n\n\nconst PKG = require('../../package.json'); // eslint-disable-next-line @typescript-eslint/no-var-requires\n\n\nconst v1 = require('./v1');\n\nconst util_1 = require(\"./util\");\n\nconst schema_1 = require(\"./schema\");\n\nconst snapshot_1 = require(\"./snapshot\");\n\nconst subscription_1 = require(\"./subscription\");\n\nconst topic_1 = require(\"./topic\");\n/**\n * Project ID placeholder.\n * @type {string}\n * @private\n */\n\n\nconst PROJECT_ID_PLACEHOLDER = '{{projectId}}';\n/**\n * @typedef {object} ClientConfig\n * @property {string} [projectId] The project ID from the Google Developer's\n *     Console, e.g. 'grape-spaceship-123'. We will also check the environment\n *     variable `GCLOUD_PROJECT` for your project ID. If your app is running in\n *     an environment which supports {@link\n * https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\n * Application Default Credentials}, your project ID will be detected\n * automatically.\n * @property {string} [keyFilename] Full path to the a .json, .pem, or .p12 key\n *     downloaded from the Google Developers Console. If you provide a path to a\n *     JSON file, the `projectId` option above is not necessary. NOTE: .pem and\n *     .p12 require you to specify the `email` option as well.\n * @property {string} [apiEndpoint] The `apiEndpoint` from options will set the\n *     host. If not set, the `PUBSUB_EMULATOR_HOST` environment variable from the\n *     gcloud SDK is honored. We also check the `CLOUD_API_ENDPOINT_OVERRIDES_PUBSUB`\n *     environment variable used by `gcloud alpha pubsub`. Otherwise the actual API\n *     endpoint will be used. Note that if the URL doesn't end in '.googleapis.com',\n *     we will assume that it's an emulator and disable strict SSL checks.\n * @property {string} [email] Account email address. Required when using a .pem\n *     or .p12 keyFilename.\n * @property {object} [credentials] Credentials object.\n * @property {string} [credentials.client_email]\n * @property {string} [credentials.private_key]\n * @property {boolean} [autoRetry=true] Automatically retry requests if the\n *     response is related to rate limits or certain intermittent server errors.\n *     We will exponentially backoff subsequent requests by default.\n * @property {Constructor} [promise] Custom promise module to use instead of\n *     native Promises.\n */\n\n/**\n * [Cloud Pub/Sub](https://developers.google.com/pubsub/overview) is a\n * reliable, many-to-many, asynchronous messaging service from Cloud\n * Platform.\n *\n * @class\n *\n * @see [Cloud Pub/Sub overview]{@link https://developers.google.com/pubsub/overview}\n *\n * @param {ClientConfig} [options] Configuration options.\n *\n * @example <caption>Import the client library</caption>\n * const {PubSub} = require('@google-cloud/pubsub');\n *\n * @example <caption>Create a client that uses <a href=\"https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\">Application Default Credentials (ADC)</a>:</caption>\n * const pubsub = new PubSub();\n *\n * @example <caption>Create a client with <a href=\"https://cloud.google.com/docs/authentication/production#obtaining_and_providing_service_account_credentials_manually\">explicit credentials</a>:</caption>\n * const pubsub = new PubSub({\n *   projectId: 'your-project-id',\n *   keyFilename: '/path/to/keyfile.json'\n * });\n *\n * @example <caption>include:samples/quickstart.js</caption>\n * region_tag:pubsub_quickstart_create_topic\n * Full quickstart example:\n */\n\nclass PubSub {\n  constructor(options) {\n    this.getSubscriptionsStream = paginator_1.paginator.streamify('getSubscriptions');\n    this.getSnapshotsStream = paginator_1.paginator.streamify('getSnapshots');\n    this.getTopicsStream = paginator_1.paginator.streamify('getTopics');\n    this.isOpen = true;\n    options = options || {}; // Determine what scopes are needed.\n    // It is the union of the scopes on both clients.\n\n    const clientClasses = [v1.SubscriberClient, v1.PublisherClient];\n    const allScopes = {};\n\n    for (const clientClass of clientClasses) {\n      for (const scope of clientClass.scopes) {\n        allScopes[scope] = true;\n      }\n    }\n\n    this.options = Object.assign({\n      libName: 'gccl',\n      libVersion: PKG.version,\n      scopes: Object.keys(allScopes)\n    }, options);\n    /**\n     * @name PubSub#isEmulator\n     * @type {boolean}\n     */\n\n    this.isEmulator = false;\n    this.determineBaseUrl_();\n    this.api = {};\n    this.auth = new google_auth_library_1.GoogleAuth(this.options);\n    this.projectId = this.options.projectId || PROJECT_ID_PLACEHOLDER;\n\n    if (this.projectId !== PROJECT_ID_PLACEHOLDER) {\n      this.name = PubSub.formatName_(this.projectId);\n    }\n  }\n  /**\n   * Returns true if we have actually resolved the full project name.\n   *\n   * @returns {boolean} true if the name is resolved.\n   */\n\n\n  get isIdResolved() {\n    return this.projectId.indexOf(PROJECT_ID_PLACEHOLDER) < 0;\n  }\n  /**\n   * Closes out this object, releasing any server connections. Note that once\n   * you close a PubSub object, it may not be used again. Any pending operations\n   * (e.g. queued publish messages) will fail. If you have topic or subscription\n   * objects that may have pending operations, you should call close() on those\n   * first if you want any pending messages to be delivered correctly. The\n   * PubSub class doesn't track those.\n   *\n   * @callback EmptyCallback\n   * @returns {Promise<void>}\n   */\n\n\n  close(callback) {\n    const definedCallback = callback || (() => {});\n\n    if (this.isOpen) {\n      this.isOpen = false;\n      this.closeAllClients_().then(() => {\n        var _a;\n\n        return (_a = this.schemaClient) === null || _a === void 0 ? void 0 : _a.close();\n      }).then(() => {\n        definedCallback(null);\n      }).catch(definedCallback);\n    } else {\n      definedCallback(null);\n    }\n  }\n  /**\n   * Create a schema in the project.\n   *\n   * @see [Schemas: create API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.schemas/create}\n   * @see {@link Schema#create}\n   *\n   * @throws {Error} If a schema ID or name is not provided.\n   * @throws {Error} If an invalid SchemaType is provided.\n   * @throws {Error} If an invalid schema definition is provided.\n   *\n   * @param {string} schemaId The name or ID of the subscription.\n   * @param {SchemaType} type The type of the schema (Protobuf, Avro, etc).\n   * @param {string} definition The text describing the schema in terms of the type.\n   * @param {object} [options] Request configuration options, outlined\n   *   here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n   * @returns {Promise<Schema>}\n   *\n   * @example <caption>Create a schema.</caption>\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   *\n   * await pubsub.createSchema(\n   *   'messageType',\n   *   SchemaTypes.Avro,\n   *   '{...avro definition...}'\n   * );\n   */\n\n\n  async createSchema(schemaId, type, definition, gaxOpts) {\n    // This populates projectId for us.\n    await this.getClientConfig();\n    const schemaName = schema_1.Schema.formatName_(this.projectId, schemaId);\n    const request = {\n      parent: this.name,\n      schemaId,\n      schema: {\n        name: schemaName,\n        type,\n        definition\n      }\n    };\n    const client = await this.getSchemaClient_();\n    await client.createSchema(request, gaxOpts);\n    return new schema_1.Schema(this, schemaName);\n  }\n  /**\n   * @typedef {array} CreateSubscriptionResponse\n   * @property {Subscription} 0 The new {@link Subscription}.\n   * @property {object} 1 The full API response.\n   */\n\n  /**\n   * @callback CreateSubscriptionCallback\n   * @param {?Error} err Request error, if any.\n   * @param {Subscription} Subscription\n   * @param {object} apiResponse The full API response.\n   */\n\n  /**\n   * Options for creating a subscription.\n   *\n   * See a [Subscription\n   * resource](https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.subscriptions).\n   *\n   * @typedef {object} CreateSubscriptionRequest\n   * @property {DeadLetterPolicy} [deadLetterPolicy] A policy that specifies the\n   *     conditions for dead lettering messages in this subscription.\n   * @property {object} [flowControl] Flow control configurations for\n   *     receiving messages. Note that these options do not persist across\n   *     subscription instances.\n   * @property {number} [flowControl.maxBytes] The maximum number of bytes\n   *     in un-acked messages to allow before the subscription pauses incoming\n   *     messages. Defaults to 20% of free memory.\n   * @property {number} [flowControl.maxMessages=Infinity] The maximum number\n   *     of un-acked messages to allow before the subscription pauses incoming\n   *     messages.\n   * @property {object} [gaxOpts] Request configuration options, outlined\n   *     here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n   * @property {number|google.protobuf.Duration} [messageRetentionDuration] Set\n   *     this to override the default duration of 7 days. This value is expected\n   *     in seconds. Acceptable values are in the range of 10 minutes and 7\n   *     days.\n   * @property {string} [pushEndpoint] A URL to a custom endpoint that\n   *     messages should be pushed to.\n   * @property {object} [oidcToken] If specified, Pub/Sub will generate and\n   *     attach an OIDC JWT token as an `Authorization` header in the HTTP\n   *     request for every pushed message. This object should have the same\n   *     structure as [OidcToken]{@link google.pubsub.v1.OidcToken}\n   * @property {boolean} [retainAckedMessages=false] If set, acked messages\n   *     are retained in the subscription's backlog for the length of time\n   *     specified by `options.messageRetentionDuration`.\n   * @property {ExpirationPolicy} [expirationPolicy] A policy that specifies\n   *     the conditions for this subscription's expiration.\n   */\n\n  /**\n   * Create a subscription to a topic.\n   *\n   * @see [Subscriptions: create API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.subscriptions/create}\n   * @see {@link Topic#createSubscription}\n   *\n   * @throws {Error} If a Topic instance or topic name is not provided.\n   * @throws {Error} If a subscription name is not provided.\n   *\n   * @param {Topic|string} topic The Topic to create a subscription to.\n   * @param {string} name The name of the subscription.\n   * @param {CreateSubscriptionRequest} [options] See a [Subscription resource](https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.subscriptions).\n   * @param {CreateSubscriptionCallback} [callback] Callback function.\n   * @returns {Promise<CreateSubscriptionResponse>}\n   *\n   * @example <caption>Subscribe to a topic.</caption>\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   *\n   * const topic = 'messageCenter';\n   * const name = 'newMessages';\n   *\n   * const callback = function(err, subscription, apiResponse) {};\n   *\n   * pubsub.createSubscription(topic, name, callback);\n   *\n   * @example <caption>If the callback is omitted, we'll return a Promise.</caption>\n   * pubsub.createSubscription(topic, name)\n   *   .then(function(data) {\n   *     const subscription = data[0];\n   *     const apiResponse = data[1];\n   *   });\n   */\n\n\n  createSubscription(topic, name, optionsOrCallback, callback) {\n    if (typeof topic !== 'string' && !(topic instanceof topic_1.Topic)) {\n      throw new Error('A Topic is required for a new subscription.');\n    }\n\n    if (typeof name !== 'string') {\n      throw new Error('A subscription name is required.');\n    }\n\n    if (typeof topic === 'string') {\n      topic = this.topic(topic);\n    }\n\n    let options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n    callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : callback; // Make a deep copy of options to not pollute caller object.\n\n    options = extend(true, {}, options);\n    const gaxOpts = options.gaxOpts;\n    const flowControl = options.flowControl;\n    delete options.gaxOpts;\n    delete options.flowControl;\n    const metadata = subscription_1.Subscription.formatMetadata_(options);\n    let subscriptionCtorOptions = flowControl ? {\n      flowControl\n    } : {};\n    subscriptionCtorOptions = Object.assign(subscriptionCtorOptions, metadata);\n    const subscription = this.subscription(name, subscriptionCtorOptions);\n    const reqOpts = Object.assign(metadata, {\n      topic: topic.name,\n      name: subscription.name\n    });\n    this.request({\n      client: 'SubscriberClient',\n      method: 'createSubscription',\n      reqOpts,\n      gaxOpts\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, resp);\n        return;\n      }\n\n      subscription.metadata = resp;\n      callback(null, subscription, resp);\n    });\n  }\n  /**\n   * @typedef {array} CreateTopicResponse\n   * @property {Topic} 0 The new {@link Topic}.\n   * @property {object} 1 The full API response.\n   */\n\n  /**\n   * @callback CreateTopicCallback\n   * @param {?Error} err Request error, if any.\n   * @param {Topic} topic The new {@link Topic}.\n   * @param {object} apiResponse The full API response.\n   */\n\n  /**\n   * Create a topic with the given name.\n   *\n   * @see [Topics: create API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.topics/create}\n   *\n   * @param {string} name Name of the topic.\n   * @param {object} [gaxOpts] Request configuration options, outlined\n   *     here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n   * @param {CreateTopicCallback} [callback] Callback function.\n   * @returns {Promise<CreateTopicResponse>}\n   *\n   * @example\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   *\n   * pubsub.createTopic('my-new-topic', function(err, topic, apiResponse) {\n   *   if (!err) {\n   *     // The topic was created successfully.\n   *   }\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * pubsub.createTopic('my-new-topic').then(function(data) {\n   *   const topic = data[0];\n   *   const apiResponse = data[1];\n   * });\n   */\n\n\n  createTopic(name, optsOrCallback, callback) {\n    const reqOpts = typeof name === 'string' ? {\n      name\n    } : name; // We don't allow a blank name, but this will let topic() handle that case.\n\n    const topic = this.topic(reqOpts.name || ''); // Topic#constructor might have canonicalized the name.\n\n    reqOpts.name = topic.name;\n    const gaxOpts = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n    callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n    this.request({\n      client: 'PublisherClient',\n      method: 'createTopic',\n      reqOpts,\n      gaxOpts\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, resp);\n        return;\n      }\n\n      topic.metadata = resp;\n      callback(null, topic, resp);\n    });\n  }\n  /**\n   * Detach a subscription with the given name.\n   *\n   * @see [Admin: Pub/Sub administration API Documentation]{@link https://cloud.google.com/pubsub/docs/admin}\n   *\n   * @param {string} name Name of the subscription.\n   * @param {object} [gaxOpts] Request configuration options, outlined\n   *     here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n   * @param {DetachSubscriptionCallback} [callback] Callback function.\n   * @returns {Promise<DetachSubscriptionResponse>}\n   *\n   * @example\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   *\n   * pubsub.detachSubscription('my-sub', (err, topic, apiResponse) => {\n   *   if (!err) {\n   *     // The topic was created successfully.\n   *   }\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * pubsub.detachSubscription('my-sub').then(data => {\n   *   const apiResponse = data[0];\n   * });\n   */\n\n\n  detachSubscription(name, optsOrCallback, callback) {\n    if (typeof name !== 'string') {\n      throw new Error('A subscription name is required.');\n    }\n\n    const sub = this.subscription(name);\n    const reqOpts = {\n      subscription: sub.name\n    };\n    const gaxOpts = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n    callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n    this.request({\n      client: 'PublisherClient',\n      method: 'detachSubscription',\n      reqOpts,\n      gaxOpts: gaxOpts\n    }, callback);\n  }\n  /**\n   * Determine the appropriate endpoint to use for API requests, first trying\n   * the `apiEndpoint` parameter. If that isn't set, we try the Pub/Sub emulator\n   * environment variable (PUBSUB_EMULATOR_HOST). If that is also null, we try\n   * the standard `gcloud alpha pubsub` environment variable\n   * (CLOUDSDK_API_ENDPOINT_OVERRIDES_PUBSUB). Otherwise the default production\n   * API is used.\n   *\n   * Note that if the URL doesn't end in '.googleapis.com', we will assume that\n   * it's an emulator and disable strict SSL checks.\n   *\n   * @private\n   */\n\n\n  determineBaseUrl_() {\n    // We allow an override from the client object options, or from\n    // one of these variables. The CLOUDSDK variable is provided for\n    // compatibility with the `gcloud alpha` utility.\n    const gcloudVarName = 'CLOUDSDK_API_ENDPOINT_OVERRIDES_PUBSUB';\n    const emulatorVarName = 'PUBSUB_EMULATOR_HOST';\n    const apiEndpoint = this.options.apiEndpoint || process.env[emulatorVarName] || process.env[gcloudVarName];\n\n    if (!apiEndpoint) {\n      return;\n    } // Parse the URL into a hostname and port, if possible.\n\n\n    const leadingProtocol = new RegExp('^https?://');\n    const trailingSlashes = new RegExp('/*$');\n    const baseUrlParts = apiEndpoint.replace(leadingProtocol, '').replace(trailingSlashes, '').split(':');\n    this.options.servicePath = baseUrlParts[0];\n\n    if (!baseUrlParts[1]) {\n      // No port was given -- figure it out from the protocol.\n      if (apiEndpoint.startsWith('https')) {\n        this.options.port = 443;\n      } else if (apiEndpoint.startsWith('http')) {\n        this.options.port = 80;\n      } else {\n        this.options.port = undefined;\n      }\n    } else {\n      this.options.port = parseInt(baseUrlParts[1], 10);\n    } // If this looks like a GCP URL of some kind, don't go into emulator\n    // mode. Otherwise, supply a fake SSL provider so a real cert isn't\n    // required for running the emulator.\n\n\n    const officialUrlMatch = this.options.servicePath.endsWith('.googleapis.com');\n\n    if (!officialUrlMatch) {\n      const grpcInstance = this.options.grpc || gax.grpc;\n      this.options.sslCreds = grpcInstance.credentials.createInsecure();\n      this.isEmulator = true;\n    }\n\n    if (!this.options.projectId && process.env.PUBSUB_PROJECT_ID) {\n      this.options.projectId = process.env.PUBSUB_PROJECT_ID;\n    }\n  }\n  /**\n   * Get a list of schemas associated with your project.\n   *\n   * The returned AsyncIterable will resolve to {@link google.pubsub.v1.ISchema} objects.\n   *\n   * This method returns an async iterable. These objects can be adapted\n   * to work in a Promise/then framework, as well as with callbacks, but\n   * this discussion is considered out of scope for these docs.\n   *\n   * @see [Schemas: list API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.schemas/list}\n   * @see [More about async iterators]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of}\n   *\n   * @param {google.pubsub.v1.SchemaView} [view] The type of schema objects\n   *   requested, which should be an enum value from {@link SchemaViews}. Defaults\n   *   to Full.\n   * @param {object} [options] Request configuration options, outlined\n   *   here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n   * @returns {AsyncIterable<ISchema>}\n   *\n   * @example\n   * for await (const s of pubsub.listSchemas()) {\n   *   const moreInfo = await s.get();\n   * }\n   */\n\n\n  async *listSchemas(view = schema_1.SchemaViews.Basic, options) {\n    const client = await this.getSchemaClient_();\n    const query = {\n      parent: this.name,\n      view\n    };\n\n    for await (const s of client.listSchemasAsync(query, options)) {\n      yield s;\n    }\n  }\n  /**\n   * Query object for listing snapshots.\n   *\n   * @typedef {object} GetSnapshotsRequest\n   * @property {boolean} [autoPaginate=true] Have pagination handled\n   *     automatically.\n   * @property {object} [options.gaxOpts] Request configuration options, outlined\n   *     here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n   * @property {number} [options.pageSize] Maximum number of results to return.\n   * @property {string} [options.pageToken] Page token.\n   */\n\n  /**\n   * @typedef {array} GetSnapshotsResponse\n   * @property {Snapshot[]} 0 Array of {@link Snapshot} instances.\n   * @property {object} 1 The full API response.\n   */\n\n  /**\n   * @callback GetSnapshotsCallback\n   * @param {?Error} err Request error, if any.\n   * @param {Snapshot[]} snapshots Array of {@link Snapshot} instances.\n   * @param {object} apiResponse The full API response.\n   */\n\n  /**\n   * Get a list of snapshots.\n   *\n   * @param {GetSnapshotsRequest} [query] Query object for listing snapshots.\n   * @param {GetSnapshotsCallback} [callback] Callback function.\n   * @returns {Promise<GetSnapshotsResponse>}\n   *\n   * @example\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   *\n   * pubsub.getSnapshots(function(err, snapshots) {\n   *   if (!err) {\n   *     // snapshots is an array of Snapshot objects.\n   *   }\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * pubsub.getSnapshots().then(function(data) {\n   *   const snapshots = data[0];\n   * });\n   */\n\n\n  getSnapshots(optsOrCallback, callback) {\n    const options = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n    callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n    const reqOpts = Object.assign({\n      project: PubSub.formatName_(this.projectId)\n    }, options);\n    delete reqOpts.gaxOpts;\n    delete reqOpts.autoPaginate;\n    const gaxOpts = Object.assign({\n      autoPaginate: options.autoPaginate\n    }, options.gaxOpts);\n    this.request({\n      client: 'SubscriberClient',\n      method: 'listSnapshots',\n      reqOpts,\n      gaxOpts\n    }, (err, rawSnapshots, ...args) => {\n      let snapshots;\n\n      if (rawSnapshots) {\n        snapshots = rawSnapshots.map(snapshot => {\n          const snapshotInstance = this.snapshot(snapshot.name);\n          snapshotInstance.metadata = snapshot;\n          return snapshotInstance;\n        });\n      }\n\n      callback(err, snapshots, ...args);\n    });\n  }\n  /**\n   * Query object for listing subscriptions.\n   *\n   * @typedef {object} GetSubscriptionsRequest\n   * @property {boolean} [autoPaginate=true] Have pagination handled\n   *     automatically.\n   * @property {object} [options.gaxOpts] Request configuration options, outlined\n   *     here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n   * @property {number} [options.pageSize] Maximum number of results to return.\n   * @property {string} [options.pageToken] Page token.\n   * @param {string|Topic} options.topic - The name of the topic to\n   *     list subscriptions from.\n   */\n\n  /**\n   * @typedef {array} GetSubscriptionsResponse\n   * @property {Subscription[]} 0 Array of {@link Subscription} instances.\n   * @property {object} 1 The full API response.\n   */\n\n  /**\n   * @callback GetSubscriptionsCallback\n   * @param {?Error} err Request error, if any.\n   * @param {Subscription[]} subscriptions Array of {@link Subscription} instances.\n   * @param {object} apiResponse The full API response.\n   */\n\n  /**\n   * Get a list of the subscriptions registered to all of your project's topics.\n   * You may optionally provide a query object as the first argument to\n   * customize the response.\n   *\n   * Your provided callback will be invoked with an error object if an API error\n   * occurred or an array of {@link Subscription} objects.\n   *\n   * To get subscriptions for a topic, see {@link Topic}.\n   *\n   * @see [Subscriptions: list API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.subscriptions/list}\n   *\n   * @param {GetSubscriptionsRequest} [query] Query object for listing subscriptions.\n   * @param {GetSubscriptionsCallback} [callback] Callback function.\n   * @returns {Promise<GetSubscriptionsResponse>}\n   *\n   * @example\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   *\n   * pubsub.getSubscriptions(function(err, subscriptions) {\n   *   if (!err) {\n   *     // subscriptions is an array of Subscription objects.\n   *   }\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * pubsub.getSubscriptions().then(function(data) {\n   *   const subscriptions = data[0];\n   * });\n   */\n\n\n  getSubscriptions(optsOrCallback, callback) {\n    const options = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n    callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n    let topic = options.topic;\n\n    if (topic) {\n      if (!(topic instanceof topic_1.Topic)) {\n        topic = this.topic(topic);\n      }\n\n      return topic.getSubscriptions(options, callback);\n    }\n\n    const reqOpts = Object.assign({}, options);\n    reqOpts.project = 'projects/' + this.projectId;\n    delete reqOpts.gaxOpts;\n    delete reqOpts.autoPaginate;\n    const gaxOpts = Object.assign({\n      autoPaginate: options.autoPaginate\n    }, options.gaxOpts);\n    this.request({\n      client: 'SubscriberClient',\n      method: 'listSubscriptions',\n      reqOpts,\n      gaxOpts\n    }, (err, rawSubs, ...args) => {\n      let subscriptions;\n\n      if (rawSubs) {\n        subscriptions = rawSubs.map(sub => {\n          const subscriptionInstance = this.subscription(sub.name);\n          subscriptionInstance.metadata = sub;\n          return subscriptionInstance;\n        });\n      }\n\n      callback(err, subscriptions, ...args);\n    });\n  }\n  /**\n   * Query object for listing topics.\n   *\n   * @typedef {object} GetTopicsRequest\n   * @property {boolean} [autoPaginate=true] Have pagination handled\n   *     automatically.\n   * @property {object} [options.gaxOpts] Request configuration options, outlined\n   *     here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n   * @property {number} [options.pageSize] Maximum number of results to return.\n   * @property {string} [options.pageToken] Page token.\n   */\n\n  /**\n   * @typedef {array} GetTopicsResponse\n   * @property {Topic[]} 0 Array of {@link Topic} instances.\n   * @property {object} 1 The full API response.\n   */\n\n  /**\n   * @callback GetTopicsCallback\n   * @param {?Error} err Request error, if any.\n   * @param {Topic[]} topics Array of {@link Topic} instances.\n   * @param {object} apiResponse The full API response.\n   */\n\n  /**\n   * Get a list of the topics registered to your project. You may optionally\n   * provide a query object as the first argument to customize the response.\n   *\n   * @see [Topics: list API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.topics/list}\n   *\n   * @param {GetTopicsRequest} [query] Query object for listing topics.\n   * @param {GetTopicsCallback} [callback] Callback function.\n   * @returns {Promise<GetTopicsResponse>}\n   *\n   * @example\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   *\n   * pubsub.getTopics(function(err, topics) {\n   *   if (!err) {\n   *     // topics is an array of Topic objects.\n   *   }\n   * });\n   *\n   * //-\n   * // Customize the query.\n   * //-\n   * pubsub.getTopics({\n   *   pageSize: 3\n   * }, function(err, topics) {});\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * pubsub.getTopics().then(function(data) {\n   *   const topics = data[0];\n   * });\n   */\n\n\n  getTopics(optsOrCallback, callback) {\n    const options = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n    callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n    const reqOpts = Object.assign({\n      project: 'projects/' + this.projectId\n    }, options);\n    delete reqOpts.gaxOpts;\n    delete reqOpts.autoPaginate;\n    const gaxOpts = Object.assign({\n      autoPaginate: options.autoPaginate\n    }, options.gaxOpts);\n    this.request({\n      client: 'PublisherClient',\n      method: 'listTopics',\n      reqOpts,\n      gaxOpts\n    }, (err, rawTopics, ...args) => {\n      let topics;\n\n      if (rawTopics) {\n        topics = rawTopics.map(topic => {\n          const topicInstance = this.topic(topic.name);\n          topicInstance.metadata = topic;\n          return topicInstance;\n        });\n      }\n\n      callback(err, topics, ...args);\n    });\n  }\n  /**\n   * Retrieve a client configuration, suitable for passing into a GAPIC\n   * 'v1' class constructor. This will fill out projectId, emulator URLs,\n   * and so forth.\n   *\n   * @returns {Promise<ClientConfig>} the filled client configuration.\n   */\n\n\n  async getClientConfig() {\n    if (!this.projectId || this.projectId === PROJECT_ID_PLACEHOLDER) {\n      let projectId;\n\n      try {\n        projectId = await this.auth.getProjectId();\n      } catch (e) {\n        if (!this.isEmulator) {\n          throw e;\n        }\n\n        projectId = '';\n      }\n\n      this.projectId = projectId;\n      this.name = PubSub.formatName_(this.projectId);\n      this.options.projectId = projectId;\n    }\n\n    return this.options;\n  }\n  /**\n   * Gets a schema client, creating one if needed.\n   * @private\n   */\n\n\n  async getSchemaClient_() {\n    if (!this.schemaClient) {\n      const options = await this.getClientConfig();\n      this.schemaClient = new v1.SchemaServiceClient(options);\n    }\n\n    return this.schemaClient;\n  }\n  /**\n   * Callback function to PubSub.getClient_().\n   * @private\n   * @callback GetClientCallback\n   * @param err - Error, if any.\n   * @param gaxClient - The gax client specified in RequestConfig.client.\n   *                    Typed any since it's importing Javascript source.\n   */\n\n  /**\n   * Get the PubSub client object.\n   *\n   * @private\n   *\n   * @param {object} config Configuration object.\n   * @param {object} config.gaxOpts GAX options.\n   * @param {function} config.method The gax method to call.\n   * @param {object} config.reqOpts Request options.\n   * @param {function} [callback] The callback function.\n   */\n\n\n  getClient_(config, callback) {\n    this.getClientAsync_(config).then(client => callback(null, client), callback);\n  }\n  /**\n   * Get the PubSub client object.\n   *\n   * @private\n   *\n   * @param {object} config Configuration object.\n   * @param {object} config.gaxOpts GAX options.\n   * @param {function} config.method The gax method to call.\n   * @param {object} config.reqOpts Request options.\n   * @returns {Promise}\n   */\n\n\n  async getClientAsync_(config) {\n    // Make sure we've got a fully created config with projectId and such.\n    const options = await this.getClientConfig();\n    let gaxClient = this.api[config.client];\n\n    if (!gaxClient) {\n      // Lazily instantiate client.\n      gaxClient = new v1[config.client](options);\n      this.api[config.client] = gaxClient;\n    }\n\n    return gaxClient;\n  }\n  /**\n   * Close all open client objects.\n   *\n   * @private\n   *\n   * @returns {Promise}\n   */\n\n\n  async closeAllClients_() {\n    const promises = [];\n\n    for (const clientConfig of Object.keys(this.api)) {\n      const gaxClient = this.api[clientConfig];\n      promises.push(gaxClient.close());\n      delete this.api[clientConfig];\n    }\n\n    await Promise.all(promises);\n  }\n  /**\n   * Funnel all API requests through this method, to be sure we have a project\n   * ID.\n   *\n   * @private\n   *\n   * @param {object} config Configuration object.\n   * @param {object} config.gaxOpts GAX options.\n   * @param {function} config.method The gax method to call.\n   * @param {object} config.reqOpts Request options.\n   * @param {function} [callback] The callback function.\n   */\n\n\n  request(config, callback) {\n    // This prevents further requests, in case any publishers were hanging around.\n    if (!this.isOpen) {\n      const statusObject = {\n        code: 0,\n        details: 'Cannot use a closed PubSub object.',\n        metadata: null\n      };\n      const err = new Error(statusObject.details);\n      Object.assign(err, statusObject);\n      callback(err);\n      return;\n    }\n\n    this.getClient_(config, (err, client) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      let reqOpts = extend(true, {}, config.reqOpts);\n      reqOpts = projectify_1.replaceProjectIdToken(reqOpts, this.projectId);\n      client[config.method](reqOpts, config.gaxOpts, callback);\n    });\n  }\n  /**\n   * Create a Schema object, representing a schema within the project.\n   * See {@link PubSub#createSchema} or {@link Schema#create} to create a schema.\n   *\n   * @throws {Error} If a name is not provided.\n   *\n   * @param {string} name The ID or name of the schema.\n   * @returns {Schema} A {@link Schema} instance.\n   *\n   * @example\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   *\n   * const schema = pubsub.schema('my-schema');\n   */\n\n\n  schema(idOrName) {\n    return new schema_1.Schema(this, idOrName);\n  }\n  /**\n   * Create a Snapshot object. See {@link Subscription#createSnapshot} to\n   * create a snapshot.\n   *\n   * @throws {Error} If a name is not provided.\n   *\n   * @param {string} name The name of the snapshot.\n   * @returns {Snapshot} A {@link Snapshot} instance.\n   *\n   * @example\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   *\n   * const snapshot = pubsub.snapshot('my-snapshot');\n   */\n\n\n  snapshot(name) {\n    if (typeof name !== 'string') {\n      throw new Error('You must supply a valid name for the snapshot.');\n    }\n\n    return new snapshot_1.Snapshot(this, name);\n  }\n  /**\n   * Create a Subscription object. This command by itself will not run any API\n   * requests. You will receive a {@link Subscription} object,\n   * which will allow you to interact with a subscription.\n   *\n   * @throws {Error} If subscription name is omitted.\n   *\n   * @param {string} name Name of the subscription.\n   * @param {SubscriberOptions} [options] Configuration object.\n   * @returns {Subscription} A {@link Subscription} instance.\n   *\n   * @example\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   *\n   * const subscription = pubsub.subscription('my-subscription');\n   *\n   * // Register a listener for `message` events.\n   * subscription.on('message', function(message) {\n   *   // Called every time a message is received.\n   *   // message.id = ID of the message.\n   *   // message.ackId = ID used to acknowledge the message receival.\n   *   // message.data = Contents of the message.\n   *   // message.attributes = Attributes of the message.\n   *   // message.publishTime = Date when Pub/Sub received the message.\n   * });\n   */\n\n\n  subscription(name, options) {\n    if (!name) {\n      throw new Error('A name must be specified for a subscription.');\n    }\n\n    return new subscription_1.Subscription(this, name, options);\n  }\n  /**\n   * Create a Topic object. See {@link PubSub#createTopic} to create a topic.\n   *\n   * @throws {Error} If a name is not provided.\n   *\n   * @param {string} name The name of the topic.\n   * @param {PublishOptions} [options] Publisher configuration object.\n   * @returns {Topic} A {@link Topic} instance.\n   *\n   * @example\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   *\n   * const topic = pubsub.topic('my-topic');\n   */\n\n\n  topic(name, options) {\n    if (!name) {\n      throw new Error('A name must be specified for a topic.');\n    }\n\n    return new topic_1.Topic(this, name, options);\n  }\n  /**\n   * Validate a schema definition.\n   *\n   * @see [Schemas: validateSchema API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.schemas/validate}\n   *\n   * @throws {Error} if the validation fails.\n   *\n   * @param {ISchema} schema The schema definition you wish to validate.\n   * @param {object} [options] Request configuration options, outlined\n   *   here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n   * @returns {Promise<void>}\n   */\n\n\n  async validateSchema(schema, gaxOpts) {\n    const client = await this.getSchemaClient_();\n    await client.validateSchema({\n      parent: this.name,\n      schema\n    }, gaxOpts);\n  }\n  /*!\n   * Format the name of a project. A project's full name is in the\n   * format of projects/{projectId}.\n   *\n   * The GAPIC client should do this for us, but since we maintain\n   * names rather than IDs, this is simpler.\n   *\n   * @private\n   */\n\n\n  static formatName_(name) {\n    if (typeof name !== 'string') {\n      throw new Error('A name is required to identify a project.');\n    } // Simple check if the name is already formatted.\n\n\n    if (name.indexOf('/') > -1) {\n      return name;\n    }\n\n    return `projects/${name}`;\n  }\n\n}\n\nexports.PubSub = PubSub;\n/**\n * Get a list of the {@link Snapshot} objects as a readable object stream.\n *\n * @method PubSub#getSnapshotsStream\n * @param {GetSnapshotsRequest} [options] Configuration object. See\n *     {@link PubSub#getSnapshots} for a complete list of options.\n * @returns {ReadableStream} A readable stream of {@link Snapshot} instances.\n *\n * @example\n * const {PubSub} = require('@google-cloud/pubsub');\n * const pubsub = new PubSub();\n *\n * pubsub.getSnapshotsStream()\n *   .on('error', console.error)\n *   .on('data', function(snapshot) {\n *     // snapshot is a Snapshot object.\n *   })\n *   .on('end', function() {\n *     // All snapshots retrieved.\n *   });\n *\n * //-\n * // If you anticipate many results, you can end a stream early to prevent\n * // unnecessary processing and API requests.\n * //-\n * pubsub.getSnapshotsStream()\n *   .on('data', function(snapshot) {\n *     this.end();\n *   });\n */\n\n/**\n * Get a list of the {@link Subscription} objects registered to all of\n * your project's topics as a readable object stream.\n *\n * @method PubSub#getSubscriptionsStream\n * @param {GetSubscriptionsRequest} [options] Configuration object. See\n *     {@link PubSub#getSubscriptions} for a complete list of options.\n * @returns {ReadableStream} A readable stream of {@link Subscription} instances.\n *\n * @example\n * const {PubSub} = require('@google-cloud/pubsub');\n * const pubsub = new PubSub();\n *\n * pubsub.getSubscriptionsStream()\n *   .on('error', console.error)\n *   .on('data', function(subscription) {\n *     // subscription is a Subscription object.\n *   })\n *   .on('end', function() {\n *     // All subscriptions retrieved.\n *   });\n *\n * //-\n * // If you anticipate many results, you can end a stream early to prevent\n * // unnecessary processing and API requests.\n * //-\n * pubsub.getSubscriptionsStream()\n *   .on('data', function(subscription) {\n *     this.end();\n *   });\n */\n\n/**\n * Get a list of the {module:pubsub/topic} objects registered to your project as\n * a readable object stream.\n *\n * @method PubSub#getTopicsStream\n * @param {GetTopicsRequest} [options] Configuration object. See\n *     {@link PubSub#getTopics} for a complete list of options.\n * @returns {ReadableStream} A readable stream of {@link Topic} instances.\n *\n * @example\n * const {PubSub} = require('@google-cloud/pubsub');\n * const pubsub = new PubSub();\n *\n * pubsub.getTopicsStream()\n *   .on('error', console.error)\n *   .on('data', function(topic) {\n *     // topic is a Topic object.\n *   })\n *   .on('end', function() {\n *     // All topics retrieved.\n *   });\n *\n * //-\n * // If you anticipate many results, you can end a stream early to prevent\n * // unnecessary processing and API requests.\n * //-\n * pubsub.getTopicsStream()\n *   .on('data', function(topic) {\n *     this.end();\n *   });\n */\n\n/*! Developer Documentation\n *\n * These methods can be auto-paginated.\n */\n\npaginator_1.paginator.extend(PubSub, ['getSnapshots', 'getSubscriptions', 'getTopics']);\n/*! Developer Documentation\n *\n * Existing async methods (except for streams) will return a Promise in the event\n * that a callback is omitted. Future methods will not allow for a callback.\n * (Use .then() on the returned Promise instead.)\n */\n\nutil_1.promisifySome(PubSub, PubSub.prototype, ['close', 'createSubscription', 'createTopic', 'detachSubscription', 'getSnapshots', 'getSubscriptions', 'getTopics']);","map":{"version":3,"sources":["../../src/pubsub.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2014 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PubSub = void 0;\nconst paginator_1 = require(\"@google-cloud/paginator\");\nconst projectify_1 = require(\"@google-cloud/projectify\");\nconst extend = require(\"extend\");\nconst google_auth_library_1 = require(\"google-auth-library\");\nconst gax = require(\"google-gax\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst PKG = require('../../package.json');\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst v1 = require('./v1');\nconst util_1 = require(\"./util\");\nconst schema_1 = require(\"./schema\");\nconst snapshot_1 = require(\"./snapshot\");\nconst subscription_1 = require(\"./subscription\");\nconst topic_1 = require(\"./topic\");\n/**\n * Project ID placeholder.\n * @type {string}\n * @private\n */\nconst PROJECT_ID_PLACEHOLDER = '{{projectId}}';\n/**\n * @typedef {object} ClientConfig\n * @property {string} [projectId] The project ID from the Google Developer's\n *     Console, e.g. 'grape-spaceship-123'. We will also check the environment\n *     variable `GCLOUD_PROJECT` for your project ID. If your app is running in\n *     an environment which supports {@link\n * https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\n * Application Default Credentials}, your project ID will be detected\n * automatically.\n * @property {string} [keyFilename] Full path to the a .json, .pem, or .p12 key\n *     downloaded from the Google Developers Console. If you provide a path to a\n *     JSON file, the `projectId` option above is not necessary. NOTE: .pem and\n *     .p12 require you to specify the `email` option as well.\n * @property {string} [apiEndpoint] The `apiEndpoint` from options will set the\n *     host. If not set, the `PUBSUB_EMULATOR_HOST` environment variable from the\n *     gcloud SDK is honored. We also check the `CLOUD_API_ENDPOINT_OVERRIDES_PUBSUB`\n *     environment variable used by `gcloud alpha pubsub`. Otherwise the actual API\n *     endpoint will be used. Note that if the URL doesn't end in '.googleapis.com',\n *     we will assume that it's an emulator and disable strict SSL checks.\n * @property {string} [email] Account email address. Required when using a .pem\n *     or .p12 keyFilename.\n * @property {object} [credentials] Credentials object.\n * @property {string} [credentials.client_email]\n * @property {string} [credentials.private_key]\n * @property {boolean} [autoRetry=true] Automatically retry requests if the\n *     response is related to rate limits or certain intermittent server errors.\n *     We will exponentially backoff subsequent requests by default.\n * @property {Constructor} [promise] Custom promise module to use instead of\n *     native Promises.\n */\n/**\n * [Cloud Pub/Sub](https://developers.google.com/pubsub/overview) is a\n * reliable, many-to-many, asynchronous messaging service from Cloud\n * Platform.\n *\n * @class\n *\n * @see [Cloud Pub/Sub overview]{@link https://developers.google.com/pubsub/overview}\n *\n * @param {ClientConfig} [options] Configuration options.\n *\n * @example <caption>Import the client library</caption>\n * const {PubSub} = require('@google-cloud/pubsub');\n *\n * @example <caption>Create a client that uses <a href=\"https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\">Application Default Credentials (ADC)</a>:</caption>\n * const pubsub = new PubSub();\n *\n * @example <caption>Create a client with <a href=\"https://cloud.google.com/docs/authentication/production#obtaining_and_providing_service_account_credentials_manually\">explicit credentials</a>:</caption>\n * const pubsub = new PubSub({\n *   projectId: 'your-project-id',\n *   keyFilename: '/path/to/keyfile.json'\n * });\n *\n * @example <caption>include:samples/quickstart.js</caption>\n * region_tag:pubsub_quickstart_create_topic\n * Full quickstart example:\n */\nclass PubSub {\n    constructor(options) {\n        this.getSubscriptionsStream = paginator_1.paginator.streamify('getSubscriptions');\n        this.getSnapshotsStream = paginator_1.paginator.streamify('getSnapshots');\n        this.getTopicsStream = paginator_1.paginator.streamify('getTopics');\n        this.isOpen = true;\n        options = options || {};\n        // Determine what scopes are needed.\n        // It is the union of the scopes on both clients.\n        const clientClasses = [v1.SubscriberClient, v1.PublisherClient];\n        const allScopes = {};\n        for (const clientClass of clientClasses) {\n            for (const scope of clientClass.scopes) {\n                allScopes[scope] = true;\n            }\n        }\n        this.options = Object.assign({\n            libName: 'gccl',\n            libVersion: PKG.version,\n            scopes: Object.keys(allScopes),\n        }, options);\n        /**\n         * @name PubSub#isEmulator\n         * @type {boolean}\n         */\n        this.isEmulator = false;\n        this.determineBaseUrl_();\n        this.api = {};\n        this.auth = new google_auth_library_1.GoogleAuth(this.options);\n        this.projectId = this.options.projectId || PROJECT_ID_PLACEHOLDER;\n        if (this.projectId !== PROJECT_ID_PLACEHOLDER) {\n            this.name = PubSub.formatName_(this.projectId);\n        }\n    }\n    /**\n     * Returns true if we have actually resolved the full project name.\n     *\n     * @returns {boolean} true if the name is resolved.\n     */\n    get isIdResolved() {\n        return this.projectId.indexOf(PROJECT_ID_PLACEHOLDER) < 0;\n    }\n    /**\n     * Closes out this object, releasing any server connections. Note that once\n     * you close a PubSub object, it may not be used again. Any pending operations\n     * (e.g. queued publish messages) will fail. If you have topic or subscription\n     * objects that may have pending operations, you should call close() on those\n     * first if you want any pending messages to be delivered correctly. The\n     * PubSub class doesn't track those.\n     *\n     * @callback EmptyCallback\n     * @returns {Promise<void>}\n     */\n    close(callback) {\n        const definedCallback = callback || (() => { });\n        if (this.isOpen) {\n            this.isOpen = false;\n            this.closeAllClients_()\n                .then(() => { var _a; return (_a = this.schemaClient) === null || _a === void 0 ? void 0 : _a.close(); })\n                .then(() => {\n                definedCallback(null);\n            })\n                .catch(definedCallback);\n        }\n        else {\n            definedCallback(null);\n        }\n    }\n    /**\n     * Create a schema in the project.\n     *\n     * @see [Schemas: create API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.schemas/create}\n     * @see {@link Schema#create}\n     *\n     * @throws {Error} If a schema ID or name is not provided.\n     * @throws {Error} If an invalid SchemaType is provided.\n     * @throws {Error} If an invalid schema definition is provided.\n     *\n     * @param {string} schemaId The name or ID of the subscription.\n     * @param {SchemaType} type The type of the schema (Protobuf, Avro, etc).\n     * @param {string} definition The text describing the schema in terms of the type.\n     * @param {object} [options] Request configuration options, outlined\n     *   here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n     * @returns {Promise<Schema>}\n     *\n     * @example <caption>Create a schema.</caption>\n     * const {PubSub} = require('@google-cloud/pubsub');\n     * const pubsub = new PubSub();\n     *\n     * await pubsub.createSchema(\n     *   'messageType',\n     *   SchemaTypes.Avro,\n     *   '{...avro definition...}'\n     * );\n     */\n    async createSchema(schemaId, type, definition, gaxOpts) {\n        // This populates projectId for us.\n        await this.getClientConfig();\n        const schemaName = schema_1.Schema.formatName_(this.projectId, schemaId);\n        const request = {\n            parent: this.name,\n            schemaId,\n            schema: {\n                name: schemaName,\n                type,\n                definition,\n            },\n        };\n        const client = await this.getSchemaClient_();\n        await client.createSchema(request, gaxOpts);\n        return new schema_1.Schema(this, schemaName);\n    }\n    /**\n     * @typedef {array} CreateSubscriptionResponse\n     * @property {Subscription} 0 The new {@link Subscription}.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback CreateSubscriptionCallback\n     * @param {?Error} err Request error, if any.\n     * @param {Subscription} Subscription\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Options for creating a subscription.\n     *\n     * See a [Subscription\n     * resource](https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.subscriptions).\n     *\n     * @typedef {object} CreateSubscriptionRequest\n     * @property {DeadLetterPolicy} [deadLetterPolicy] A policy that specifies the\n     *     conditions for dead lettering messages in this subscription.\n     * @property {object} [flowControl] Flow control configurations for\n     *     receiving messages. Note that these options do not persist across\n     *     subscription instances.\n     * @property {number} [flowControl.maxBytes] The maximum number of bytes\n     *     in un-acked messages to allow before the subscription pauses incoming\n     *     messages. Defaults to 20% of free memory.\n     * @property {number} [flowControl.maxMessages=Infinity] The maximum number\n     *     of un-acked messages to allow before the subscription pauses incoming\n     *     messages.\n     * @property {object} [gaxOpts] Request configuration options, outlined\n     *     here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n     * @property {number|google.protobuf.Duration} [messageRetentionDuration] Set\n     *     this to override the default duration of 7 days. This value is expected\n     *     in seconds. Acceptable values are in the range of 10 minutes and 7\n     *     days.\n     * @property {string} [pushEndpoint] A URL to a custom endpoint that\n     *     messages should be pushed to.\n     * @property {object} [oidcToken] If specified, Pub/Sub will generate and\n     *     attach an OIDC JWT token as an `Authorization` header in the HTTP\n     *     request for every pushed message. This object should have the same\n     *     structure as [OidcToken]{@link google.pubsub.v1.OidcToken}\n     * @property {boolean} [retainAckedMessages=false] If set, acked messages\n     *     are retained in the subscription's backlog for the length of time\n     *     specified by `options.messageRetentionDuration`.\n     * @property {ExpirationPolicy} [expirationPolicy] A policy that specifies\n     *     the conditions for this subscription's expiration.\n     */\n    /**\n     * Create a subscription to a topic.\n     *\n     * @see [Subscriptions: create API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.subscriptions/create}\n     * @see {@link Topic#createSubscription}\n     *\n     * @throws {Error} If a Topic instance or topic name is not provided.\n     * @throws {Error} If a subscription name is not provided.\n     *\n     * @param {Topic|string} topic The Topic to create a subscription to.\n     * @param {string} name The name of the subscription.\n     * @param {CreateSubscriptionRequest} [options] See a [Subscription resource](https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.subscriptions).\n     * @param {CreateSubscriptionCallback} [callback] Callback function.\n     * @returns {Promise<CreateSubscriptionResponse>}\n     *\n     * @example <caption>Subscribe to a topic.</caption>\n     * const {PubSub} = require('@google-cloud/pubsub');\n     * const pubsub = new PubSub();\n     *\n     * const topic = 'messageCenter';\n     * const name = 'newMessages';\n     *\n     * const callback = function(err, subscription, apiResponse) {};\n     *\n     * pubsub.createSubscription(topic, name, callback);\n     *\n     * @example <caption>If the callback is omitted, we'll return a Promise.</caption>\n     * pubsub.createSubscription(topic, name)\n     *   .then(function(data) {\n     *     const subscription = data[0];\n     *     const apiResponse = data[1];\n     *   });\n     */\n    createSubscription(topic, name, optionsOrCallback, callback) {\n        if (typeof topic !== 'string' && !(topic instanceof topic_1.Topic)) {\n            throw new Error('A Topic is required for a new subscription.');\n        }\n        if (typeof name !== 'string') {\n            throw new Error('A subscription name is required.');\n        }\n        if (typeof topic === 'string') {\n            topic = this.topic(topic);\n        }\n        let options = typeof optionsOrCallback === 'object'\n            ? optionsOrCallback\n            : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        // Make a deep copy of options to not pollute caller object.\n        options = extend(true, {}, options);\n        const gaxOpts = options.gaxOpts;\n        const flowControl = options.flowControl;\n        delete options.gaxOpts;\n        delete options.flowControl;\n        const metadata = subscription_1.Subscription.formatMetadata_(options);\n        let subscriptionCtorOptions = flowControl ? { flowControl } : {};\n        subscriptionCtorOptions = Object.assign(subscriptionCtorOptions, metadata);\n        const subscription = this.subscription(name, subscriptionCtorOptions);\n        const reqOpts = Object.assign(metadata, {\n            topic: topic.name,\n            name: subscription.name,\n        });\n        this.request({\n            client: 'SubscriberClient',\n            method: 'createSubscription',\n            reqOpts,\n            gaxOpts,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            subscription.metadata = resp;\n            callback(null, subscription, resp);\n        });\n    }\n    /**\n     * @typedef {array} CreateTopicResponse\n     * @property {Topic} 0 The new {@link Topic}.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback CreateTopicCallback\n     * @param {?Error} err Request error, if any.\n     * @param {Topic} topic The new {@link Topic}.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Create a topic with the given name.\n     *\n     * @see [Topics: create API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.topics/create}\n     *\n     * @param {string} name Name of the topic.\n     * @param {object} [gaxOpts] Request configuration options, outlined\n     *     here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n     * @param {CreateTopicCallback} [callback] Callback function.\n     * @returns {Promise<CreateTopicResponse>}\n     *\n     * @example\n     * const {PubSub} = require('@google-cloud/pubsub');\n     * const pubsub = new PubSub();\n     *\n     * pubsub.createTopic('my-new-topic', function(err, topic, apiResponse) {\n     *   if (!err) {\n     *     // The topic was created successfully.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * pubsub.createTopic('my-new-topic').then(function(data) {\n     *   const topic = data[0];\n     *   const apiResponse = data[1];\n     * });\n     */\n    createTopic(name, optsOrCallback, callback) {\n        const reqOpts = typeof name === 'string'\n            ? {\n                name,\n            }\n            : name;\n        // We don't allow a blank name, but this will let topic() handle that case.\n        const topic = this.topic(reqOpts.name || '');\n        // Topic#constructor might have canonicalized the name.\n        reqOpts.name = topic.name;\n        const gaxOpts = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n        callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n        this.request({\n            client: 'PublisherClient',\n            method: 'createTopic',\n            reqOpts,\n            gaxOpts,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            topic.metadata = resp;\n            callback(null, topic, resp);\n        });\n    }\n    /**\n     * Detach a subscription with the given name.\n     *\n     * @see [Admin: Pub/Sub administration API Documentation]{@link https://cloud.google.com/pubsub/docs/admin}\n     *\n     * @param {string} name Name of the subscription.\n     * @param {object} [gaxOpts] Request configuration options, outlined\n     *     here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n     * @param {DetachSubscriptionCallback} [callback] Callback function.\n     * @returns {Promise<DetachSubscriptionResponse>}\n     *\n     * @example\n     * const {PubSub} = require('@google-cloud/pubsub');\n     * const pubsub = new PubSub();\n     *\n     * pubsub.detachSubscription('my-sub', (err, topic, apiResponse) => {\n     *   if (!err) {\n     *     // The topic was created successfully.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * pubsub.detachSubscription('my-sub').then(data => {\n     *   const apiResponse = data[0];\n     * });\n     */\n    detachSubscription(name, optsOrCallback, callback) {\n        if (typeof name !== 'string') {\n            throw new Error('A subscription name is required.');\n        }\n        const sub = this.subscription(name);\n        const reqOpts = {\n            subscription: sub.name,\n        };\n        const gaxOpts = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n        callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n        this.request({\n            client: 'PublisherClient',\n            method: 'detachSubscription',\n            reqOpts,\n            gaxOpts: gaxOpts,\n        }, callback);\n    }\n    /**\n     * Determine the appropriate endpoint to use for API requests, first trying\n     * the `apiEndpoint` parameter. If that isn't set, we try the Pub/Sub emulator\n     * environment variable (PUBSUB_EMULATOR_HOST). If that is also null, we try\n     * the standard `gcloud alpha pubsub` environment variable\n     * (CLOUDSDK_API_ENDPOINT_OVERRIDES_PUBSUB). Otherwise the default production\n     * API is used.\n     *\n     * Note that if the URL doesn't end in '.googleapis.com', we will assume that\n     * it's an emulator and disable strict SSL checks.\n     *\n     * @private\n     */\n    determineBaseUrl_() {\n        // We allow an override from the client object options, or from\n        // one of these variables. The CLOUDSDK variable is provided for\n        // compatibility with the `gcloud alpha` utility.\n        const gcloudVarName = 'CLOUDSDK_API_ENDPOINT_OVERRIDES_PUBSUB';\n        const emulatorVarName = 'PUBSUB_EMULATOR_HOST';\n        const apiEndpoint = this.options.apiEndpoint ||\n            process.env[emulatorVarName] ||\n            process.env[gcloudVarName];\n        if (!apiEndpoint) {\n            return;\n        }\n        // Parse the URL into a hostname and port, if possible.\n        const leadingProtocol = new RegExp('^https?://');\n        const trailingSlashes = new RegExp('/*$');\n        const baseUrlParts = apiEndpoint\n            .replace(leadingProtocol, '')\n            .replace(trailingSlashes, '')\n            .split(':');\n        this.options.servicePath = baseUrlParts[0];\n        if (!baseUrlParts[1]) {\n            // No port was given -- figure it out from the protocol.\n            if (apiEndpoint.startsWith('https')) {\n                this.options.port = 443;\n            }\n            else if (apiEndpoint.startsWith('http')) {\n                this.options.port = 80;\n            }\n            else {\n                this.options.port = undefined;\n            }\n        }\n        else {\n            this.options.port = parseInt(baseUrlParts[1], 10);\n        }\n        // If this looks like a GCP URL of some kind, don't go into emulator\n        // mode. Otherwise, supply a fake SSL provider so a real cert isn't\n        // required for running the emulator.\n        const officialUrlMatch = this.options.servicePath.endsWith('.googleapis.com');\n        if (!officialUrlMatch) {\n            const grpcInstance = this.options.grpc || gax.grpc;\n            this.options.sslCreds = grpcInstance.credentials.createInsecure();\n            this.isEmulator = true;\n        }\n        if (!this.options.projectId && process.env.PUBSUB_PROJECT_ID) {\n            this.options.projectId = process.env.PUBSUB_PROJECT_ID;\n        }\n    }\n    /**\n     * Get a list of schemas associated with your project.\n     *\n     * The returned AsyncIterable will resolve to {@link google.pubsub.v1.ISchema} objects.\n     *\n     * This method returns an async iterable. These objects can be adapted\n     * to work in a Promise/then framework, as well as with callbacks, but\n     * this discussion is considered out of scope for these docs.\n     *\n     * @see [Schemas: list API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.schemas/list}\n     * @see [More about async iterators]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of}\n     *\n     * @param {google.pubsub.v1.SchemaView} [view] The type of schema objects\n     *   requested, which should be an enum value from {@link SchemaViews}. Defaults\n     *   to Full.\n     * @param {object} [options] Request configuration options, outlined\n     *   here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n     * @returns {AsyncIterable<ISchema>}\n     *\n     * @example\n     * for await (const s of pubsub.listSchemas()) {\n     *   const moreInfo = await s.get();\n     * }\n     */\n    async *listSchemas(view = schema_1.SchemaViews.Basic, options) {\n        const client = await this.getSchemaClient_();\n        const query = {\n            parent: this.name,\n            view,\n        };\n        for await (const s of client.listSchemasAsync(query, options)) {\n            yield s;\n        }\n    }\n    /**\n     * Query object for listing snapshots.\n     *\n     * @typedef {object} GetSnapshotsRequest\n     * @property {boolean} [autoPaginate=true] Have pagination handled\n     *     automatically.\n     * @property {object} [options.gaxOpts] Request configuration options, outlined\n     *     here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n     * @property {number} [options.pageSize] Maximum number of results to return.\n     * @property {string} [options.pageToken] Page token.\n     */\n    /**\n     * @typedef {array} GetSnapshotsResponse\n     * @property {Snapshot[]} 0 Array of {@link Snapshot} instances.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback GetSnapshotsCallback\n     * @param {?Error} err Request error, if any.\n     * @param {Snapshot[]} snapshots Array of {@link Snapshot} instances.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Get a list of snapshots.\n     *\n     * @param {GetSnapshotsRequest} [query] Query object for listing snapshots.\n     * @param {GetSnapshotsCallback} [callback] Callback function.\n     * @returns {Promise<GetSnapshotsResponse>}\n     *\n     * @example\n     * const {PubSub} = require('@google-cloud/pubsub');\n     * const pubsub = new PubSub();\n     *\n     * pubsub.getSnapshots(function(err, snapshots) {\n     *   if (!err) {\n     *     // snapshots is an array of Snapshot objects.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * pubsub.getSnapshots().then(function(data) {\n     *   const snapshots = data[0];\n     * });\n     */\n    getSnapshots(optsOrCallback, callback) {\n        const options = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n        callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n        const reqOpts = Object.assign({\n            project: PubSub.formatName_(this.projectId),\n        }, options);\n        delete reqOpts.gaxOpts;\n        delete reqOpts.autoPaginate;\n        const gaxOpts = Object.assign({\n            autoPaginate: options.autoPaginate,\n        }, options.gaxOpts);\n        this.request({\n            client: 'SubscriberClient',\n            method: 'listSnapshots',\n            reqOpts,\n            gaxOpts,\n        }, (err, rawSnapshots, ...args) => {\n            let snapshots;\n            if (rawSnapshots) {\n                snapshots = rawSnapshots.map((snapshot) => {\n                    const snapshotInstance = this.snapshot(snapshot.name);\n                    snapshotInstance.metadata = snapshot;\n                    return snapshotInstance;\n                });\n            }\n            callback(err, snapshots, ...args);\n        });\n    }\n    /**\n     * Query object for listing subscriptions.\n     *\n     * @typedef {object} GetSubscriptionsRequest\n     * @property {boolean} [autoPaginate=true] Have pagination handled\n     *     automatically.\n     * @property {object} [options.gaxOpts] Request configuration options, outlined\n     *     here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n     * @property {number} [options.pageSize] Maximum number of results to return.\n     * @property {string} [options.pageToken] Page token.\n     * @param {string|Topic} options.topic - The name of the topic to\n     *     list subscriptions from.\n     */\n    /**\n     * @typedef {array} GetSubscriptionsResponse\n     * @property {Subscription[]} 0 Array of {@link Subscription} instances.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback GetSubscriptionsCallback\n     * @param {?Error} err Request error, if any.\n     * @param {Subscription[]} subscriptions Array of {@link Subscription} instances.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Get a list of the subscriptions registered to all of your project's topics.\n     * You may optionally provide a query object as the first argument to\n     * customize the response.\n     *\n     * Your provided callback will be invoked with an error object if an API error\n     * occurred or an array of {@link Subscription} objects.\n     *\n     * To get subscriptions for a topic, see {@link Topic}.\n     *\n     * @see [Subscriptions: list API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.subscriptions/list}\n     *\n     * @param {GetSubscriptionsRequest} [query] Query object for listing subscriptions.\n     * @param {GetSubscriptionsCallback} [callback] Callback function.\n     * @returns {Promise<GetSubscriptionsResponse>}\n     *\n     * @example\n     * const {PubSub} = require('@google-cloud/pubsub');\n     * const pubsub = new PubSub();\n     *\n     * pubsub.getSubscriptions(function(err, subscriptions) {\n     *   if (!err) {\n     *     // subscriptions is an array of Subscription objects.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * pubsub.getSubscriptions().then(function(data) {\n     *   const subscriptions = data[0];\n     * });\n     */\n    getSubscriptions(optsOrCallback, callback) {\n        const options = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n        callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n        let topic = options.topic;\n        if (topic) {\n            if (!(topic instanceof topic_1.Topic)) {\n                topic = this.topic(topic);\n            }\n            return topic.getSubscriptions(options, callback);\n        }\n        const reqOpts = Object.assign({}, options);\n        reqOpts.project = 'projects/' + this.projectId;\n        delete reqOpts.gaxOpts;\n        delete reqOpts.autoPaginate;\n        const gaxOpts = Object.assign({\n            autoPaginate: options.autoPaginate,\n        }, options.gaxOpts);\n        this.request({\n            client: 'SubscriberClient',\n            method: 'listSubscriptions',\n            reqOpts,\n            gaxOpts,\n        }, (err, rawSubs, ...args) => {\n            let subscriptions;\n            if (rawSubs) {\n                subscriptions = rawSubs.map((sub) => {\n                    const subscriptionInstance = this.subscription(sub.name);\n                    subscriptionInstance.metadata = sub;\n                    return subscriptionInstance;\n                });\n            }\n            callback(err, subscriptions, ...args);\n        });\n    }\n    /**\n     * Query object for listing topics.\n     *\n     * @typedef {object} GetTopicsRequest\n     * @property {boolean} [autoPaginate=true] Have pagination handled\n     *     automatically.\n     * @property {object} [options.gaxOpts] Request configuration options, outlined\n     *     here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n     * @property {number} [options.pageSize] Maximum number of results to return.\n     * @property {string} [options.pageToken] Page token.\n     */\n    /**\n     * @typedef {array} GetTopicsResponse\n     * @property {Topic[]} 0 Array of {@link Topic} instances.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback GetTopicsCallback\n     * @param {?Error} err Request error, if any.\n     * @param {Topic[]} topics Array of {@link Topic} instances.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Get a list of the topics registered to your project. You may optionally\n     * provide a query object as the first argument to customize the response.\n     *\n     * @see [Topics: list API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.topics/list}\n     *\n     * @param {GetTopicsRequest} [query] Query object for listing topics.\n     * @param {GetTopicsCallback} [callback] Callback function.\n     * @returns {Promise<GetTopicsResponse>}\n     *\n     * @example\n     * const {PubSub} = require('@google-cloud/pubsub');\n     * const pubsub = new PubSub();\n     *\n     * pubsub.getTopics(function(err, topics) {\n     *   if (!err) {\n     *     // topics is an array of Topic objects.\n     *   }\n     * });\n     *\n     * //-\n     * // Customize the query.\n     * //-\n     * pubsub.getTopics({\n     *   pageSize: 3\n     * }, function(err, topics) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * pubsub.getTopics().then(function(data) {\n     *   const topics = data[0];\n     * });\n     */\n    getTopics(optsOrCallback, callback) {\n        const options = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n        callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n        const reqOpts = Object.assign({\n            project: 'projects/' + this.projectId,\n        }, options);\n        delete reqOpts.gaxOpts;\n        delete reqOpts.autoPaginate;\n        const gaxOpts = Object.assign({\n            autoPaginate: options.autoPaginate,\n        }, options.gaxOpts);\n        this.request({\n            client: 'PublisherClient',\n            method: 'listTopics',\n            reqOpts,\n            gaxOpts,\n        }, (err, rawTopics, ...args) => {\n            let topics;\n            if (rawTopics) {\n                topics = rawTopics.map(topic => {\n                    const topicInstance = this.topic(topic.name);\n                    topicInstance.metadata = topic;\n                    return topicInstance;\n                });\n            }\n            callback(err, topics, ...args);\n        });\n    }\n    /**\n     * Retrieve a client configuration, suitable for passing into a GAPIC\n     * 'v1' class constructor. This will fill out projectId, emulator URLs,\n     * and so forth.\n     *\n     * @returns {Promise<ClientConfig>} the filled client configuration.\n     */\n    async getClientConfig() {\n        if (!this.projectId || this.projectId === PROJECT_ID_PLACEHOLDER) {\n            let projectId;\n            try {\n                projectId = await this.auth.getProjectId();\n            }\n            catch (e) {\n                if (!this.isEmulator) {\n                    throw e;\n                }\n                projectId = '';\n            }\n            this.projectId = projectId;\n            this.name = PubSub.formatName_(this.projectId);\n            this.options.projectId = projectId;\n        }\n        return this.options;\n    }\n    /**\n     * Gets a schema client, creating one if needed.\n     * @private\n     */\n    async getSchemaClient_() {\n        if (!this.schemaClient) {\n            const options = await this.getClientConfig();\n            this.schemaClient = new v1.SchemaServiceClient(options);\n        }\n        return this.schemaClient;\n    }\n    /**\n     * Callback function to PubSub.getClient_().\n     * @private\n     * @callback GetClientCallback\n     * @param err - Error, if any.\n     * @param gaxClient - The gax client specified in RequestConfig.client.\n     *                    Typed any since it's importing Javascript source.\n     */\n    /**\n     * Get the PubSub client object.\n     *\n     * @private\n     *\n     * @param {object} config Configuration object.\n     * @param {object} config.gaxOpts GAX options.\n     * @param {function} config.method The gax method to call.\n     * @param {object} config.reqOpts Request options.\n     * @param {function} [callback] The callback function.\n     */\n    getClient_(config, callback) {\n        this.getClientAsync_(config).then(client => callback(null, client), callback);\n    }\n    /**\n     * Get the PubSub client object.\n     *\n     * @private\n     *\n     * @param {object} config Configuration object.\n     * @param {object} config.gaxOpts GAX options.\n     * @param {function} config.method The gax method to call.\n     * @param {object} config.reqOpts Request options.\n     * @returns {Promise}\n     */\n    async getClientAsync_(config) {\n        // Make sure we've got a fully created config with projectId and such.\n        const options = await this.getClientConfig();\n        let gaxClient = this.api[config.client];\n        if (!gaxClient) {\n            // Lazily instantiate client.\n            gaxClient = new v1[config.client](options);\n            this.api[config.client] = gaxClient;\n        }\n        return gaxClient;\n    }\n    /**\n     * Close all open client objects.\n     *\n     * @private\n     *\n     * @returns {Promise}\n     */\n    async closeAllClients_() {\n        const promises = [];\n        for (const clientConfig of Object.keys(this.api)) {\n            const gaxClient = this.api[clientConfig];\n            promises.push(gaxClient.close());\n            delete this.api[clientConfig];\n        }\n        await Promise.all(promises);\n    }\n    /**\n     * Funnel all API requests through this method, to be sure we have a project\n     * ID.\n     *\n     * @private\n     *\n     * @param {object} config Configuration object.\n     * @param {object} config.gaxOpts GAX options.\n     * @param {function} config.method The gax method to call.\n     * @param {object} config.reqOpts Request options.\n     * @param {function} [callback] The callback function.\n     */\n    request(config, callback) {\n        // This prevents further requests, in case any publishers were hanging around.\n        if (!this.isOpen) {\n            const statusObject = {\n                code: 0,\n                details: 'Cannot use a closed PubSub object.',\n                metadata: null,\n            };\n            const err = new Error(statusObject.details);\n            Object.assign(err, statusObject);\n            callback(err);\n            return;\n        }\n        this.getClient_(config, (err, client) => {\n            if (err) {\n                callback(err);\n                return;\n            }\n            let reqOpts = extend(true, {}, config.reqOpts);\n            reqOpts = projectify_1.replaceProjectIdToken(reqOpts, this.projectId);\n            client[config.method](reqOpts, config.gaxOpts, callback);\n        });\n    }\n    /**\n     * Create a Schema object, representing a schema within the project.\n     * See {@link PubSub#createSchema} or {@link Schema#create} to create a schema.\n     *\n     * @throws {Error} If a name is not provided.\n     *\n     * @param {string} name The ID or name of the schema.\n     * @returns {Schema} A {@link Schema} instance.\n     *\n     * @example\n     * const {PubSub} = require('@google-cloud/pubsub');\n     * const pubsub = new PubSub();\n     *\n     * const schema = pubsub.schema('my-schema');\n     */\n    schema(idOrName) {\n        return new schema_1.Schema(this, idOrName);\n    }\n    /**\n     * Create a Snapshot object. See {@link Subscription#createSnapshot} to\n     * create a snapshot.\n     *\n     * @throws {Error} If a name is not provided.\n     *\n     * @param {string} name The name of the snapshot.\n     * @returns {Snapshot} A {@link Snapshot} instance.\n     *\n     * @example\n     * const {PubSub} = require('@google-cloud/pubsub');\n     * const pubsub = new PubSub();\n     *\n     * const snapshot = pubsub.snapshot('my-snapshot');\n     */\n    snapshot(name) {\n        if (typeof name !== 'string') {\n            throw new Error('You must supply a valid name for the snapshot.');\n        }\n        return new snapshot_1.Snapshot(this, name);\n    }\n    /**\n     * Create a Subscription object. This command by itself will not run any API\n     * requests. You will receive a {@link Subscription} object,\n     * which will allow you to interact with a subscription.\n     *\n     * @throws {Error} If subscription name is omitted.\n     *\n     * @param {string} name Name of the subscription.\n     * @param {SubscriberOptions} [options] Configuration object.\n     * @returns {Subscription} A {@link Subscription} instance.\n     *\n     * @example\n     * const {PubSub} = require('@google-cloud/pubsub');\n     * const pubsub = new PubSub();\n     *\n     * const subscription = pubsub.subscription('my-subscription');\n     *\n     * // Register a listener for `message` events.\n     * subscription.on('message', function(message) {\n     *   // Called every time a message is received.\n     *   // message.id = ID of the message.\n     *   // message.ackId = ID used to acknowledge the message receival.\n     *   // message.data = Contents of the message.\n     *   // message.attributes = Attributes of the message.\n     *   // message.publishTime = Date when Pub/Sub received the message.\n     * });\n     */\n    subscription(name, options) {\n        if (!name) {\n            throw new Error('A name must be specified for a subscription.');\n        }\n        return new subscription_1.Subscription(this, name, options);\n    }\n    /**\n     * Create a Topic object. See {@link PubSub#createTopic} to create a topic.\n     *\n     * @throws {Error} If a name is not provided.\n     *\n     * @param {string} name The name of the topic.\n     * @param {PublishOptions} [options] Publisher configuration object.\n     * @returns {Topic} A {@link Topic} instance.\n     *\n     * @example\n     * const {PubSub} = require('@google-cloud/pubsub');\n     * const pubsub = new PubSub();\n     *\n     * const topic = pubsub.topic('my-topic');\n     */\n    topic(name, options) {\n        if (!name) {\n            throw new Error('A name must be specified for a topic.');\n        }\n        return new topic_1.Topic(this, name, options);\n    }\n    /**\n     * Validate a schema definition.\n     *\n     * @see [Schemas: validateSchema API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.schemas/validate}\n     *\n     * @throws {Error} if the validation fails.\n     *\n     * @param {ISchema} schema The schema definition you wish to validate.\n     * @param {object} [options] Request configuration options, outlined\n     *   here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n     * @returns {Promise<void>}\n     */\n    async validateSchema(schema, gaxOpts) {\n        const client = await this.getSchemaClient_();\n        await client.validateSchema({\n            parent: this.name,\n            schema,\n        }, gaxOpts);\n    }\n    /*!\n     * Format the name of a project. A project's full name is in the\n     * format of projects/{projectId}.\n     *\n     * The GAPIC client should do this for us, but since we maintain\n     * names rather than IDs, this is simpler.\n     *\n     * @private\n     */\n    static formatName_(name) {\n        if (typeof name !== 'string') {\n            throw new Error('A name is required to identify a project.');\n        }\n        // Simple check if the name is already formatted.\n        if (name.indexOf('/') > -1) {\n            return name;\n        }\n        return `projects/${name}`;\n    }\n}\nexports.PubSub = PubSub;\n/**\n * Get a list of the {@link Snapshot} objects as a readable object stream.\n *\n * @method PubSub#getSnapshotsStream\n * @param {GetSnapshotsRequest} [options] Configuration object. See\n *     {@link PubSub#getSnapshots} for a complete list of options.\n * @returns {ReadableStream} A readable stream of {@link Snapshot} instances.\n *\n * @example\n * const {PubSub} = require('@google-cloud/pubsub');\n * const pubsub = new PubSub();\n *\n * pubsub.getSnapshotsStream()\n *   .on('error', console.error)\n *   .on('data', function(snapshot) {\n *     // snapshot is a Snapshot object.\n *   })\n *   .on('end', function() {\n *     // All snapshots retrieved.\n *   });\n *\n * //-\n * // If you anticipate many results, you can end a stream early to prevent\n * // unnecessary processing and API requests.\n * //-\n * pubsub.getSnapshotsStream()\n *   .on('data', function(snapshot) {\n *     this.end();\n *   });\n */\n/**\n * Get a list of the {@link Subscription} objects registered to all of\n * your project's topics as a readable object stream.\n *\n * @method PubSub#getSubscriptionsStream\n * @param {GetSubscriptionsRequest} [options] Configuration object. See\n *     {@link PubSub#getSubscriptions} for a complete list of options.\n * @returns {ReadableStream} A readable stream of {@link Subscription} instances.\n *\n * @example\n * const {PubSub} = require('@google-cloud/pubsub');\n * const pubsub = new PubSub();\n *\n * pubsub.getSubscriptionsStream()\n *   .on('error', console.error)\n *   .on('data', function(subscription) {\n *     // subscription is a Subscription object.\n *   })\n *   .on('end', function() {\n *     // All subscriptions retrieved.\n *   });\n *\n * //-\n * // If you anticipate many results, you can end a stream early to prevent\n * // unnecessary processing and API requests.\n * //-\n * pubsub.getSubscriptionsStream()\n *   .on('data', function(subscription) {\n *     this.end();\n *   });\n */\n/**\n * Get a list of the {module:pubsub/topic} objects registered to your project as\n * a readable object stream.\n *\n * @method PubSub#getTopicsStream\n * @param {GetTopicsRequest} [options] Configuration object. See\n *     {@link PubSub#getTopics} for a complete list of options.\n * @returns {ReadableStream} A readable stream of {@link Topic} instances.\n *\n * @example\n * const {PubSub} = require('@google-cloud/pubsub');\n * const pubsub = new PubSub();\n *\n * pubsub.getTopicsStream()\n *   .on('error', console.error)\n *   .on('data', function(topic) {\n *     // topic is a Topic object.\n *   })\n *   .on('end', function() {\n *     // All topics retrieved.\n *   });\n *\n * //-\n * // If you anticipate many results, you can end a stream early to prevent\n * // unnecessary processing and API requests.\n * //-\n * pubsub.getTopicsStream()\n *   .on('data', function(topic) {\n *     this.end();\n *   });\n */\n/*! Developer Documentation\n *\n * These methods can be auto-paginated.\n */\npaginator_1.paginator.extend(PubSub, ['getSnapshots', 'getSubscriptions', 'getTopics']);\n/*! Developer Documentation\n *\n * Existing async methods (except for streams) will return a Promise in the event\n * that a callback is omitted. Future methods will not allow for a callback.\n * (Use .then() on the returned Promise instead.)\n */\nutil_1.promisifySome(PubSub, PubSub.prototype, [\n    'close',\n    'createSubscription',\n    'createTopic',\n    'detachSubscription',\n    'getSnapshots',\n    'getSubscriptions',\n    'getTopics',\n]);\n//# sourceMappingURL=pubsub.js.map"]},"metadata":{},"sourceType":"script"}