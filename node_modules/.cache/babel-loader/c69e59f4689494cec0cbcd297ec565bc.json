{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PullRetry = exports.RETRY_CODES = void 0;\n/*!\n * Copyright 2019 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst google_gax_1 = require(\"google-gax\");\n/*!\n * retryable grpc.status codes\n */\n\n\nexports.RETRY_CODES = [google_gax_1.grpc.status.DEADLINE_EXCEEDED, google_gax_1.grpc.status.RESOURCE_EXHAUSTED, google_gax_1.grpc.status.ABORTED, google_gax_1.grpc.status.INTERNAL, google_gax_1.grpc.status.UNAVAILABLE, google_gax_1.grpc.status.CANCELLED];\n/**\n * Used to track pull requests and determine if additional requests should be\n * made, etc.\n *\n * @class\n * @private\n */\n\nclass PullRetry {\n  constructor() {\n    this.failures = 0;\n  }\n  /**\n   * Generates a timeout that can be used for applying a backoff based on the\n   * current number of failed requests.\n   *\n   * @see {@link https://cloud.google.com/iot/docs/how-tos/exponential-backoff}\n   * @private\n   * @returns {number}\n   */\n\n\n  createTimeout() {\n    if (this.failures === 0) {\n      return 0;\n    }\n\n    return Math.pow(2, this.failures) * 1000 + Math.floor(Math.random() * 1000);\n  }\n  /**\n   * Determines if a request grpc.status should be retried.\n   *\n   * Deadlines behave kind of unexpectedly on streams, rather than using it as\n   * an indicator of when to give up trying to connect, it actually dictates\n   * how long the stream should stay open. Because of this, it is virtually\n   * impossible to determine whether or not a deadline error is the result of\n   * the server closing the stream or if we timed out waiting for a connection.\n   *\n   * @private\n   * @param {object} grpc.status The request grpc.status.\n   * @returns {boolean}\n   */\n\n\n  retry(err) {\n    if (err.code === google_gax_1.grpc.status.OK || err.code === google_gax_1.grpc.status.DEADLINE_EXCEEDED) {\n      this.failures = 0;\n    } else {\n      this.failures += 1;\n    }\n\n    if (err.code === google_gax_1.grpc.status.UNAVAILABLE && err.details && err.details.match(/Server shutdownNow invoked/)) {\n      return true;\n    }\n\n    return exports.RETRY_CODES.includes(err.code);\n  }\n\n}\n\nexports.PullRetry = PullRetry;","map":{"version":3,"sources":["../../src/pull-retry.ts"],"names":[],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;AAcG;;AACH,MAAA,YAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AAEA;;AAEG;;;AACU,OAAA,CAAA,WAAA,GAA6B,CACxC,YAAA,CAAA,IAAA,CAAK,MAAL,CAAY,iBAD4B,EAExC,YAAA,CAAA,IAAA,CAAK,MAAL,CAAY,kBAF4B,EAGxC,YAAA,CAAA,IAAA,CAAK,MAAL,CAAY,OAH4B,EAIxC,YAAA,CAAA,IAAA,CAAK,MAAL,CAAY,QAJ4B,EAKxC,YAAA,CAAA,IAAA,CAAK,MAAL,CAAY,WAL4B,EAMxC,YAAA,CAAA,IAAA,CAAK,MAAL,CAAY,SAN4B,CAA7B;AASb;;;;;;AAMG;;AACH,MAAa,SAAb,CAAsB;AAAtB,EAAA,WAAA,GAAA;AACU,SAAA,QAAA,GAAW,CAAX;AAgDT;AA/CC;;;;;;;AAOG;;;AACH,EAAA,aAAa,GAAA;AACX,QAAI,KAAK,QAAL,KAAkB,CAAtB,EAAyB;AACvB,aAAO,CAAP;AACD;;AACD,WAAO,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,KAAK,QAAjB,IAA6B,IAA7B,GAAoC,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,KAAgB,IAA3B,CAA3C;AACD;AACD;;;;;;;;;;;;AAYG;;;AACH,EAAA,KAAK,CAAC,GAAD,EAAuB;AAC1B,QACE,GAAG,CAAC,IAAJ,KAAa,YAAA,CAAA,IAAA,CAAK,MAAL,CAAY,EAAzB,IACA,GAAG,CAAC,IAAJ,KAAa,YAAA,CAAA,IAAA,CAAK,MAAL,CAAY,iBAF3B,EAGE;AACA,WAAK,QAAL,GAAgB,CAAhB;AACD,KALD,MAKO;AACL,WAAK,QAAL,IAAiB,CAAjB;AACD;;AAED,QACE,GAAG,CAAC,IAAJ,KAAa,YAAA,CAAA,IAAA,CAAK,MAAL,CAAY,WAAzB,IACA,GAAG,CAAC,OADJ,IAEA,GAAG,CAAC,OAAJ,CAAY,KAAZ,CAAkB,4BAAlB,CAHF,EAIE;AACA,aAAO,IAAP;AACD;;AAED,WAAO,OAAA,CAAA,WAAA,CAAY,QAAZ,CAAqB,GAAG,CAAC,IAAzB,CAAP;AACD;;AAhDmB;;AAAtB,OAAA,CAAA,SAAA,GAAA,SAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PullRetry = exports.RETRY_CODES = void 0;\n/*!\n * Copyright 2019 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst google_gax_1 = require(\"google-gax\");\n/*!\n * retryable grpc.status codes\n */\nexports.RETRY_CODES = [\n    google_gax_1.grpc.status.DEADLINE_EXCEEDED,\n    google_gax_1.grpc.status.RESOURCE_EXHAUSTED,\n    google_gax_1.grpc.status.ABORTED,\n    google_gax_1.grpc.status.INTERNAL,\n    google_gax_1.grpc.status.UNAVAILABLE,\n    google_gax_1.grpc.status.CANCELLED,\n];\n/**\n * Used to track pull requests and determine if additional requests should be\n * made, etc.\n *\n * @class\n * @private\n */\nclass PullRetry {\n    constructor() {\n        this.failures = 0;\n    }\n    /**\n     * Generates a timeout that can be used for applying a backoff based on the\n     * current number of failed requests.\n     *\n     * @see {@link https://cloud.google.com/iot/docs/how-tos/exponential-backoff}\n     * @private\n     * @returns {number}\n     */\n    createTimeout() {\n        if (this.failures === 0) {\n            return 0;\n        }\n        return Math.pow(2, this.failures) * 1000 + Math.floor(Math.random() * 1000);\n    }\n    /**\n     * Determines if a request grpc.status should be retried.\n     *\n     * Deadlines behave kind of unexpectedly on streams, rather than using it as\n     * an indicator of when to give up trying to connect, it actually dictates\n     * how long the stream should stay open. Because of this, it is virtually\n     * impossible to determine whether or not a deadline error is the result of\n     * the server closing the stream or if we timed out waiting for a connection.\n     *\n     * @private\n     * @param {object} grpc.status The request grpc.status.\n     * @returns {boolean}\n     */\n    retry(err) {\n        if (err.code === google_gax_1.grpc.status.OK ||\n            err.code === google_gax_1.grpc.status.DEADLINE_EXCEEDED) {\n            this.failures = 0;\n        }\n        else {\n            this.failures += 1;\n        }\n        if (err.code === google_gax_1.grpc.status.UNAVAILABLE &&\n            err.details &&\n            err.details.match(/Server shutdownNow invoked/)) {\n            return true;\n        }\n        return exports.RETRY_CODES.includes(err.code);\n    }\n}\nexports.PullRetry = PullRetry;\n//# sourceMappingURL=pull-retry.js.map"]},"metadata":{},"sourceType":"script"}