{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '..';\nimport { BaggageImpl } from './internal/baggage-impl';\nimport { baggageEntryMetadataSymbol } from './internal/symbol';\n/**\n * Create a new Baggage with optional entries\n *\n * @param entries An array of baggage entries the new baggage should contain\n */\n\nexport function createBaggage(entries) {\n  if (entries === void 0) {\n    entries = {};\n  }\n\n  return new BaggageImpl(new Map(Object.entries(entries)));\n}\n/**\n * Create a serializable BaggageEntryMetadata object from a string.\n *\n * @param str string metadata. Format is currently not defined by the spec and has no special meaning.\n *\n */\n\nexport function baggageEntryMetadataFromString(str) {\n  if (typeof str !== 'string') {\n    diag.error(\"Cannot create baggage metadata from unknown type: \" + typeof str);\n    str = '';\n  }\n\n  return {\n    __TYPE__: baggageEntryMetadataSymbol,\n    toString: function () {\n      return str;\n    }\n  };\n}","map":{"version":3,"sources":["../../../src/baggage/utils.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAEH,SAAS,IAAT,QAAqB,IAArB;AACA,SAAS,WAAT,QAA4B,yBAA5B;AACA,SAAS,0BAAT,QAA2C,mBAA3C;AAGA;;;;AAIG;;AACH,OAAM,SAAU,aAAV,CACJ,OADI,EACsC;AAA1C,MAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,EAAA;AAA0C;;AAE1C,SAAO,IAAI,WAAJ,CAAgB,IAAI,GAAJ,CAAQ,MAAM,CAAC,OAAP,CAAe,OAAf,CAAR,CAAhB,CAAP;AACD;AAED;;;;;AAKG;;AACH,OAAM,SAAU,8BAAV,CACJ,GADI,EACO;AAEX,MAAI,OAAO,GAAP,KAAe,QAAnB,EAA6B;AAC3B,IAAA,IAAI,CAAC,KAAL,CACE,uDAAqD,OAAO,GAD9D;AAGA,IAAA,GAAG,GAAG,EAAN;AACD;;AAED,SAAO;AACL,IAAA,QAAQ,EAAE,0BADL;AAEL,IAAA,QAAQ,EAAA,YAAA;AACN,aAAO,GAAP;AACD;AAJI,GAAP;AAMD","sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '..';\nimport { BaggageImpl } from './internal/baggage-impl';\nimport { baggageEntryMetadataSymbol } from './internal/symbol';\n/**\n * Create a new Baggage with optional entries\n *\n * @param entries An array of baggage entries the new baggage should contain\n */\nexport function createBaggage(entries) {\n    if (entries === void 0) { entries = {}; }\n    return new BaggageImpl(new Map(Object.entries(entries)));\n}\n/**\n * Create a serializable BaggageEntryMetadata object from a string.\n *\n * @param str string metadata. Format is currently not defined by the spec and has no special meaning.\n *\n */\nexport function baggageEntryMetadataFromString(str) {\n    if (typeof str !== 'string') {\n        diag.error(\"Cannot create baggage metadata from unknown type: \" + typeof str);\n        str = '';\n    }\n    return {\n        __TYPE__: baggageEntryMetadataSymbol,\n        toString: function () {\n            return str;\n        },\n    };\n}\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"module"}