{"ast":null,"code":"var _jsxFileName = \"F:\\\\Rlab\\\\client\\\\src\\\\Components\\\\Home\\\\DeviceDashBoard\\\\DeviceDashBoard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Navbar from '../../Shared/Navbar';\nimport DeveiceMeter from '../Locations/DeveiceMeter';\nimport firebase from 'firebase/app';\nimport logo from '../../../Resorces/logo_RLAB.png';\nimport './DeviceDashBoard.css';\nimport 'firebase/firestore';\nimport { BrowserRouter as Router, Switch, Route, Link, useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nif (!firebase.apps.length) {\n  firebase.initializeApp({\n    apiKey: \"AIzaSyBXXL_2svIOIRYEArzq7Ai8G8xLQTTTqrU\",\n    authDomain: \"iot-comm.firebaseapp.com\",\n    projectId: \"iot-comm\",\n    storageBucket: \"iot-comm.appspot.com\",\n    messagingSenderId: \"707981957974\",\n    appId: \"1:707981957974:web:ce3e1124d7f329487b14f7\",\n    measurementId: \"G-VTC2W6HFRH\"\n  });\n} else {\n  firebase.app(); // if already initialized, use that one\n}\n\nconst db = firebase.firestore();\n\nconst DeviceDashBoard = () => {\n  _s();\n\n  let {\n    format,\n    id\n  } = useParams();\n  const [status, setStatus] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  function arrayFunc(arr, key) {\n    let resultArray = [];\n\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i]._id === key) {\n        resultArray = arr[i];\n      }\n    }\n\n    return resultArray;\n  }\n\n  ;\n  useEffect(() => {\n    const userDb = db.collection(\"SOLARPAN01\").onSnapshot(querySnapshot => {\n      const getDataFirebase = [];\n      querySnapshot.forEach(doc => {\n        getDataFirebase.push({ ...doc.data(),\n          key: doc.id\n        });\n      });\n      console.log({\n        getDataFirebase\n      });\n\n      if (getDataFirebase.length > 0) {// const functionalArray = arrayFunc(getDataFirebase, id)\n        // setStatus(functionalArray)\n        // setLoading(false)\n      }\n    });\n    return userDb;\n\n    if (format === \"ENER01\") {\n      const userDb = db.collection(\"SOLARPAN01\").onSnapshot(querySnapshot => {\n        const getDataFirebase = [];\n        querySnapshot.forEach(doc => {\n          getDataFirebase.push({ ...doc.data(),\n            key: doc.id\n          });\n        });\n        console.log({\n          getDataFirebase\n        });\n\n        if (getDataFirebase.length > 0) {// const functionalArray = arrayFunc(getDataFirebase, id)\n          // setStatus(functionalArray)\n          // setLoading(false)\n        }\n      });\n      return userDb;\n    } else if (format === \"RTD01\") {\n      const userDb = db.collection(\"RTD0000001\").onSnapshot(querySnapshot => {\n        const getDataFirebase = [];\n        querySnapshot.forEach(doc => {\n          getDataFirebase.push({ ...doc.data(),\n            key: doc.id\n          });\n        });\n\n        if (getDataFirebase.length > 0) {\n          const functionalArray = arrayFunc(getDataFirebase, id);\n          setStatus(functionalArray);\n          setLoading(false);\n        }\n      });\n      return userDb;\n    } else if (format === \"GTY01\") {\n      const userDb = db.collection(\"GTY0000001\").where().onSnapshot(querySnapshot => {\n        const getDataFirebase = [];\n        querySnapshot.forEach(doc => {\n          getDataFirebase.push({ ...doc.data(),\n            key: doc.id\n          });\n        });\n\n        if (getDataFirebase.length > 0) {\n          const functionalArray = arrayFunc(getDataFirebase, id);\n          setStatus(functionalArray);\n          setLoading(false);\n        }\n      });\n      return userDb;\n    }\n  }, [loading, format, id]);\n  console.log({\n    status\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-md-3 dashboard-navbar\",\n      style: {\n        margin: '0',\n        padding: '0'\n      },\n      children: /*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-md-9 dashboard-background text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"\",\n        style: {\n          width: '20%'\n        },\n        className: \"mt-5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-light mt-2\",\n        children: [\"Format: \", format]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DeveiceMeter, {\n        data: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DeviceDashBoard, \"17I7W9F+t1hXfJB7n94B51jQjOk=\", false, function () {\n  return [useParams];\n});\n\n_c = DeviceDashBoard;\nexport default DeviceDashBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeviceDashBoard\");","map":{"version":3,"sources":["F:/Rlab/client/src/Components/Home/DeviceDashBoard/DeviceDashBoard.js"],"names":["React","useEffect","useState","Navbar","DeveiceMeter","firebase","logo","BrowserRouter","Router","Switch","Route","Link","useParams","apps","length","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","db","firestore","DeviceDashBoard","format","id","status","setStatus","loading","setLoading","arrayFunc","arr","key","resultArray","i","_id","userDb","collection","onSnapshot","querySnapshot","getDataFirebase","forEach","doc","push","data","console","log","functionalArray","where","margin","padding","width"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport Navbar from '../../Shared/Navbar';\r\nimport DeveiceMeter from '../Locations/DeveiceMeter';\r\nimport firebase from 'firebase/app';\r\nimport logo from '../../../Resorces/logo_RLAB.png';\r\nimport './DeviceDashBoard.css';\r\nimport 'firebase/firestore';\r\nimport {BrowserRouter as Router, Switch, Route, Link, useParams} from \"react-router-dom\";\r\n\r\nif (!firebase.apps.length) {\r\n    firebase.initializeApp({\r\n        apiKey: \"AIzaSyBXXL_2svIOIRYEArzq7Ai8G8xLQTTTqrU\",\r\n  authDomain: \"iot-comm.firebaseapp.com\",\r\n  projectId: \"iot-comm\",\r\n  storageBucket: \"iot-comm.appspot.com\",\r\n  messagingSenderId: \"707981957974\",\r\n  appId: \"1:707981957974:web:ce3e1124d7f329487b14f7\",\r\n  measurementId: \"G-VTC2W6HFRH\"\r\n    });\r\n} else {\r\n    firebase.app(); // if already initialized, use that one\r\n}\r\n\r\nconst db = firebase.firestore();\r\n\r\nconst DeviceDashBoard = () => {\r\n    let {format, id} = useParams();\r\n\r\n    const [status, setStatus] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n    function arrayFunc(arr, key) {\r\n        let resultArray = [];\r\n        for (let i = 0; i < arr.length; i++) {\r\n            if (arr[i]._id === key) {\r\n                resultArray = arr[i];\r\n            }\r\n        }\r\n        return resultArray\r\n    };\r\n\r\n    useEffect(() => {\r\n        const userDb = db.collection(\"SOLARPAN01\").onSnapshot((querySnapshot) => {\r\n            const getDataFirebase = [];\r\n            querySnapshot.forEach((doc) => {\r\n                getDataFirebase.push({\r\n                    ...doc.data(),\r\n                    key: doc.id\r\n                });\r\n            });\r\n            console.log({getDataFirebase});\r\n            if (getDataFirebase.length > 0) {\r\n                \r\n                // const functionalArray = arrayFunc(getDataFirebase, id)\r\n                // setStatus(functionalArray)\r\n                // setLoading(false)\r\n            }\r\n        });\r\n    return userDb\r\n        if (format === \"ENER01\") {\r\n            const userDb = db.collection(\"SOLARPAN01\").onSnapshot((querySnapshot) => {\r\n                    const getDataFirebase = [];\r\n                    querySnapshot.forEach((doc) => {\r\n                        getDataFirebase.push({\r\n                            ...doc.data(),\r\n                            key: doc.id\r\n                        });\r\n                    });\r\n                    console.log({getDataFirebase});\r\n                    if (getDataFirebase.length > 0) {\r\n                        \r\n                        // const functionalArray = arrayFunc(getDataFirebase, id)\r\n                        // setStatus(functionalArray)\r\n                        // setLoading(false)\r\n                    }\r\n                });\r\n            return userDb\r\n        } else if (format === \"RTD01\") {\r\n            const userDb = db\r\n                .collection(\"RTD0000001\")\r\n                .onSnapshot((querySnapshot) => {\r\n                    const getDataFirebase = [];\r\n                    querySnapshot.forEach((doc) => {\r\n                        getDataFirebase.push({\r\n                            ...doc.data(),\r\n                            key: doc.id\r\n                        });\r\n                    });\r\n\r\n                    if (getDataFirebase.length > 0) {\r\n                        const functionalArray = arrayFunc(getDataFirebase, id)\r\n                        setStatus(functionalArray)\r\n                        setLoading(false)\r\n                    }\r\n                });\r\n            return userDb\r\n        } else if (format === \"GTY01\") {\r\n            const userDb = db\r\n                .collection(\"GTY0000001\")\r\n                .where()\r\n                .onSnapshot((querySnapshot) => {\r\n                    const getDataFirebase = [];\r\n                    querySnapshot.forEach((doc) => {\r\n                        getDataFirebase.push({\r\n                            ...doc.data(),\r\n                            key: doc.id\r\n                        });\r\n                    });\r\n\r\n                    if (getDataFirebase.length > 0) {\r\n                        const functionalArray = arrayFunc(getDataFirebase, id)\r\n                        setStatus(functionalArray)\r\n                        setLoading(false)\r\n                    }\r\n                });\r\n            return userDb\r\n        }\r\n\r\n    }, [loading, format, id]);\r\n   console.log({status})\r\n    return (\r\n        <div className='row'>\r\n            <div\r\n                className=\"col-md-3 dashboard-navbar\"\r\n                style={{\r\n                    margin: '0',\r\n                    padding: '0'\r\n                }}>\r\n                <Navbar/>\r\n            </div>\r\n            <div className=\"col-md-9 dashboard-background text-center\">\r\n                <img\r\n                    src={logo}\r\n                    alt=\"\"\r\n                    style={{\r\n                        width: '20%'\r\n                    }}\r\n                    className='mt-5'/>\r\n                <h1 className='text-light mt-2'>Format: {format}</h1>\r\n                <DeveiceMeter data={status}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DeviceDashBoard;"]},"metadata":{},"sourceType":"module"}