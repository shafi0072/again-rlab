{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Snapshot = void 0;\n\nconst promisify_1 = require(\"@google-cloud/promisify\");\n\nconst subscription_1 = require(\"./subscription\");\n/**\n * A Snapshot object will give you access to your Cloud Pub/Sub snapshot.\n *\n * Snapshots are sometimes retrieved when using various methods:\n *\n * - {@link PubSub#getSnapshots}\n * - {@link PubSub#getSnapshotsStream}\n * - {@link PubSub#snapshot}\n *\n * Snapshots may be created with:\n *\n * - {@link Subscription#createSnapshot}\n *\n * You can use snapshots to seek a subscription to a specific point in time.\n *\n * - {@link Subscription#seek}\n *\n * @class\n *\n * @example\n * //-\n * // From {@link PubSub#getSnapshots}:\n * //-\n * pubsub.getSnapshots((err, snapshots) => {\n *   // `snapshots` is an array of Snapshot objects.\n * });\n *\n * //-\n * // From {@link PubSub#getSnapshotsStream}:\n * //-\n * pubsub.getSnapshotsStream()\n *   .on('error', console.error)\n *   .on('data', (snapshot) => {\n *     // `snapshot` is a Snapshot object.\n *   });\n *\n * //-\n * // From {@link PubSub#snapshot}:\n * //-\n * const snapshot = pubsub.snapshot('my-snapshot');\n * // snapshot is a Snapshot object.\n *\n * //-\n * // Create a snapshot with {module:pubsub/subscription#createSnapshot}:\n * //-\n * const subscription = pubsub.subscription('my-subscription');\n *\n * subscription.createSnapshot('my-snapshot', (err, snapshot) => {\n *   if (!err) {\n *     // `snapshot` is a Snapshot object.\n *   }\n * });\n *\n * //-\n * // Seek to your snapshot:\n * //-\n * const subscription = pubsub.subscription('my-subscription');\n *\n * subscription.seek('my-snapshot', (err) => {\n *   if (err) {\n *     // Error handling omitted.\n *   }\n * });\n */\n\n\nclass Snapshot {\n  constructor(parent, name) {\n    this.parent = parent;\n    this.name = Snapshot.formatName_(parent.projectId, name);\n  }\n  /**\n   * Delete the snapshot.\n   *\n   * @param {function} [callback] The callback function.\n   * @param {?error} callback.err An error returned while making this\n   *     request.\n   * @param {object} callback.apiResponse The full API response from the\n   *     service.\n   *\n   * @example\n   * snapshot.delete((err, apiResponse) => {});\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * snapshot.delete().then((data) => {\n   *   const apiResponse = data[0];\n   * });\n   */\n\n\n  delete(callback) {\n    const reqOpts = {\n      snapshot: this.name\n    };\n    this.parent.request({\n      client: 'SubscriberClient',\n      method: 'deleteSnapshot',\n      reqOpts\n    }, callback);\n  }\n  /*@\n   * Format the name of a snapshot. A snapshot's full name is in the format of\n   * projects/{projectId}/snapshots/{snapshotName}\n   *\n   * @private\n   */\n\n\n  static formatName_(projectId, name) {\n    return 'projects/' + projectId + '/snapshots/' + name.split('/').pop();\n  }\n  /**\n   * Create a snapshot with the given name.\n   *\n   * **This is only available if you accessed this object through\n   * {@link Subscription#snapshot}.**\n   *\n   * @method Snapshot#create\n   * @param {string} name Name of the snapshot.\n   * @param {function} [callback] The callback function.\n   * @param {?error} callback.err An error from the API call, may be null.\n   * @param {Snapshot} callback.snapshot The newly created\n   *     snapshot.\n   * @param {object} callback.apiResponse The full API response from the\n   *     service.\n   *\n   * @example\n   * const subscription = pubsub.subscription('my-subscription');\n   * const snapshot = subscription.snapshot('my-snapshot');\n   *\n   * const callback = (err, snapshot, apiResponse) => {\n   *   if (!err) {\n   *     // The snapshot was created successfully.\n   *   }\n   * };\n   *\n   * snapshot.create('my-snapshot', callback);\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * snapshot.create('my-snapshot').then((data) => {\n   *   const snapshot = data[0];\n   *   const apiResponse = data[1];\n   * });\n   */\n\n\n  create(optsOrCallback, callback) {\n    if (!(this.parent instanceof subscription_1.Subscription)) {\n      throw new Error('This is only available if you accessed this object through Subscription#snapshot');\n    }\n\n    const options = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n    callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n    return this.parent.createSnapshot(this.name, options, (err, snapshot, resp) => {\n      if (err) {\n        callback(err, null, resp);\n        return;\n      }\n\n      Object.assign(this, snapshot);\n      callback(null, this, resp);\n    });\n  }\n  /**\n   * Seeks an existing subscription to the snapshot.\n   *\n   * **This is only available if you accessed this object through\n   * {@link Subscription#snapshot}.**\n   *\n   * @method Snapshot#seek\n   * @param {function} callback The callback function.\n   * @param {?error} callback.err An error from the API call, may be null.\n   * @param {object} callback.apiResponse The full API response from the\n   *     service.\n   *\n   * @example\n   * const subscription = pubsub.subscription('my-subscription');\n   * const snapshot = subscription.snapshot('my-snapshot');\n   *\n   * snapshot.seek((err, apiResponse) => {});\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * snapshot.seek().then((data) => {\n   *   const apiResponse = data[0];\n   * });\n   */\n\n\n  seek(gaxOpts, callback) {\n    if (!(this.parent instanceof subscription_1.Subscription)) {\n      throw new Error('This is only available if you accessed this object through Subscription#snapshot');\n    }\n\n    return this.parent.seek(this.name, gaxOpts, callback);\n  }\n\n}\n\nexports.Snapshot = Snapshot;\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n\npromisify_1.promisifyAll(Snapshot);","map":{"version":3,"sources":["../../src/snapshot.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;AAcG;;;;;;;AAEH,MAAA,WAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AAWA,MAAA,cAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+DG;;;AACH,MAAa,QAAb,CAAqB;AAInB,EAAA,WAAA,CAAY,MAAZ,EAA2C,IAA3C,EAAuD;AACrD,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,IAAL,GAAY,QAAQ,CAAC,WAAT,CAAqB,MAAM,CAAC,SAA5B,EAAuC,IAAvC,CAAZ;AACD;AAID;;;;;;;;;;;;;;;;;;AAkBG;;;AACH,EAAA,MAAM,CAAC,QAAD,EAAyB;AAC7B,UAAM,OAAO,GAAG;AACd,MAAA,QAAQ,EAAE,KAAK;AADD,KAAhB;AAIA,SAAK,MAAL,CAAY,OAAZ,CACE;AACE,MAAA,MAAM,EAAE,kBADV;AAEE,MAAA,MAAM,EAAE,gBAFV;AAGE,MAAA;AAHF,KADF,EAME,QANF;AAQD;AAED;;;;;AAKG;;;AACe,SAAX,WAAW,CAAC,SAAD,EAAoB,IAApB,EAAgC;AAChD,WAAO,cAAc,SAAd,GAA0B,aAA1B,GAA0C,IAAI,CAAC,KAAL,CAAW,GAAX,EAAgB,GAAhB,EAAjD;AACD;AAKD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCG;;;AACH,EAAA,MAAM,CACJ,cADI,EAEJ,QAFI,EAE6B;AAEjC,QAAI,EAAE,KAAK,MAAL,YAAuB,cAAA,CAAA,YAAzB,CAAJ,EAA4C;AAC1C,YAAM,IAAI,KAAJ,CACJ,kFADI,CAAN;AAGD;;AAED,UAAM,OAAO,GAAG,OAAO,cAAP,KAA0B,QAA1B,GAAqC,cAArC,GAAsD,EAAtE;AACA,IAAA,QAAQ,GAAG,OAAO,cAAP,KAA0B,UAA1B,GAAuC,cAAvC,GAAwD,QAAnE;AAEA,WAAO,KAAK,MAAL,CAAY,cAAZ,CACL,KAAK,IADA,EAEL,OAFK,EAGL,CAAC,GAAD,EAAM,QAAN,EAAgB,IAAhB,KAAwB;AACtB,UAAI,GAAJ,EAAS;AACP,QAAA,QAAS,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,CAAT;AACA;AACD;;AACD,MAAA,MAAM,CAAC,MAAP,CAAc,IAAd,EAAoB,QAApB;AACA,MAAA,QAAS,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAAT;AACD,KAVI,CAAP;AAYD;AAKD;;;;;;;;;;;;;;;;;;;;;;;;AAwBG;;;AACH,EAAA,IAAI,CACF,OADE,EAEF,QAFE,EAEqB;AAEvB,QAAI,EAAE,KAAK,MAAL,YAAuB,cAAA,CAAA,YAAzB,CAAJ,EAA4C;AAC1C,YAAM,IAAI,KAAJ,CACJ,kFADI,CAAN;AAGD;;AACD,WAAO,KAAK,MAAL,CAAY,IAAZ,CAAiB,KAAK,IAAtB,EAA4B,OAA5B,EAAqD,QAArD,CAAP;AACD;;AA9JkB;;AAArB,OAAA,CAAA,QAAA,GAAA,QAAA;AAiKA;;;;AAIG;;AACH,WAAA,CAAA,YAAA,CAAa,QAAb","sourceRoot":"","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Snapshot = void 0;\nconst promisify_1 = require(\"@google-cloud/promisify\");\nconst subscription_1 = require(\"./subscription\");\n/**\n * A Snapshot object will give you access to your Cloud Pub/Sub snapshot.\n *\n * Snapshots are sometimes retrieved when using various methods:\n *\n * - {@link PubSub#getSnapshots}\n * - {@link PubSub#getSnapshotsStream}\n * - {@link PubSub#snapshot}\n *\n * Snapshots may be created with:\n *\n * - {@link Subscription#createSnapshot}\n *\n * You can use snapshots to seek a subscription to a specific point in time.\n *\n * - {@link Subscription#seek}\n *\n * @class\n *\n * @example\n * //-\n * // From {@link PubSub#getSnapshots}:\n * //-\n * pubsub.getSnapshots((err, snapshots) => {\n *   // `snapshots` is an array of Snapshot objects.\n * });\n *\n * //-\n * // From {@link PubSub#getSnapshotsStream}:\n * //-\n * pubsub.getSnapshotsStream()\n *   .on('error', console.error)\n *   .on('data', (snapshot) => {\n *     // `snapshot` is a Snapshot object.\n *   });\n *\n * //-\n * // From {@link PubSub#snapshot}:\n * //-\n * const snapshot = pubsub.snapshot('my-snapshot');\n * // snapshot is a Snapshot object.\n *\n * //-\n * // Create a snapshot with {module:pubsub/subscription#createSnapshot}:\n * //-\n * const subscription = pubsub.subscription('my-subscription');\n *\n * subscription.createSnapshot('my-snapshot', (err, snapshot) => {\n *   if (!err) {\n *     // `snapshot` is a Snapshot object.\n *   }\n * });\n *\n * //-\n * // Seek to your snapshot:\n * //-\n * const subscription = pubsub.subscription('my-subscription');\n *\n * subscription.seek('my-snapshot', (err) => {\n *   if (err) {\n *     // Error handling omitted.\n *   }\n * });\n */\nclass Snapshot {\n    constructor(parent, name) {\n        this.parent = parent;\n        this.name = Snapshot.formatName_(parent.projectId, name);\n    }\n    /**\n     * Delete the snapshot.\n     *\n     * @param {function} [callback] The callback function.\n     * @param {?error} callback.err An error returned while making this\n     *     request.\n     * @param {object} callback.apiResponse The full API response from the\n     *     service.\n     *\n     * @example\n     * snapshot.delete((err, apiResponse) => {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * snapshot.delete().then((data) => {\n     *   const apiResponse = data[0];\n     * });\n     */\n    delete(callback) {\n        const reqOpts = {\n            snapshot: this.name,\n        };\n        this.parent.request({\n            client: 'SubscriberClient',\n            method: 'deleteSnapshot',\n            reqOpts,\n        }, callback);\n    }\n    /*@\n     * Format the name of a snapshot. A snapshot's full name is in the format of\n     * projects/{projectId}/snapshots/{snapshotName}\n     *\n     * @private\n     */\n    static formatName_(projectId, name) {\n        return 'projects/' + projectId + '/snapshots/' + name.split('/').pop();\n    }\n    /**\n     * Create a snapshot with the given name.\n     *\n     * **This is only available if you accessed this object through\n     * {@link Subscription#snapshot}.**\n     *\n     * @method Snapshot#create\n     * @param {string} name Name of the snapshot.\n     * @param {function} [callback] The callback function.\n     * @param {?error} callback.err An error from the API call, may be null.\n     * @param {Snapshot} callback.snapshot The newly created\n     *     snapshot.\n     * @param {object} callback.apiResponse The full API response from the\n     *     service.\n     *\n     * @example\n     * const subscription = pubsub.subscription('my-subscription');\n     * const snapshot = subscription.snapshot('my-snapshot');\n     *\n     * const callback = (err, snapshot, apiResponse) => {\n     *   if (!err) {\n     *     // The snapshot was created successfully.\n     *   }\n     * };\n     *\n     * snapshot.create('my-snapshot', callback);\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * snapshot.create('my-snapshot').then((data) => {\n     *   const snapshot = data[0];\n     *   const apiResponse = data[1];\n     * });\n     */\n    create(optsOrCallback, callback) {\n        if (!(this.parent instanceof subscription_1.Subscription)) {\n            throw new Error('This is only available if you accessed this object through Subscription#snapshot');\n        }\n        const options = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n        callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n        return this.parent.createSnapshot(this.name, options, (err, snapshot, resp) => {\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            Object.assign(this, snapshot);\n            callback(null, this, resp);\n        });\n    }\n    /**\n     * Seeks an existing subscription to the snapshot.\n     *\n     * **This is only available if you accessed this object through\n     * {@link Subscription#snapshot}.**\n     *\n     * @method Snapshot#seek\n     * @param {function} callback The callback function.\n     * @param {?error} callback.err An error from the API call, may be null.\n     * @param {object} callback.apiResponse The full API response from the\n     *     service.\n     *\n     * @example\n     * const subscription = pubsub.subscription('my-subscription');\n     * const snapshot = subscription.snapshot('my-snapshot');\n     *\n     * snapshot.seek((err, apiResponse) => {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * snapshot.seek().then((data) => {\n     *   const apiResponse = data[0];\n     * });\n     */\n    seek(gaxOpts, callback) {\n        if (!(this.parent instanceof subscription_1.Subscription)) {\n            throw new Error('This is only available if you accessed this object through Subscription#snapshot');\n        }\n        return this.parent.seek(this.name, gaxOpts, callback);\n    }\n}\nexports.Snapshot = Snapshot;\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\npromisify_1.promisifyAll(Snapshot);\n//# sourceMappingURL=snapshot.js.map"]},"metadata":{},"sourceType":"script"}