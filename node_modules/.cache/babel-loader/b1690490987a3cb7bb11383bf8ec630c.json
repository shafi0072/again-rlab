{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Encodings = exports.SchemaViews = exports.SchemaTypes = exports.Schema = void 0; // Unlike the earlier classes, this one does not do its own gax access.\n// Rather, it calls back through the schemaClient instance PubSub holds.\n// This class is a very lightweight syntactic wrapper around the GAPIC client.\n\n/**\n * A Schema object allows you to interact with a Cloud Pub/Sub schema.\n *\n * This should only be instantiated by the PubSub class. To obtain an\n * instance for end user usage, call pubsub.schema().\n *\n * @class\n * @param {PubSub} pubsub The PubSub object creating this object.\n * @param {id} id name or ID of the schema.\n *\n * @example <caption>Creating an instance of this class.</caption>\n * const {PubSub} = require('@google-cloud/pubsub');\n * const pubsub = new PubSub();\n *\n * const schema = pubsub.schema('my-schema');\n *\n * @example <caption>Getting the details of a schema. Note that Schema\n * methods do not provide a callback interface. Use .then() or await.</caption>\n * const {PubSub} = require('@google-cloud/pubsub');\n * const pubsub = new PubSub();\n *\n * const schema = pubsub.schema('my-schema');\n * schema.get(SchemaViews.Basic).then(console.log);\n */\n\nclass Schema {\n  constructor(pubsub, idOrName) {\n    /**\n     * The parent {@link PubSub} instance of this topic instance.\n     * @name Schema#pubsub\n     * @type {PubSub}\n     */\n    this.pubsub = pubsub;\n    /**\n     * The fully qualified name of this schema. We will qualify this if\n     * it's only an ID passed (assuming the parent project). Unfortunately,\n     * we might not be able to do that if our pubsub's client hasn't been\n     * initialized. In that case, we just set the id and get the name later.\n     * @name Schema#id\n     * @type {string}\n     */\n\n    this.id = idOrName.indexOf('/') >= 0 ? idOrName.substr(idOrName.lastIndexOf('/') + 1) : idOrName;\n  }\n  /**\n   * Return the fully qualified name of this schema.\n   *\n   * Note that we have to verify that we have a projectId before returning this,\n   * so we have to check that first.\n   *\n   * @return {Promise<string>} a Promise that resolves to the full schema name\n   */\n\n\n  async getName() {\n    if (!this.name_) {\n      if (!this.pubsub.isIdResolved) {\n        await this.pubsub.getClientConfig();\n      }\n\n      this.name_ = Schema.formatName_(this.pubsub.projectId, this.id);\n    }\n\n    return this.name_;\n  }\n  /**\n   * Create a schema.\n   *\n   * @see [Schemas: create API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.schemas/create}\n   *\n   * @throws {Error} if the schema type is incorrect.\n   * @throws {Error} if the definition is invalid.\n   *\n   * @param {SchemaType} type The type of the schema (Protobuf, Avro, etc).\n   * @param {string} definition The text describing the schema in terms of the type.\n   * @param {object} [options] Request configuration options, outlined\n   *   here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n   * @returns {Promise<void>}\n   *\n   * @example <caption>Create a schema.</caption>\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   *\n   * const schema = pubsub.schema('messageType');\n   * await schema.create(\n   *   SchemaTypes.Avro,\n   *   '{...avro definition...}'\n   * );\n   */\n\n\n  async create(type, definition, gaxOpts) {\n    const name = await this.getName();\n    await this.pubsub.createSchema(name, type, definition, gaxOpts);\n  }\n  /**\n   * Get full information about the schema from the service.\n   *\n   * @see [Schemas: getSchema API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.schemas/get}\n   *\n   * @param {google.pubsub.v1.SchemaView} [view] The type of schema object\n   *   requested, which should be an enum value from {@link SchemaViews}. Defaults\n   *   to Full.\n   * @param {object} [options] Request configuration options, outlined\n   *   here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n   * @returns {Promise<ISchema>}\n   */\n\n\n  async get(view = exports.SchemaViews.Full, gaxOpts) {\n    const client = await this.pubsub.getSchemaClient_();\n    const name = await this.getName();\n    const [schema] = await client.getSchema({\n      name,\n      view\n    }, gaxOpts);\n    return schema;\n  }\n  /**\n   * Delete the schema from the project.\n   *\n   * @see [Schemas: deleteSchema API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.schemas/delete}\n   *\n   * @param {object} [options] Request configuration options, outlined\n   *   here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n   * @returns {Promise<void>}\n   */\n\n\n  async delete(gaxOpts) {\n    const client = await this.pubsub.getSchemaClient_();\n    const name = await this.getName();\n    await client.deleteSchema({\n      name\n    }, gaxOpts);\n  }\n  /**\n   * Validate a message against this schema's definition.\n   *\n   * If you would like to validate a message against an arbitrary schema, please\n   * use the {@link SchemaServiceClient} GAPIC class directly, using your\n   * {@link PubSub} instance's configuration, via {@link PubSub#getClientConfig}.\n   *\n   * @see [Schemas: validateMessage API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.schemas/validateMessage}\n   *\n   * @throws {Error} if the validation fails.\n   * @throws {Error} if other parameters are invalid.\n   *\n   * @param {string} message The message to validate.\n   * @param {Encoding | \"JSON\" | \"BINARY\"} encoding The encoding of the message to validate.\n   * @param {object} [options] Request configuration options, outlined\n   *   here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n   * @returns {Promise<void>}\n   */\n\n\n  async validateMessage(message, encoding, gaxOpts) {\n    const client = await this.pubsub.getSchemaClient_();\n    const name = await this.getName();\n    await client.validateMessage({\n      parent: this.pubsub.name,\n      name,\n      message,\n      encoding\n    }, gaxOpts);\n  }\n  /*!\n   * Format the name of a schema. A schema's full name is in the\n   * format of projects/{projectId}/schemas/{schemaName}.\n   *\n   * The GAPIC client should do this for us, but since we maintain\n   * names rather than IDs, this is simpler.\n   *\n   * @private\n   */\n\n\n  static formatName_(projectId, nameOrId) {\n    if (typeof nameOrId !== 'string') {\n      throw new Error('A name is required to identify a schema.');\n    } // Simple check if the name is already formatted.\n\n\n    if (nameOrId.indexOf('/') > -1) {\n      return nameOrId;\n    }\n\n    return `projects/${projectId}/schemas/${nameOrId}`;\n  }\n  /**\n   * Translates the schema attributes in messages delivered from Pub/Sub.\n   * All resulting fields may end up being blank.\n   */\n\n\n  static metadataFromMessage(attributes) {\n    return {\n      name: attributes['googclient_schemaname'],\n      encoding: attributes['googclient_schemaencoding']\n    };\n  }\n\n}\n\nexports.Schema = Schema; // Also export these for JavaScript compatible usage.\n\nexports.SchemaTypes = {\n  ProtocolBuffer: 'PROTOCOL_BUFFER',\n  Avro: 'AVRO'\n};\nexports.SchemaViews = {\n  Basic: 'BASIC',\n  Full: 'FULL'\n}; // These are not schema-specific, but this seems to be the\n// only place that exports methods that need them.\n\nexports.Encodings = {\n  Json: 'JSON',\n  Binary: 'BINARY'\n};","map":{"version":3,"sources":["../../src/schema.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Encodings = exports.SchemaViews = exports.SchemaTypes = exports.Schema = void 0;\n// Unlike the earlier classes, this one does not do its own gax access.\n// Rather, it calls back through the schemaClient instance PubSub holds.\n// This class is a very lightweight syntactic wrapper around the GAPIC client.\n/**\n * A Schema object allows you to interact with a Cloud Pub/Sub schema.\n *\n * This should only be instantiated by the PubSub class. To obtain an\n * instance for end user usage, call pubsub.schema().\n *\n * @class\n * @param {PubSub} pubsub The PubSub object creating this object.\n * @param {id} id name or ID of the schema.\n *\n * @example <caption>Creating an instance of this class.</caption>\n * const {PubSub} = require('@google-cloud/pubsub');\n * const pubsub = new PubSub();\n *\n * const schema = pubsub.schema('my-schema');\n *\n * @example <caption>Getting the details of a schema. Note that Schema\n * methods do not provide a callback interface. Use .then() or await.</caption>\n * const {PubSub} = require('@google-cloud/pubsub');\n * const pubsub = new PubSub();\n *\n * const schema = pubsub.schema('my-schema');\n * schema.get(SchemaViews.Basic).then(console.log);\n */\nclass Schema {\n    constructor(pubsub, idOrName) {\n        /**\n         * The parent {@link PubSub} instance of this topic instance.\n         * @name Schema#pubsub\n         * @type {PubSub}\n         */\n        this.pubsub = pubsub;\n        /**\n         * The fully qualified name of this schema. We will qualify this if\n         * it's only an ID passed (assuming the parent project). Unfortunately,\n         * we might not be able to do that if our pubsub's client hasn't been\n         * initialized. In that case, we just set the id and get the name later.\n         * @name Schema#id\n         * @type {string}\n         */\n        this.id =\n            idOrName.indexOf('/') >= 0\n                ? idOrName.substr(idOrName.lastIndexOf('/') + 1)\n                : idOrName;\n    }\n    /**\n     * Return the fully qualified name of this schema.\n     *\n     * Note that we have to verify that we have a projectId before returning this,\n     * so we have to check that first.\n     *\n     * @return {Promise<string>} a Promise that resolves to the full schema name\n     */\n    async getName() {\n        if (!this.name_) {\n            if (!this.pubsub.isIdResolved) {\n                await this.pubsub.getClientConfig();\n            }\n            this.name_ = Schema.formatName_(this.pubsub.projectId, this.id);\n        }\n        return this.name_;\n    }\n    /**\n     * Create a schema.\n     *\n     * @see [Schemas: create API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.schemas/create}\n     *\n     * @throws {Error} if the schema type is incorrect.\n     * @throws {Error} if the definition is invalid.\n     *\n     * @param {SchemaType} type The type of the schema (Protobuf, Avro, etc).\n     * @param {string} definition The text describing the schema in terms of the type.\n     * @param {object} [options] Request configuration options, outlined\n     *   here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n     * @returns {Promise<void>}\n     *\n     * @example <caption>Create a schema.</caption>\n     * const {PubSub} = require('@google-cloud/pubsub');\n     * const pubsub = new PubSub();\n     *\n     * const schema = pubsub.schema('messageType');\n     * await schema.create(\n     *   SchemaTypes.Avro,\n     *   '{...avro definition...}'\n     * );\n     */\n    async create(type, definition, gaxOpts) {\n        const name = await this.getName();\n        await this.pubsub.createSchema(name, type, definition, gaxOpts);\n    }\n    /**\n     * Get full information about the schema from the service.\n     *\n     * @see [Schemas: getSchema API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.schemas/get}\n     *\n     * @param {google.pubsub.v1.SchemaView} [view] The type of schema object\n     *   requested, which should be an enum value from {@link SchemaViews}. Defaults\n     *   to Full.\n     * @param {object} [options] Request configuration options, outlined\n     *   here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n     * @returns {Promise<ISchema>}\n     */\n    async get(view = exports.SchemaViews.Full, gaxOpts) {\n        const client = await this.pubsub.getSchemaClient_();\n        const name = await this.getName();\n        const [schema] = await client.getSchema({\n            name,\n            view,\n        }, gaxOpts);\n        return schema;\n    }\n    /**\n     * Delete the schema from the project.\n     *\n     * @see [Schemas: deleteSchema API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.schemas/delete}\n     *\n     * @param {object} [options] Request configuration options, outlined\n     *   here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n     * @returns {Promise<void>}\n     */\n    async delete(gaxOpts) {\n        const client = await this.pubsub.getSchemaClient_();\n        const name = await this.getName();\n        await client.deleteSchema({\n            name,\n        }, gaxOpts);\n    }\n    /**\n     * Validate a message against this schema's definition.\n     *\n     * If you would like to validate a message against an arbitrary schema, please\n     * use the {@link SchemaServiceClient} GAPIC class directly, using your\n     * {@link PubSub} instance's configuration, via {@link PubSub#getClientConfig}.\n     *\n     * @see [Schemas: validateMessage API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.schemas/validateMessage}\n     *\n     * @throws {Error} if the validation fails.\n     * @throws {Error} if other parameters are invalid.\n     *\n     * @param {string} message The message to validate.\n     * @param {Encoding | \"JSON\" | \"BINARY\"} encoding The encoding of the message to validate.\n     * @param {object} [options] Request configuration options, outlined\n     *   here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n     * @returns {Promise<void>}\n     */\n    async validateMessage(message, encoding, gaxOpts) {\n        const client = await this.pubsub.getSchemaClient_();\n        const name = await this.getName();\n        await client.validateMessage({\n            parent: this.pubsub.name,\n            name,\n            message,\n            encoding,\n        }, gaxOpts);\n    }\n    /*!\n     * Format the name of a schema. A schema's full name is in the\n     * format of projects/{projectId}/schemas/{schemaName}.\n     *\n     * The GAPIC client should do this for us, but since we maintain\n     * names rather than IDs, this is simpler.\n     *\n     * @private\n     */\n    static formatName_(projectId, nameOrId) {\n        if (typeof nameOrId !== 'string') {\n            throw new Error('A name is required to identify a schema.');\n        }\n        // Simple check if the name is already formatted.\n        if (nameOrId.indexOf('/') > -1) {\n            return nameOrId;\n        }\n        return `projects/${projectId}/schemas/${nameOrId}`;\n    }\n    /**\n     * Translates the schema attributes in messages delivered from Pub/Sub.\n     * All resulting fields may end up being blank.\n     */\n    static metadataFromMessage(attributes) {\n        return {\n            name: attributes['googclient_schemaname'],\n            encoding: attributes['googclient_schemaencoding'],\n        };\n    }\n}\nexports.Schema = Schema;\n// Also export these for JavaScript compatible usage.\nexports.SchemaTypes = {\n    ProtocolBuffer: 'PROTOCOL_BUFFER',\n    Avro: 'AVRO',\n};\nexports.SchemaViews = {\n    Basic: 'BASIC',\n    Full: 'FULL',\n};\n// These are not schema-specific, but this seems to be the\n// only place that exports methods that need them.\nexports.Encodings = {\n    Json: 'JSON',\n    Binary: 'BINARY',\n};\n//# sourceMappingURL=schema.js.map"]},"metadata":{},"sourceType":"script"}