{"ast":null,"code":"var _jsxFileName = \"C:\\\\remotePackRlab\\\\remotePackRlab\\\\src\\\\Components\\\\Home\\\\DeviceDashBoard\\\\DeviceDashBoard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Navbar from '../../Shared/Navbar';\nimport DeveiceMeter from '../Locations/DeveiceMeter';\nimport logo from '../../../Resorces/logo_RLAB.png';\nimport './DeviceDashBoard.css';\nimport { BrowserRouter as Router, Switch, Route, Link, useParams } from \"react-router-dom\";\nimport db from '../../FirebaseConfig/Firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DeviceDashBoard = () => {\n  _s();\n\n  let {\n    format,\n    id\n  } = useParams();\n  const [status, setStatus] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [pastData, setPastData] = useState({\n    present: true,\n    week: false,\n    day: false,\n    halfDay: false,\n    sixH: false,\n    oneH: false\n  });\n\n  function arrayFunc(arr, key) {\n    let resultArray = [];\n\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i]._id === key) {\n        resultArray = arr[i];\n      }\n    }\n\n    return resultArray;\n  }\n\n  ; //  function for liner search start\n\n  function maxNumber(arr) {\n    let i;\n    let max = arr[0].dateSocket;\n\n    for (i = 1; i < arr.length; i++) {\n      if (arr[i].dateSocket > max) {\n        max = arr[i];\n      }\n    } // const lastItem =  await arr[arr.length - 1]\n\n\n    return max;\n  } // finish |^ linear search \n  //shorting data \n\n\n  async function selectionSort(arr) {\n    let min; //start passes.\n\n    for (let i = 0; i < arr.length; i++) {\n      //index of the smallest element to be the ith element.\n      min = i; //Check through the rest of the array for a lesser element\n\n      for (let j = i + 1; j < arr.length; j++) {\n        if (arr[j].dateSocket < arr[min].dateSocket) {\n          min = j;\n        }\n      } //compare the indexes\n\n\n      if (min !== i) {\n        //swap\n        [arr[i].dateSocket, arr[min]].dateSocket = [arr[min].dateSocket, arr[i].dateSocket];\n      }\n    }\n\n    return arr;\n  }\n\n  const unixTimeX1 = useEffect(() => {\n    if (pastData.present === true) {\n      const userDb = db.collection(\"RealTime\").doc(id).onSnapshot(querySnapshot => {\n        setStatus({ ...querySnapshot.data(),\n          key: querySnapshot.id\n        }); // const maxNumber1 = maxNumber(getDataFirebase);\n      });\n      return userDb; //       \n    }\n  }, [loading, format, id, pastData.present]);\n  console.log({\n    status\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-md-1\",\n      children: /*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-md-11 text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"\",\n        style: {\n          width: '20%'\n        },\n        className: \"mt-5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(DeveiceMeter, {\n        data: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DeviceDashBoard, \"Y8Vxk2895Xnk+T7htzJfTyHuODI=\", false, function () {\n  return [useParams];\n});\n\n_c = DeviceDashBoard;\nexport default DeviceDashBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeviceDashBoard\");","map":{"version":3,"sources":["C:/remotePackRlab/remotePackRlab/src/Components/Home/DeviceDashBoard/DeviceDashBoard.js"],"names":["React","useEffect","useState","Navbar","DeveiceMeter","logo","BrowserRouter","Router","Switch","Route","Link","useParams","db","DeviceDashBoard","format","id","status","setStatus","loading","setLoading","pastData","setPastData","present","week","day","halfDay","sixH","oneH","arrayFunc","arr","key","resultArray","i","length","_id","maxNumber","max","dateSocket","selectionSort","min","j","unixTimeX1","userDb","collection","doc","onSnapshot","querySnapshot","data","console","log","width"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Navbar from '../../Shared/Navbar';\r\nimport DeveiceMeter from '../Locations/DeveiceMeter';\r\n\r\nimport logo from '../../../Resorces/logo_RLAB.png';\r\nimport './DeviceDashBoard.css';\r\n\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link,\r\n    useParams\r\n  } from \"react-router-dom\";\r\n\r\nimport db from '../../FirebaseConfig/Firebase'\r\n\r\n\r\n\r\nconst DeviceDashBoard = () => {\r\n    let { format, id } = useParams();\r\n\r\n\r\n    const [status,setStatus] = useState([])\r\n    const [loading, setLoading] = useState(true);\r\n    const [pastData, setPastData] = useState({\r\n      present:true,\r\n      week:false,\r\n      day:false,\r\n      halfDay:false,\r\n      sixH:false,\r\n      oneH:false\r\n    })\r\n    function arrayFunc(arr,key) {\r\n        let resultArray = [];\r\n        for(let i = 0; i < arr.length; i++){\r\n            if(arr[i]._id === key){\r\n                resultArray = arr[i];\r\n            }\r\n        }\r\n        return resultArray\r\n    };\r\n\r\n    //  function for liner search start\r\n    \r\nfunction maxNumber(arr) {\r\n        \r\n        let i;\r\n        let max = arr[0].dateSocket;\r\n\r\n        for (i = 1; i < arr.length; i++){\r\n           if(arr[i].dateSocket > max){\r\n               max = arr[i]\r\n           }\r\n        }\r\n    // const lastItem =  await arr[arr.length - 1]\r\n        return max;\r\n    }\r\n    \r\n// finish |^ linear search \r\n//shorting data \r\nasync function selectionSort(arr) {\r\n    let min;\r\n  \r\n    //start passes.\r\n    for (let i = 0; i < arr.length; i++) {\r\n      //index of the smallest element to be the ith element.\r\n      min = i;\r\n  \r\n      //Check through the rest of the array for a lesser element\r\n      for (let j = i + 1; j < arr.length; j++) {\r\n        if (arr[j].dateSocket < arr[min].dateSocket) {\r\n          min = j;\r\n        }\r\n      }\r\n  \r\n      //compare the indexes\r\n      if (min !== i) {\r\n        //swap\r\n        [arr[i].dateSocket, arr[min]].dateSocket = [arr[min].dateSocket, arr[i].dateSocket];\r\n      }\r\n    }\r\n  \r\n    return arr;\r\n  }\r\n  const unixTimeX1 = \r\n    useEffect(() => {\r\n       if(pastData.present === true){\r\n        const userDb =  db.collection(\"RealTime\").doc(id).onSnapshot((querySnapshot) => {\r\n            \r\n          setStatus({...querySnapshot.data(), key:querySnapshot.id});\r\n              \r\n           \r\n            // const maxNumber1 = maxNumber(getDataFirebase);\r\n            \r\n        });\r\n        return userDb;\r\n//       \r\n       }\r\n     \r\n    }, [loading, format, id, pastData.present]);\r\n  console.log({status});\r\n    return (\r\n        <div className='row'>\r\n            <div className=\"col-md-1\">\r\n                <Navbar/>\r\n            </div>\r\n            <div className=\"col-md-11 text-center\">\r\n            <img src={logo} alt=\"\" style={{width:'20%'}} className='mt-5' />\r\n                \r\n                <DeveiceMeter data={status}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DeviceDashBoard;"]},"metadata":{},"sourceType":"module"}