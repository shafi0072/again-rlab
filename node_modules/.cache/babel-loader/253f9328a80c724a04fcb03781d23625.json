{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport * from './baggage/types';\nexport { baggageEntryMetadataFromString } from './baggage/utils';\nexport * from './common/Exception';\nexport * from './common/Time';\nexport * from './diag';\nexport * from './propagation/TextMapPropagator';\nexport * from './trace/attributes';\nexport * from './trace/link';\nexport * from './trace/ProxyTracer';\nexport * from './trace/ProxyTracerProvider';\nexport * from './trace/Sampler';\nexport * from './trace/SamplingResult';\nexport * from './trace/span_context';\nexport * from './trace/span_kind';\nexport * from './trace/span';\nexport * from './trace/SpanOptions';\nexport * from './trace/status';\nexport * from './trace/trace_flags';\nexport * from './trace/trace_state';\nexport * from './trace/tracer_provider';\nexport * from './trace/tracer';\nexport { INVALID_SPANID, INVALID_TRACEID, INVALID_SPAN_CONTEXT, isSpanContextValid, isValidTraceId, isValidSpanId } from './trace/spancontext-utils';\nexport * from './context/context';\nexport * from './context/types';\nimport { ContextAPI } from './api/context';\n/** Entrypoint for context API */\n\nexport var context = ContextAPI.getInstance();\nimport { TraceAPI } from './api/trace';\n/** Entrypoint for trace API */\n\nexport var trace = TraceAPI.getInstance();\nimport { PropagationAPI } from './api/propagation';\n/** Entrypoint for propagation API */\n\nexport var propagation = PropagationAPI.getInstance();\nimport { DiagAPI } from './api/diag';\n/**\n * Entrypoint for Diag API.\n * Defines Diagnostic handler used for internal diagnostic logging operations.\n * The default provides a Noop DiagLogger implementation which may be changed via the\n * diag.setLogger(logger: DiagLogger) function.\n */\n\nexport var diag = DiagAPI.instance();\nexport default {\n  trace: trace,\n  context: context,\n  propagation: propagation,\n  diag: diag\n};","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAEH,cAAc,iBAAd;AACA,SAAS,8BAAT,QAA+C,iBAA/C;AACA,cAAc,oBAAd;AACA,cAAc,eAAd;AACA,cAAc,QAAd;AACA,cAAc,iCAAd;AACA,cAAc,oBAAd;AACA,cAAc,cAAd;AACA,cAAc,qBAAd;AACA,cAAc,6BAAd;AACA,cAAc,iBAAd;AACA,cAAc,wBAAd;AACA,cAAc,sBAAd;AACA,cAAc,mBAAd;AACA,cAAc,cAAd;AACA,cAAc,qBAAd;AACA,cAAc,gBAAd;AACA,cAAc,qBAAd;AACA,cAAc,qBAAd;AACA,cAAc,yBAAd;AACA,cAAc,gBAAd;AAEA,SACE,cADF,EAEE,eAFF,EAGE,oBAHF,EAIE,kBAJF,EAKE,cALF,EAME,aANF,QAOO,2BAPP;AASA,cAAc,mBAAd;AACA,cAAc,iBAAd;AAEA,SAAS,UAAT,QAA2B,eAA3B;AAEA;;AACA,OAAO,IAAM,OAAO,GAAG,UAAU,CAAC,WAAX,EAAhB;AAEP,SAAS,QAAT,QAAyB,aAAzB;AAEA;;AACA,OAAO,IAAM,KAAK,GAAG,QAAQ,CAAC,WAAT,EAAd;AAEP,SAAS,cAAT,QAA+B,mBAA/B;AAEA;;AACA,OAAO,IAAM,WAAW,GAAG,cAAc,CAAC,WAAf,EAApB;AAEP,SAAS,OAAT,QAAwB,YAAxB;AAGA;;;;;AAKG;;AACH,OAAO,IAAM,IAAI,GAAG,OAAO,CAAC,QAAR,EAAb;AAEP,eAAe;AACb,EAAA,KAAK,EAAA,KADQ;AAEb,EAAA,OAAO,EAAA,OAFM;AAGb,EAAA,WAAW,EAAA,WAHE;AAIb,EAAA,IAAI,EAAA;AAJS,CAAf","sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport * from './baggage/types';\nexport { baggageEntryMetadataFromString } from './baggage/utils';\nexport * from './common/Exception';\nexport * from './common/Time';\nexport * from './diag';\nexport * from './propagation/TextMapPropagator';\nexport * from './trace/attributes';\nexport * from './trace/link';\nexport * from './trace/ProxyTracer';\nexport * from './trace/ProxyTracerProvider';\nexport * from './trace/Sampler';\nexport * from './trace/SamplingResult';\nexport * from './trace/span_context';\nexport * from './trace/span_kind';\nexport * from './trace/span';\nexport * from './trace/SpanOptions';\nexport * from './trace/status';\nexport * from './trace/trace_flags';\nexport * from './trace/trace_state';\nexport * from './trace/tracer_provider';\nexport * from './trace/tracer';\nexport { INVALID_SPANID, INVALID_TRACEID, INVALID_SPAN_CONTEXT, isSpanContextValid, isValidTraceId, isValidSpanId, } from './trace/spancontext-utils';\nexport * from './context/context';\nexport * from './context/types';\nimport { ContextAPI } from './api/context';\n/** Entrypoint for context API */\nexport var context = ContextAPI.getInstance();\nimport { TraceAPI } from './api/trace';\n/** Entrypoint for trace API */\nexport var trace = TraceAPI.getInstance();\nimport { PropagationAPI } from './api/propagation';\n/** Entrypoint for propagation API */\nexport var propagation = PropagationAPI.getInstance();\nimport { DiagAPI } from './api/diag';\n/**\n * Entrypoint for Diag API.\n * Defines Diagnostic handler used for internal diagnostic logging operations.\n * The default provides a Noop DiagLogger implementation which may be changed via the\n * diag.setLogger(logger: DiagLogger) function.\n */\nexport var diag = DiagAPI.instance();\nexport default {\n    trace: trace,\n    context: context,\n    propagation: propagation,\n    diag: diag,\n};\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}