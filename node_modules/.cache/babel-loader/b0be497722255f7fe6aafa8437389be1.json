{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getGlobal } from '../internal/global-utils';\n/**\n * Component Logger which is meant to be used as part of any component which\n * will add automatically additional namespace in front of the log message.\n * It will then forward all message to global diag logger\n * @example\n * const cLogger = diag.createComponentLogger({ namespace: '@opentelemetry/instrumentation-http' });\n * cLogger.debug('test');\n * // @opentelemetry/instrumentation-http test\n */\n\nvar DiagComponentLogger =\n/** @class */\nfunction () {\n  function DiagComponentLogger(props) {\n    this._namespace = props.namespace || 'DiagComponentLogger';\n  }\n\n  DiagComponentLogger.prototype.debug = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    return logProxy('debug', this._namespace, args);\n  };\n\n  DiagComponentLogger.prototype.error = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    return logProxy('error', this._namespace, args);\n  };\n\n  DiagComponentLogger.prototype.info = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    return logProxy('info', this._namespace, args);\n  };\n\n  DiagComponentLogger.prototype.warn = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    return logProxy('warn', this._namespace, args);\n  };\n\n  DiagComponentLogger.prototype.verbose = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    return logProxy('verbose', this._namespace, args);\n  };\n\n  return DiagComponentLogger;\n}();\n\nexport { DiagComponentLogger };\n\nfunction logProxy(funcName, namespace, args) {\n  var logger = getGlobal('diag'); // shortcut if logger not set\n\n  if (!logger) {\n    return;\n  }\n\n  args.unshift(namespace);\n  return logger[funcName].apply(logger, args);\n}","map":{"version":3,"sources":["../../../src/diag/ComponentLogger.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAEH,SAAS,SAAT,QAA0B,0BAA1B;AAGA;;;;;;;;AAQG;;AACH,IAAA,mBAAA;AAAA;AAAA,YAAA;AAGE,WAAA,mBAAA,CAAY,KAAZ,EAAyC;AACvC,SAAK,UAAL,GAAkB,KAAK,CAAC,SAAN,IAAmB,qBAArC;AACD;;AAEM,EAAA,mBAAA,CAAA,SAAA,CAAA,KAAA,GAAP,YAAA;AAAa,QAAA,IAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAc;AAAd,MAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AACX,WAAO,QAAQ,CAAC,OAAD,EAAU,KAAK,UAAf,EAA2B,IAA3B,CAAf;AACD,GAFM;;AAIA,EAAA,mBAAA,CAAA,SAAA,CAAA,KAAA,GAAP,YAAA;AAAa,QAAA,IAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAc;AAAd,MAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AACX,WAAO,QAAQ,CAAC,OAAD,EAAU,KAAK,UAAf,EAA2B,IAA3B,CAAf;AACD,GAFM;;AAIA,EAAA,mBAAA,CAAA,SAAA,CAAA,IAAA,GAAP,YAAA;AAAY,QAAA,IAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAc;AAAd,MAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AACV,WAAO,QAAQ,CAAC,MAAD,EAAS,KAAK,UAAd,EAA0B,IAA1B,CAAf;AACD,GAFM;;AAIA,EAAA,mBAAA,CAAA,SAAA,CAAA,IAAA,GAAP,YAAA;AAAY,QAAA,IAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAc;AAAd,MAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AACV,WAAO,QAAQ,CAAC,MAAD,EAAS,KAAK,UAAd,EAA0B,IAA1B,CAAf;AACD,GAFM;;AAIA,EAAA,mBAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA;AAAe,QAAA,IAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAc;AAAd,MAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AACb,WAAO,QAAQ,CAAC,SAAD,EAAY,KAAK,UAAjB,EAA6B,IAA7B,CAAf;AACD,GAFM;;AAGT,SAAA,mBAAA;AAAC,CA1BD,EAAA;;;;AA4BA,SAAS,QAAT,CACE,QADF,EAEE,SAFF,EAGE,IAHF,EAGW;AAET,MAAM,MAAM,GAAG,SAAS,CAAC,MAAD,CAAxB,CAFS,CAGT;;AACA,MAAI,CAAC,MAAL,EAAa;AACX;AACD;;AAED,EAAA,IAAI,CAAC,OAAL,CAAa,SAAb;AACA,SAAO,MAAM,CAAC,QAAD,CAAN,CAAiB,KAAjB,CAAuB,MAAvB,EAA+B,IAA/B,CAAP;AACD","sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getGlobal } from '../internal/global-utils';\n/**\n * Component Logger which is meant to be used as part of any component which\n * will add automatically additional namespace in front of the log message.\n * It will then forward all message to global diag logger\n * @example\n * const cLogger = diag.createComponentLogger({ namespace: '@opentelemetry/instrumentation-http' });\n * cLogger.debug('test');\n * // @opentelemetry/instrumentation-http test\n */\nvar DiagComponentLogger = /** @class */ (function () {\n    function DiagComponentLogger(props) {\n        this._namespace = props.namespace || 'DiagComponentLogger';\n    }\n    DiagComponentLogger.prototype.debug = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('debug', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.error = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('error', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.info = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('info', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.warn = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('warn', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.verbose = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('verbose', this._namespace, args);\n    };\n    return DiagComponentLogger;\n}());\nexport { DiagComponentLogger };\nfunction logProxy(funcName, namespace, args) {\n    var logger = getGlobal('diag');\n    // shortcut if logger not set\n    if (!logger) {\n        return;\n    }\n    args.unshift(namespace);\n    return logger[funcName].apply(logger, args);\n}\n//# sourceMappingURL=ComponentLogger.js.map"]},"metadata":{},"sourceType":"module"}