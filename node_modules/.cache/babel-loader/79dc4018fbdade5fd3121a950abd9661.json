{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar consoleMap = [{\n  n: 'error',\n  c: 'error'\n}, {\n  n: 'warn',\n  c: 'warn'\n}, {\n  n: 'info',\n  c: 'info'\n}, {\n  n: 'debug',\n  c: 'debug'\n}, {\n  n: 'verbose',\n  c: 'trace'\n}];\n/**\n * A simple Immutable Console based diagnostic logger which will output any messages to the Console.\n * If you want to limit the amount of logging to a specific level or lower use the\n * {@link createLogLevelDiagLogger}\n */\n\nvar DiagConsoleLogger =\n/** @class */\nfunction () {\n  function DiagConsoleLogger() {\n    function _consoleFunc(funcName) {\n      return function () {\n        var orgArguments = arguments;\n\n        if (console) {\n          // Some environments only expose the console when the F12 developer console is open\n          var theFunc = console[funcName];\n\n          if (typeof theFunc !== 'function') {\n            // Not all environments support all functions\n            theFunc = console.log;\n          } // One last final check\n\n\n          if (typeof theFunc === 'function') {\n            return theFunc.apply(console, orgArguments);\n          }\n        }\n      };\n    }\n\n    for (var i = 0; i < consoleMap.length; i++) {\n      this[consoleMap[i].n] = _consoleFunc(consoleMap[i].c);\n    }\n  }\n\n  return DiagConsoleLogger;\n}();\n\nexport { DiagConsoleLogger };","map":{"version":3,"sources":["../../../src/diag/consoleLogger.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAIH,IAAM,UAAU,GAAgD,CAC9D;AAAE,EAAA,CAAC,EAAE,OAAL;AAAc,EAAA,CAAC,EAAE;AAAjB,CAD8D,EAE9D;AAAE,EAAA,CAAC,EAAE,MAAL;AAAa,EAAA,CAAC,EAAE;AAAhB,CAF8D,EAG9D;AAAE,EAAA,CAAC,EAAE,MAAL;AAAa,EAAA,CAAC,EAAE;AAAhB,CAH8D,EAI9D;AAAE,EAAA,CAAC,EAAE,OAAL;AAAc,EAAA,CAAC,EAAE;AAAjB,CAJ8D,EAK9D;AAAE,EAAA,CAAC,EAAE,SAAL;AAAgB,EAAA,CAAC,EAAE;AAAnB,CAL8D,CAAhE;AAQA;;;;AAIG;;AACH,IAAA,iBAAA;AAAA;AAAA,YAAA;AACE,WAAA,iBAAA,GAAA;AACE,aAAS,YAAT,CAAsB,QAAtB,EAA6C;AAC3C,aAAO,YAAA;AACL,YAAM,YAAY,GAAG,SAArB;;AACA,YAAI,OAAJ,EAAa;AACX;AACA,cAAI,OAAO,GAAG,OAAO,CAAC,QAAD,CAArB;;AACA,cAAI,OAAO,OAAP,KAAmB,UAAvB,EAAmC;AACjC;AACA,YAAA,OAAO,GAAG,OAAO,CAAC,GAAlB;AACD,WANU,CAQX;;;AACA,cAAI,OAAO,OAAP,KAAmB,UAAvB,EAAmC;AACjC,mBAAO,OAAO,CAAC,KAAR,CAAc,OAAd,EAAuB,YAAvB,CAAP;AACD;AACF;AACF,OAfD;AAgBD;;AAED,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,UAAU,CAAC,MAA/B,EAAuC,CAAC,EAAxC,EAA4C;AAC1C,WAAK,UAAU,CAAC,CAAD,CAAV,CAAc,CAAnB,IAAwB,YAAY,CAAC,UAAU,CAAC,CAAD,CAAV,CAAc,CAAf,CAApC;AACD;AACF;;AAkCH,SAAA,iBAAA;AAAC,CA1DD,EAAA","sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar consoleMap = [\n    { n: 'error', c: 'error' },\n    { n: 'warn', c: 'warn' },\n    { n: 'info', c: 'info' },\n    { n: 'debug', c: 'debug' },\n    { n: 'verbose', c: 'trace' },\n];\n/**\n * A simple Immutable Console based diagnostic logger which will output any messages to the Console.\n * If you want to limit the amount of logging to a specific level or lower use the\n * {@link createLogLevelDiagLogger}\n */\nvar DiagConsoleLogger = /** @class */ (function () {\n    function DiagConsoleLogger() {\n        function _consoleFunc(funcName) {\n            return function () {\n                var orgArguments = arguments;\n                if (console) {\n                    // Some environments only expose the console when the F12 developer console is open\n                    var theFunc = console[funcName];\n                    if (typeof theFunc !== 'function') {\n                        // Not all environments support all functions\n                        theFunc = console.log;\n                    }\n                    // One last final check\n                    if (typeof theFunc === 'function') {\n                        return theFunc.apply(console, orgArguments);\n                    }\n                }\n            };\n        }\n        for (var i = 0; i < consoleMap.length; i++) {\n            this[consoleMap[i].n] = _consoleFunc(consoleMap[i].c);\n        }\n    }\n    return DiagConsoleLogger;\n}());\nexport { DiagConsoleLogger };\n//# sourceMappingURL=consoleLogger.js.map"]},"metadata":{},"sourceType":"module"}