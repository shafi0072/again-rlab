{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2014 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IAM = void 0;\n/*!\n * @module pubsub/iam\n */\n\nconst promisify_1 = require(\"@google-cloud/promisify\");\n\nconst arrify = require(\"arrify\");\n/**\n * [IAM (Identity and Access\n * Management)](https://cloud.google.com/pubsub/access_control) allows you to\n * set permissions on invidual resources and offers a wider range of roles:\n * editor, owner, publisher, subscriber, and viewer. This gives you greater\n * flexibility and allows you to set more fine-grained access control.\n *\n * For example:\n *   * Grant access on a per-topic or per-subscription basis, rather than for\n *     the whole Cloud project.\n *   * Grant access with limited capabilities, such as to only publish messages\n *     to a topic, or to only to consume messages from a subscription, but not\n *     to delete the topic or subscription.\n *\n *\n * *The IAM access control features described in this document are Beta,\n * including the API methods to get and set IAM policies, and to test IAM\n * permissions. Cloud Pub/Sub's use of IAM features is not covered by any\n * SLA or deprecation policy, and may be subject to backward-incompatible\n * changes.*\n *\n * @class\n * @param {PubSub} pubsub PubSub Object.\n * @param {string} id The name of the topic or subscription.\n *\n * @see [Access Control Overview]{@link https://cloud.google.com/pubsub/access_control}\n * @see [What is Cloud IAM?]{@link https://cloud.google.com/iam/}\n *\n * @example\n * const {PubSub} = require('@google-cloud/pubsub');\n * const pubsub = new PubSub();\n *\n * const topic = pubsub.topic('my-topic');\n * // topic.iam\n *\n * const subscription = pubsub.subscription('my-subscription');\n * // subscription.iam\n */\n\n\nclass IAM {\n  constructor(pubsub, id) {\n    this.pubsub = pubsub;\n    this.request = pubsub.request.bind(pubsub);\n    this.id = id;\n  }\n  /**\n   * @typedef {array} GetPolicyResponse\n   * @property {object} 0 The policy.\n   */\n\n  /**\n   * @callback GetPolicyCallback\n   * @param {?Error} err Request error, if any.\n   * @param {object} acl The policy.\n   */\n\n  /**\n   * Get the IAM policy\n   *\n   * @param {object} [gaxOptions] Request configuration options, outlined\n   *     here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n   * @param {GetPolicyCallback} [callback] Callback function.\n   * @returns {Promise<GetPolicyResponse>}\n   *\n   * @see [Topics: getIamPolicy API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.topics/getIamPolicy}\n   * @see [Subscriptions: getIamPolicy API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.subscriptions/getIamPolicy}\n   *\n   * @example\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   *\n   * const topic = pubsub.topic('my-topic');\n   * const subscription = topic.subscription('my-subscription');\n   *\n   * topic.iam.getPolicy(function(err, policy, apiResponse) {});\n   *\n   * subscription.iam.getPolicy(function(err, policy, apiResponse) {});\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * topic.iam.getPolicy().then(function(data) {\n   *   const policy = data[0];\n   *   const apiResponse = data[1];\n   * });\n   */\n\n\n  getPolicy(optsOrCallback, callback) {\n    const gaxOpts = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n    callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n    const reqOpts = {\n      resource: this.id\n    };\n    this.request({\n      client: 'SubscriberClient',\n      method: 'getIamPolicy',\n      reqOpts,\n      gaxOpts\n    }, callback);\n  }\n  /**\n   * @typedef {array} SetPolicyResponse\n   * @property {object} 0 The policy.\n   */\n\n  /**\n   * @callback SetPolicyCallback\n   * @param {?Error} err Request error, if any.\n   * @param {object} acl The policy.\n   */\n\n  /**\n   * Set the IAM policy\n   *\n   * @throws {Error} If no policy is provided.\n   *\n   * @param {object} policy The [policy](https://cloud.google.com/pubsub/docs/reference/rest/v1/Policy).\n   * @param {array} [policy.bindings] Bindings associate members with roles.\n   * @param {Array<object>} [policy.rules] Rules to be applied to the policy.\n   * @param {string} [policy.etag] Etags are used to perform a read-modify-write.\n   * @param {object} [gaxOptions] Request configuration options, outlined\n   *     here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n   * @param {SetPolicyCallback} callback Callback function.\n   * @returns {Promise<SetPolicyResponse>}\n   *\n   * @see [Topics: setIamPolicy API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.topics/setIamPolicy}\n   * @see [Subscriptions: setIamPolicy API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.subscriptions/setIamPolicy}\n   * @see [Policy]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/Policy}\n   *\n   * @example\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   *\n   * const topic = pubsub.topic('my-topic');\n   * const subscription = topic.subscription('my-subscription');\n   *\n   * const myPolicy = {\n   *   bindings: [\n   *     {\n   *       role: 'roles/pubsub.subscriber',\n   *       members:\n   * ['serviceAccount:myotherproject@appspot.gserviceaccount.com']\n   *     }\n   *   ]\n   * };\n   *\n   * topic.iam.setPolicy(myPolicy, function(err, policy, apiResponse) {});\n   *\n   * subscription.iam.setPolicy(myPolicy, function(err, policy, apiResponse)\n   * {});\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * topic.iam.setPolicy(myPolicy).then(function(data) {\n   *   const policy = data[0];\n   *   const apiResponse = data[1];\n   * });\n   */\n\n\n  setPolicy(policy, optsOrCallback, callback) {\n    if (!(typeof policy === 'object')) {\n      throw new Error('A policy object is required.');\n    }\n\n    const gaxOpts = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n    callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n    const reqOpts = {\n      resource: this.id,\n      policy\n    };\n    this.request({\n      client: 'SubscriberClient',\n      method: 'setIamPolicy',\n      reqOpts,\n      gaxOpts\n    }, callback);\n  }\n  /**\n   * @callback TestIamPermissionsCallback\n   * @param {?Error} err Request error, if any.\n   * @param {TestIamPermissionsAPIResponse} permissions A subset of permissions that the caller is allowed.\n   * @param {PermissionsResponse} apiResponse The full API response.\n   */\n\n  /**\n   * @typedef {array} TestIamPermissionsResponse\n   * @property {object[]} 0 A subset of permissions that the caller is allowed.\n   * @property {PermissionsResponse} 1 The full API response.\n   */\n\n  /**\n   * @typedef {string[]} PermissionsResponse\n   * A subset of TestPermissionsRequest.permissions that the caller is allowed.\n   * @see https://cloud.google.com/pubsub/docs/reference/rpc/google.iam.v1#google.iam.v1.TestIamPermissionsRequest\n   */\n\n  /**\n   * Test a set of permissions for a resource.\n   *\n   * Permissions with wildcards such as `*` or `storage.*` are not allowed.\n   *\n   * @throws {Error} If permissions are not provided.\n   *\n   * @param {string|string[]} permissions The permission(s) to test for.\n   * @param {object} [gaxOptions] Request configuration options, outlined\n   *     here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n   * @param {TestIamPermissionsCallback} [callback] Callback function.\n   * @returns {Promise<TestIamPermissionsResponse>}\n   *\n   * @see [Topics: testIamPermissions API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.topics/testIamPermissions}\n   * @see [Subscriptions: testIamPermissions API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.subscriptions/testIamPermissions}\n   * @see [Permissions Reference]{@link https://cloud.google.com/pubsub/access_control#permissions}\n   *\n   * @example\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   *\n   * const topic = pubsub.topic('my-topic');\n   * const subscription = topic.subscription('my-subscription');\n   *\n   * //-\n   * // Test a single permission.\n   * //-\n   * const test = 'pubsub.topics.update';\n   *\n   * topic.iam.testPermissions(test, function(err, permissions, apiResponse) {\n   *   console.log(permissions);\n   *   // {\n   *   //   \"pubsub.topics.update\": true\n   *   // }\n   * });\n   *\n   * //-\n   * // Test several permissions at once.\n   * //-\n   * const tests = [\n   *   'pubsub.subscriptions.consume',\n   *   'pubsub.subscriptions.update'\n   * ];\n   *\n   * subscription.iam.testPermissions(tests, function(err, permissions) {\n   *   console.log(permissions);\n   *   // {\n   *   //   \"pubsub.subscriptions.consume\": true,\n   *   //   \"pubsub.subscriptions.update\": false\n   *   // }\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * topic.iam.testPermissions(test).then(function(data) {\n   *   const permissions = data[0];\n   *   const apiResponse = data[1];\n   * });\n   */\n\n\n  testPermissions(permissions, optsOrCallback, callback) {\n    if (!Array.isArray(permissions) && !(typeof permissions === 'string')) {\n      throw new Error('Permissions are required.');\n    }\n\n    const gaxOpts = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n    callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n    const reqOpts = {\n      resource: this.id,\n      permissions: arrify(permissions)\n    };\n    this.request({\n      client: 'SubscriberClient',\n      method: 'testIamPermissions',\n      reqOpts,\n      gaxOpts\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, resp);\n        return;\n      }\n\n      const availablePermissions = arrify(resp.permissions);\n      const permissionHash = permissions.reduce((acc, permission) => {\n        acc[permission] = availablePermissions.indexOf(permission) > -1;\n        return acc;\n      }, {});\n      callback(null, permissionHash, resp);\n    });\n  }\n\n}\n\nexports.IAM = IAM;\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n\npromisify_1.promisifyAll(IAM);","map":{"version":3,"sources":["../../src/iam.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2014 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IAM = void 0;\n/*!\n * @module pubsub/iam\n */\nconst promisify_1 = require(\"@google-cloud/promisify\");\nconst arrify = require(\"arrify\");\n/**\n * [IAM (Identity and Access\n * Management)](https://cloud.google.com/pubsub/access_control) allows you to\n * set permissions on invidual resources and offers a wider range of roles:\n * editor, owner, publisher, subscriber, and viewer. This gives you greater\n * flexibility and allows you to set more fine-grained access control.\n *\n * For example:\n *   * Grant access on a per-topic or per-subscription basis, rather than for\n *     the whole Cloud project.\n *   * Grant access with limited capabilities, such as to only publish messages\n *     to a topic, or to only to consume messages from a subscription, but not\n *     to delete the topic or subscription.\n *\n *\n * *The IAM access control features described in this document are Beta,\n * including the API methods to get and set IAM policies, and to test IAM\n * permissions. Cloud Pub/Sub's use of IAM features is not covered by any\n * SLA or deprecation policy, and may be subject to backward-incompatible\n * changes.*\n *\n * @class\n * @param {PubSub} pubsub PubSub Object.\n * @param {string} id The name of the topic or subscription.\n *\n * @see [Access Control Overview]{@link https://cloud.google.com/pubsub/access_control}\n * @see [What is Cloud IAM?]{@link https://cloud.google.com/iam/}\n *\n * @example\n * const {PubSub} = require('@google-cloud/pubsub');\n * const pubsub = new PubSub();\n *\n * const topic = pubsub.topic('my-topic');\n * // topic.iam\n *\n * const subscription = pubsub.subscription('my-subscription');\n * // subscription.iam\n */\nclass IAM {\n    constructor(pubsub, id) {\n        this.pubsub = pubsub;\n        this.request = pubsub.request.bind(pubsub);\n        this.id = id;\n    }\n    /**\n     * @typedef {array} GetPolicyResponse\n     * @property {object} 0 The policy.\n     */\n    /**\n     * @callback GetPolicyCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} acl The policy.\n     */\n    /**\n     * Get the IAM policy\n     *\n     * @param {object} [gaxOptions] Request configuration options, outlined\n     *     here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n     * @param {GetPolicyCallback} [callback] Callback function.\n     * @returns {Promise<GetPolicyResponse>}\n     *\n     * @see [Topics: getIamPolicy API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.topics/getIamPolicy}\n     * @see [Subscriptions: getIamPolicy API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.subscriptions/getIamPolicy}\n     *\n     * @example\n     * const {PubSub} = require('@google-cloud/pubsub');\n     * const pubsub = new PubSub();\n     *\n     * const topic = pubsub.topic('my-topic');\n     * const subscription = topic.subscription('my-subscription');\n     *\n     * topic.iam.getPolicy(function(err, policy, apiResponse) {});\n     *\n     * subscription.iam.getPolicy(function(err, policy, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * topic.iam.getPolicy().then(function(data) {\n     *   const policy = data[0];\n     *   const apiResponse = data[1];\n     * });\n     */\n    getPolicy(optsOrCallback, callback) {\n        const gaxOpts = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n        callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n        const reqOpts = {\n            resource: this.id,\n        };\n        this.request({\n            client: 'SubscriberClient',\n            method: 'getIamPolicy',\n            reqOpts,\n            gaxOpts,\n        }, callback);\n    }\n    /**\n     * @typedef {array} SetPolicyResponse\n     * @property {object} 0 The policy.\n     */\n    /**\n     * @callback SetPolicyCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} acl The policy.\n     */\n    /**\n     * Set the IAM policy\n     *\n     * @throws {Error} If no policy is provided.\n     *\n     * @param {object} policy The [policy](https://cloud.google.com/pubsub/docs/reference/rest/v1/Policy).\n     * @param {array} [policy.bindings] Bindings associate members with roles.\n     * @param {Array<object>} [policy.rules] Rules to be applied to the policy.\n     * @param {string} [policy.etag] Etags are used to perform a read-modify-write.\n     * @param {object} [gaxOptions] Request configuration options, outlined\n     *     here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n     * @param {SetPolicyCallback} callback Callback function.\n     * @returns {Promise<SetPolicyResponse>}\n     *\n     * @see [Topics: setIamPolicy API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.topics/setIamPolicy}\n     * @see [Subscriptions: setIamPolicy API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.subscriptions/setIamPolicy}\n     * @see [Policy]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/Policy}\n     *\n     * @example\n     * const {PubSub} = require('@google-cloud/pubsub');\n     * const pubsub = new PubSub();\n     *\n     * const topic = pubsub.topic('my-topic');\n     * const subscription = topic.subscription('my-subscription');\n     *\n     * const myPolicy = {\n     *   bindings: [\n     *     {\n     *       role: 'roles/pubsub.subscriber',\n     *       members:\n     * ['serviceAccount:myotherproject@appspot.gserviceaccount.com']\n     *     }\n     *   ]\n     * };\n     *\n     * topic.iam.setPolicy(myPolicy, function(err, policy, apiResponse) {});\n     *\n     * subscription.iam.setPolicy(myPolicy, function(err, policy, apiResponse)\n     * {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * topic.iam.setPolicy(myPolicy).then(function(data) {\n     *   const policy = data[0];\n     *   const apiResponse = data[1];\n     * });\n     */\n    setPolicy(policy, optsOrCallback, callback) {\n        if (!(typeof policy === 'object')) {\n            throw new Error('A policy object is required.');\n        }\n        const gaxOpts = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n        callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n        const reqOpts = {\n            resource: this.id,\n            policy,\n        };\n        this.request({\n            client: 'SubscriberClient',\n            method: 'setIamPolicy',\n            reqOpts,\n            gaxOpts,\n        }, callback);\n    }\n    /**\n     * @callback TestIamPermissionsCallback\n     * @param {?Error} err Request error, if any.\n     * @param {TestIamPermissionsAPIResponse} permissions A subset of permissions that the caller is allowed.\n     * @param {PermissionsResponse} apiResponse The full API response.\n     */\n    /**\n     * @typedef {array} TestIamPermissionsResponse\n     * @property {object[]} 0 A subset of permissions that the caller is allowed.\n     * @property {PermissionsResponse} 1 The full API response.\n     */\n    /**\n     * @typedef {string[]} PermissionsResponse\n     * A subset of TestPermissionsRequest.permissions that the caller is allowed.\n     * @see https://cloud.google.com/pubsub/docs/reference/rpc/google.iam.v1#google.iam.v1.TestIamPermissionsRequest\n     */\n    /**\n     * Test a set of permissions for a resource.\n     *\n     * Permissions with wildcards such as `*` or `storage.*` are not allowed.\n     *\n     * @throws {Error} If permissions are not provided.\n     *\n     * @param {string|string[]} permissions The permission(s) to test for.\n     * @param {object} [gaxOptions] Request configuration options, outlined\n     *     here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n     * @param {TestIamPermissionsCallback} [callback] Callback function.\n     * @returns {Promise<TestIamPermissionsResponse>}\n     *\n     * @see [Topics: testIamPermissions API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.topics/testIamPermissions}\n     * @see [Subscriptions: testIamPermissions API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.subscriptions/testIamPermissions}\n     * @see [Permissions Reference]{@link https://cloud.google.com/pubsub/access_control#permissions}\n     *\n     * @example\n     * const {PubSub} = require('@google-cloud/pubsub');\n     * const pubsub = new PubSub();\n     *\n     * const topic = pubsub.topic('my-topic');\n     * const subscription = topic.subscription('my-subscription');\n     *\n     * //-\n     * // Test a single permission.\n     * //-\n     * const test = 'pubsub.topics.update';\n     *\n     * topic.iam.testPermissions(test, function(err, permissions, apiResponse) {\n     *   console.log(permissions);\n     *   // {\n     *   //   \"pubsub.topics.update\": true\n     *   // }\n     * });\n     *\n     * //-\n     * // Test several permissions at once.\n     * //-\n     * const tests = [\n     *   'pubsub.subscriptions.consume',\n     *   'pubsub.subscriptions.update'\n     * ];\n     *\n     * subscription.iam.testPermissions(tests, function(err, permissions) {\n     *   console.log(permissions);\n     *   // {\n     *   //   \"pubsub.subscriptions.consume\": true,\n     *   //   \"pubsub.subscriptions.update\": false\n     *   // }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * topic.iam.testPermissions(test).then(function(data) {\n     *   const permissions = data[0];\n     *   const apiResponse = data[1];\n     * });\n     */\n    testPermissions(permissions, optsOrCallback, callback) {\n        if (!Array.isArray(permissions) && !(typeof permissions === 'string')) {\n            throw new Error('Permissions are required.');\n        }\n        const gaxOpts = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n        callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n        const reqOpts = {\n            resource: this.id,\n            permissions: arrify(permissions),\n        };\n        this.request({\n            client: 'SubscriberClient',\n            method: 'testIamPermissions',\n            reqOpts,\n            gaxOpts,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            const availablePermissions = arrify(resp.permissions);\n            const permissionHash = permissions.reduce((acc, permission) => {\n                acc[permission] = availablePermissions.indexOf(permission) > -1;\n                return acc;\n            }, {});\n            callback(null, permissionHash, resp);\n        });\n    }\n}\nexports.IAM = IAM;\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\npromisify_1.promisifyAll(IAM);\n//# sourceMappingURL=iam.js.map"]},"metadata":{},"sourceType":"script"}