{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = getTickPosition;\n/**\n * Create a function that returns a tick position for the given tick value\n */\n\nfunction getTickPosition(scale, align) {\n  if (align === void 0) {\n    align = 'center';\n  } // Broaden type before using 'xxx' in s as typeguard.\n\n\n  var s = scale; // For point or band scales,\n  // have to add offset to make the tick at center or end.\n\n  if (align !== 'start' && 'bandwidth' in s) {\n    var offset = s.bandwidth();\n    if (align === 'center') offset /= 2;\n    if (s.round()) offset = Math.round(offset);\n    return function (d) {\n      var scaledValue = s(d);\n      return typeof scaledValue === 'number' ? scaledValue + offset : scaledValue;\n    };\n  }\n\n  return scale;\n}","map":{"version":3,"sources":["C:/remotePackRlab-acab49ee44aa8f06acbfc147116dbc3387885161/node_modules/@visx/axis/lib/utils/getTickPosition.js"],"names":["exports","__esModule","default","getTickPosition","scale","align","s","offset","bandwidth","round","Math","d","scaledValue"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,OAAR,GAAkBC,eAAlB;AAEA;AACA;AACA;;AACA,SAASA,eAAT,CAAyBC,KAAzB,EAAgCC,KAAhC,EAAuC;AACrC,MAAIA,KAAK,KAAK,KAAK,CAAnB,EAAsB;AACpBA,IAAAA,KAAK,GAAG,QAAR;AACD,GAHoC,CAKrC;;;AACA,MAAIC,CAAC,GAAGF,KAAR,CANqC,CAMtB;AACf;;AAEA,MAAIC,KAAK,KAAK,OAAV,IAAqB,eAAeC,CAAxC,EAA2C;AACzC,QAAIC,MAAM,GAAGD,CAAC,CAACE,SAAF,EAAb;AACA,QAAIH,KAAK,KAAK,QAAd,EAAwBE,MAAM,IAAI,CAAV;AACxB,QAAID,CAAC,CAACG,KAAF,EAAJ,EAAeF,MAAM,GAAGG,IAAI,CAACD,KAAL,CAAWF,MAAX,CAAT;AACf,WAAO,UAAUI,CAAV,EAAa;AAClB,UAAIC,WAAW,GAAGN,CAAC,CAACK,CAAD,CAAnB;AACA,aAAO,OAAOC,WAAP,KAAuB,QAAvB,GAAkCA,WAAW,GAAGL,MAAhD,GAAyDK,WAAhE;AACD,KAHD;AAID;;AAED,SAAOR,KAAP;AACD","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = getTickPosition;\n\n/**\n * Create a function that returns a tick position for the given tick value\n */\nfunction getTickPosition(scale, align) {\n  if (align === void 0) {\n    align = 'center';\n  }\n\n  // Broaden type before using 'xxx' in s as typeguard.\n  var s = scale; // For point or band scales,\n  // have to add offset to make the tick at center or end.\n\n  if (align !== 'start' && 'bandwidth' in s) {\n    var offset = s.bandwidth();\n    if (align === 'center') offset /= 2;\n    if (s.round()) offset = Math.round(offset);\n    return function (d) {\n      var scaledValue = s(d);\n      return typeof scaledValue === 'number' ? scaledValue + offset : scaledValue;\n    };\n  }\n\n  return scale;\n}"]},"metadata":{},"sourceType":"script"}