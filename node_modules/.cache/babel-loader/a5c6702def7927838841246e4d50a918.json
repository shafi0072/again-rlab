{"ast":null,"code":"var _jsxFileName = \"F:\\\\Rlab\\\\client\\\\src\\\\Components\\\\Home\\\\DeviceDashBoard\\\\DeviceDashBoard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Navbar from '../../Shared/Navbar';\nimport DeveiceMeter from '../Locations/DeveiceMeter';\nimport firebase from 'firebase/app';\nimport logo from '../../../Resorces/logo_RLAB.png';\nimport './DeviceDashBoard.css';\nimport 'firebase/firestore';\nimport { BrowserRouter as Router, Switch, Route, Link, useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nif (!firebase.apps.length) {\n  firebase.initializeApp({\n    apiKey: \"AIzaSyBXXL_2svIOIRYEArzq7Ai8G8xLQTTTqrU\",\n    authDomain: \"iot-comm.firebaseapp.com\",\n    projectId: \"iot-comm\",\n    storageBucket: \"iot-comm.appspot.com\",\n    messagingSenderId: \"707981957974\",\n    appId: \"1:707981957974:web:226ff54fd30647ed7b14f7\",\n    measurementId: \"G-PPNWG1DPLZ\"\n  });\n} else {\n  firebase.app(); // if already initialized, use that one\n}\n\nconst db = firebase.firestore();\n\nconst DeviceDashBoard = () => {\n  _s();\n\n  let {\n    format,\n    id\n  } = useParams();\n  const [status, setStatus] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  function arrayFunc(arr, key) {\n    let resultArray = [];\n\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i].DeviceID === key) {\n        resultArray = arr[i];\n      }\n    }\n\n    return resultArray;\n  }\n\n  ;\n  useEffect(() => {\n    const userDb = db.collection(\"SOLARPAN01\").onSnapshot(querySnapshot => {\n      const getDataFirebase = [];\n      querySnapshot.forEach(doc => {\n        getDataFirebase.push({ ...doc.data(),\n          key: doc.id\n        });\n        console.log({\n          getDataFirebase\n        });\n      }); // if(getDataFirebase.length > 0){\n      //     const functionalArray = arrayFunc(getDataFirebase, id)\n      //     setStatus(functionalArray)\n      //     setLoading(false)\n      // }\n    });\n    return userDb; // if(format === \"ENER01\"){\n    //     const userDb =  db.collection(\"ENER000001\").onSnapshot((querySnapshot) => {\n    //         const getDataFirebase = [];\n    //         querySnapshot.forEach((doc) => {\n    //           getDataFirebase.push({...doc.data(), key:doc.id});\n    //         });\n    //         if(getDataFirebase.length > 0){\n    //             const functionalArray = arrayFunc(getDataFirebase, id)\n    //             setStatus(functionalArray)\n    //             setLoading(false)\n    //         }\n    //     });\n    //     return userDb\n    // }\n    // else if(format === \"RTD01\"){\n    //     const userDb =  db.collection(\"RTD0000001\").onSnapshot((querySnapshot) => {\n    //         const getDataFirebase = [];\n    //         querySnapshot.forEach((doc) => {\n    //           getDataFirebase.push({...doc.data(), key:doc.id});\n    //         });\n    //         if(getDataFirebase.length > 0){\n    //             const functionalArray = arrayFunc(getDataFirebase, id)\n    //             setStatus(functionalArray)\n    //             setLoading(false)\n    //         }\n    //     });\n    //     return userDb\n    // }\n    // else if(format === \"GTY01\"){\n    //     const userDb =  db.collection(\"GTY0000001\").where().onSnapshot((querySnapshot) => {\n    //         const getDataFirebase = [];\n    //         querySnapshot.forEach((doc) => {\n    //           getDataFirebase.push({...doc.data(), key:doc.id});\n    //         });\n    //         if(getDataFirebase.length > 0){\n    //             const functionalArray = arrayFunc(getDataFirebase, id)\n    //             setStatus(functionalArray)\n    //             setLoading(false)\n    //         }\n    //     });\n    //     return userDb\n    // }\n  }, [loading, format, id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-md-3 dashboard-navbar\",\n      style: {\n        margin: '0',\n        padding: '0'\n      },\n      children: /*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-md-9 dashboard-background text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"\",\n        style: {\n          width: '20%'\n        },\n        className: \"mt-5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-light mt-2\",\n        children: [\"Format: \", format]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DeveiceMeter, {\n        data: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DeviceDashBoard, \"MQoZwSV3qho3QoUllczWTcyqYjk=\", false, function () {\n  return [useParams];\n});\n\n_c = DeviceDashBoard;\nexport default DeviceDashBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeviceDashBoard\");","map":{"version":3,"sources":["F:/Rlab/client/src/Components/Home/DeviceDashBoard/DeviceDashBoard.js"],"names":["React","useEffect","useState","Navbar","DeveiceMeter","firebase","logo","BrowserRouter","Router","Switch","Route","Link","useParams","apps","length","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","db","firestore","DeviceDashBoard","format","id","status","setStatus","loading","setLoading","arrayFunc","arr","key","resultArray","i","DeviceID","userDb","collection","onSnapshot","querySnapshot","getDataFirebase","forEach","doc","push","data","console","log","margin","padding","width"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Navbar from '../../Shared/Navbar';\r\nimport DeveiceMeter from '../Locations/DeveiceMeter';\r\nimport firebase from 'firebase/app';\r\nimport logo from '../../../Resorces/logo_RLAB.png';\r\nimport './DeviceDashBoard.css';\r\nimport 'firebase/firestore';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link,\r\n    useParams\r\n  } from \"react-router-dom\";\r\n\r\nif (!firebase.apps.length) {\r\n    firebase.initializeApp({\r\n        apiKey: \"AIzaSyBXXL_2svIOIRYEArzq7Ai8G8xLQTTTqrU\",\r\n        authDomain: \"iot-comm.firebaseapp.com\",\r\n        projectId: \"iot-comm\",\r\n        storageBucket: \"iot-comm.appspot.com\",\r\n        messagingSenderId: \"707981957974\",\r\n        appId: \"1:707981957974:web:226ff54fd30647ed7b14f7\",\r\n        measurementId: \"G-PPNWG1DPLZ\"\r\n    });\r\n }else {\r\n    firebase.app(); // if already initialized, use that one\r\n }\r\n\r\nconst db = firebase.firestore();\r\n\r\n\r\n\r\n\r\nconst DeviceDashBoard = () => {\r\n    let { format, id } = useParams();\r\n\r\n\r\n    const [status,setStatus] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n    function arrayFunc(arr,key) {\r\n        let resultArray = [];\r\n        for(let i = 0; i < arr.length; i++){\r\n            if(arr[i].DeviceID === key){\r\n                resultArray = arr[i];\r\n            }\r\n        }\r\n        return resultArray\r\n    };\r\n    \r\n    useEffect(() => {\r\n        const userDb =  db.collection(\"SOLARPAN01\").onSnapshot((querySnapshot) => {\r\n            const getDataFirebase = [];\r\n            querySnapshot.forEach((doc) => {\r\n              getDataFirebase.push({...doc.data(), key:doc.id});\r\n              console.log({getDataFirebase});\r\n            });\r\n            \r\n            // if(getDataFirebase.length > 0){\r\n            //     const functionalArray = arrayFunc(getDataFirebase, id)\r\n            //     setStatus(functionalArray)\r\n            //     setLoading(false)\r\n            // }\r\n        });\r\n        return userDb\r\n\r\n        // if(format === \"ENER01\"){\r\n        //     const userDb =  db.collection(\"ENER000001\").onSnapshot((querySnapshot) => {\r\n        //         const getDataFirebase = [];\r\n        //         querySnapshot.forEach((doc) => {\r\n        //           getDataFirebase.push({...doc.data(), key:doc.id});\r\n        //         });\r\n                \r\n        //         if(getDataFirebase.length > 0){\r\n        //             const functionalArray = arrayFunc(getDataFirebase, id)\r\n        //             setStatus(functionalArray)\r\n        //             setLoading(false)\r\n        //         }\r\n        //     });\r\n        //     return userDb\r\n        // }\r\n        // else if(format === \"RTD01\"){\r\n        //     const userDb =  db.collection(\"RTD0000001\").onSnapshot((querySnapshot) => {\r\n        //         const getDataFirebase = [];\r\n        //         querySnapshot.forEach((doc) => {\r\n        //           getDataFirebase.push({...doc.data(), key:doc.id});\r\n        //         });\r\n                \r\n        //         if(getDataFirebase.length > 0){\r\n        //             const functionalArray = arrayFunc(getDataFirebase, id)\r\n        //             setStatus(functionalArray)\r\n        //             setLoading(false)\r\n        //         }\r\n        //     });\r\n        //     return userDb\r\n        // }\r\n        // else if(format === \"GTY01\"){\r\n        //     const userDb =  db.collection(\"GTY0000001\").where().onSnapshot((querySnapshot) => {\r\n        //         const getDataFirebase = [];\r\n        //         querySnapshot.forEach((doc) => {\r\n        //           getDataFirebase.push({...doc.data(), key:doc.id});\r\n        //         });\r\n                \r\n        //         if(getDataFirebase.length > 0){\r\n        //             const functionalArray = arrayFunc(getDataFirebase, id)\r\n        //             setStatus(functionalArray)\r\n        //             setLoading(false)\r\n        //         }\r\n        //     });\r\n        //     return userDb\r\n        // }\r\n        \r\n        \r\n     \r\n    }, [loading, format, id]);\r\n  \r\n    return (\r\n        <div className='row'>\r\n            <div className=\"col-md-3 dashboard-navbar\" style={{margin:'0', padding:'0'}}>\r\n                <Navbar/>\r\n            </div>\r\n            <div className=\"col-md-9 dashboard-background text-center\">\r\n            <img src={logo} alt=\"\" style={{width:'20%'}} className='mt-5' />\r\n                <h1 className='text-light mt-2'>Format: {format}</h1>\r\n                <DeveiceMeter data={status}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DeviceDashBoard;"]},"metadata":{},"sourceType":"module"}