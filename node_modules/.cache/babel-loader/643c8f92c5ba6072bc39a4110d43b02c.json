{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2019 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PreciseDate = void 0;\nconst FULL_ISO_REG = /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d{4,9}Z/;\nconst NO_BIG_INT = 'BigInt only available in Node >= v10.7. Consider using getFullTimeString instead.';\nvar Sign;\n\n(function (Sign) {\n  Sign[Sign[\"NEGATIVE\"] = -1] = \"NEGATIVE\";\n  Sign[Sign[\"POSITIVE\"] = 1] = \"POSITIVE\";\n  Sign[Sign[\"ZERO\"] = 0] = \"ZERO\";\n})(Sign || (Sign = {}));\n/**\n * The native Date object.\n * @external Date\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date}\n */\n\n/**\n * @typedef {array} DateTuple\n * @property {number} 0 Represents seconds of UTC time since Unix epoch\n *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n *     9999-12-31T23:59:59Z inclusive.\n * @property {number} 1 Non-negative fractions of a second at nanosecond\n *     resolution. Negative second values with fractions must still have\n *     non-negative nanos values that count forward in time. Must be from 0 to\n *     999,999,999 inclusive.\n */\n\n/**\n * @typedef {object} DateStruct\n * @property {number} seconds Represents seconds of UTC time since Unix epoch\n *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n *     9999-12-31T23:59:59Z inclusive.\n * @property {number} nanos Non-negative fractions of a second at nanosecond\n *     resolution. Negative second values with fractions must still have\n *     non-negative nanos values that count forward in time. Must be from 0 to\n *     999,999,999 inclusive.\n */\n\n/**\n * Date object with nanosecond precision. Supports all standard Date arguments\n * in addition to several custom types as noted below.\n *\n * @class\n * @extends external:Date\n *\n * @param {number|string|bigint|Date|DateTuple|DateStruct} [time] The time\n *     value.\n * @param {...number} [dateFields] Additional date fields (month, date, hours,\n *     minutes, seconds, milliseconds, microseconds, nanoseconds).\n *\n * @example <caption>With a RFC 3339 formatted string.</caption>\n * const date = new PreciseDate('2019-02-08T10:34:29.481145231Z');\n *\n * @example <caption>With a nanosecond timestamp string.</caption>\n * const date = new PreciseDate('1549622069481320032');\n *\n * @example <caption>With a BigInt (requires Node >= v10.7)</caption>\n * const date = new PreciseDate(1549622069481320032n);\n *\n * @example <caption>With a tuple containing seconds and nanoseconds.</caption>\n * const date = new PreciseDate([1549622069, 481320032]);\n *\n * @example <caption>With an object containing `seconds` and `nanos`</caption>\n * const date = new PreciseDate({seconds: 1549622069, nanos: 481320032});\n *\n * @example <caption>Specifiying date fields</caption>\n * const date = new PreciseDate(2018, 5, 14, 41, 11, 34, 123, 874, 321);\n */\n\n\nclass PreciseDate extends Date {\n  constructor(time) {\n    super();\n    this._micros = 0;\n    this._nanos = 0;\n\n    if (time && typeof time !== 'number' && !(time instanceof Date)) {\n      this.setFullTime(PreciseDate.parseFull(time));\n      return;\n    } // eslint-disable-next-line prefer-rest-params\n\n\n    const args = Array.from(arguments);\n    const dateFields = args.slice(0, 7);\n    const date = new Date(...dateFields);\n    const nanos = args.length === 9 ? args.pop() : 0;\n    const micros = args.length === 8 ? args.pop() : 0;\n    this.setTime(date.getTime());\n    this.setMicroseconds(micros);\n    this.setNanoseconds(nanos);\n  }\n  /**\n   * Returns the specified date represented in nanoseconds according to\n   * universal time.\n   *\n   * **NOTE:** Because this method returns a `BigInt` it requires Node >= v10.7.\n   * Use {@link PreciseDate#getFullTimeString} to get the time as a string.\n   *\n   * @see {@link https://github.com/tc39/proposal-bigint|BigInt}\n   *\n   * @throws {error} If `BigInt` is unavailable.\n   * @returns {bigint}\n   *\n   * @example\n   * const date = new PreciseDate('2019-02-08T10:34:29.481145231Z');\n   *\n   * console.log(date.getFullTime());\n   * // expected output: 1549622069481145231n\n   */\n\n\n  getFullTime() {\n    if (typeof BigInt !== 'function') {\n      throw new Error(NO_BIG_INT);\n    }\n\n    return BigInt(this.getFullTimeString());\n  }\n  /**\n   * Returns a string of the specified date represented in nanoseconds according\n   * to universal time.\n   *\n   * @returns {string}\n   *\n   * @example\n   * const date = new PreciseDate('2019-02-08T10:34:29.481145231Z');\n   *\n   * console.log(date.getFullTimeString());\n   * // expected output: \"1549622069481145231\"\n   */\n\n\n  getFullTimeString() {\n    const seconds = this._getSeconds();\n\n    let nanos = this._getNanos();\n\n    if (nanos && Math.sign(seconds) === Sign.NEGATIVE) {\n      nanos = 1e9 - nanos;\n    }\n\n    return `${seconds}${padLeft(nanos, 9)}`;\n  }\n  /**\n   * Returns the microseconds in the specified date according to universal time.\n   *\n   * @returns {number}\n   *\n   * @example\n   * const date = new PreciseDate('2019-02-08T10:34:29.481145Z');\n   *\n   * console.log(date.getMicroseconds());\n   * // expected output: 145\n   */\n\n\n  getMicroseconds() {\n    return this._micros;\n  }\n  /**\n   * Returns the nanoseconds in the specified date according to universal time.\n   *\n   * @returns {number}\n   *\n   * @example\n   * const date = new PreciseDate('2019-02-08T10:34:29.481145231Z');\n   *\n   * console.log(date.getNanoseconds());\n   * // expected output: 231\n   */\n\n\n  getNanoseconds() {\n    return this._nanos;\n  }\n  /**\n   * Sets the microseconds for a specified date according to universal time.\n   *\n   * @param {number} microseconds A number representing the microseconds.\n   * @returns {string} Returns a string representing the nanoseconds in the\n   *     specified date according to universal time.\n   *\n   * @example\n   * const date = new PreciseDate();\n   *\n   * date.setMicroseconds(149);\n   *\n   * console.log(date.getMicroseconds());\n   * // expected output: 149\n   */\n\n\n  setMicroseconds(micros) {\n    const abs = Math.abs(micros);\n    let millis = this.getUTCMilliseconds();\n\n    if (abs >= 1000) {\n      millis += Math.floor(abs / 1000) * Math.sign(micros);\n      micros %= 1000;\n    }\n\n    if (Math.sign(micros) === Sign.NEGATIVE) {\n      millis -= 1;\n      micros += 1000;\n    }\n\n    this._micros = micros;\n    this.setUTCMilliseconds(millis);\n    return this.getFullTimeString();\n  }\n  /**\n   * Sets the nanoseconds for a specified date according to universal time.\n   *\n   * @param {number} nanoseconds A number representing the nanoseconds.\n   * @returns {string} Returns a string representing the nanoseconds in the\n   *     specified date according to universal time.\n   *\n   * @example\n   * const date = new PreciseDate();\n   *\n   * date.setNanoseconds(231);\n   *\n   * console.log(date.getNanoseconds());\n   * // expected output: 231\n   */\n\n\n  setNanoseconds(nanos) {\n    const abs = Math.abs(nanos);\n    let micros = this._micros;\n\n    if (abs >= 1000) {\n      micros += Math.floor(abs / 1000) * Math.sign(nanos);\n      nanos %= 1000;\n    }\n\n    if (Math.sign(nanos) === Sign.NEGATIVE) {\n      micros -= 1;\n      nanos += 1000;\n    }\n\n    this._nanos = nanos;\n    return this.setMicroseconds(micros);\n  }\n  /**\n   * Sets the PreciseDate object to the time represented by a number of\n   * nanoseconds since January 1, 1970, 00:00:00 UTC.\n   *\n   * @param {bigint|number|string} time Value representing the number of\n   *     nanoseconds since January 1, 1970, 00:00:00 UTC.\n   * @returns {string} Returns a string representing the nanoseconds in the\n   *     specified date according to universal time (effectively, the value of\n   *     the argument).\n   *\n   * @see {@link https://github.com/tc39/proposal-bigint|BigInt}\n   *\n   * @example <caption>With a nanosecond string.</caption>\n   * const date = new PreciseDate();\n   * date.setFullTime('1549622069481145231');\n   *\n   * @example <caption>With a BigInt</caption>\n   * date.setFullTime(1549622069481145231n);\n   */\n\n\n  setFullTime(time) {\n    if (typeof time !== 'string') {\n      time = time.toString();\n    }\n\n    const sign = Math.sign(Number(time));\n    time = time.replace(/^-/, '');\n    const seconds = Number(time.substr(0, time.length - 9)) * sign;\n    const nanos = Number(time.substr(-9)) * sign;\n    this.setTime(seconds * 1000);\n    return this.setNanoseconds(nanos);\n  }\n  /**\n   * Sets the PreciseDate object to the time represented by a number of\n   * milliseconds since January 1, 1970, 00:00:00 UTC. Calling this method will\n   * reset both the microseconds and nanoseconds to 0.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setTime|Date#setTime}\n   *\n   * @param {number} time Value representing the number of milliseconds since\n   *     January 1, 1970, 00:00:00 UTC.\n   * @returns {string} The number of milliseconds between January 1, 1970,\n   *     00:00:00 UTC and the updated date (effectively, the value of the\n   *     argument).\n   */\n\n\n  setTime(time) {\n    this._micros = 0;\n    this._nanos = 0;\n    return super.setTime(time);\n  }\n  /**\n   * Returns a string in RFC 3339 format. Unlike the native `Date#toISOString`,\n   * this will return 9 digits to represent sub-second precision.\n   *\n   * @see {@link https://tools.ietf.org/html/rfc3339|RFC 3339}\n   *\n   * @returns {string}\n   *\n   * @example\n   * const date = new PreciseDate(1549622069481145231n);\n   *\n   * console.log(date.toISOString());\n   * // expected output: \"2019-02-08T10:34:29.481145231Z\"\n   */\n\n\n  toISOString() {\n    const micros = padLeft(this._micros, 3);\n    const nanos = padLeft(this._nanos, 3);\n    return super.toISOString().replace(/z$/i, `${micros}${nanos}Z`);\n  }\n  /**\n   * Returns an object representing the specified date according to universal\n   * time.\n   *\n   * @see {@link https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#timestamp|google.protobuf.Timestamp}\n   *\n   * @returns {DateStruct}\n   *\n   * @example\n   * const date = new PreciseDate('2019-02-08T10:34:29.481145231Z');\n   *\n   * console.log(date.toStruct());\n   * // expected output: {seconds: 1549622069, nanos: 481145231}\n   */\n\n\n  toStruct() {\n    let seconds = this._getSeconds();\n\n    const nanos = this._getNanos();\n\n    const sign = Math.sign(seconds); // These objects are essentially a mirror of protobuf timestamps.\n    // `nanos` must always count forward in time, even if the date is <= Unix\n    // epoch. To do this we just need to count backwards 1 second and return the\n    // nanoseconds as is.\n\n    if (sign === Sign.NEGATIVE && nanos) {\n      seconds -= 1;\n    }\n\n    return {\n      seconds,\n      nanos\n    };\n  }\n  /**\n   * Returns a tuple representing the specified date according to universal\n   * time.\n   *\n   * @returns {DateTuple}\n   *\n   * @example\n   * const date = new PreciseDate('2019-02-08T10:34:29.481145231Z');\n   *\n   * console.log(date.toTuple());\n   * // expected output: [1549622069, 481145231]\n   */\n\n\n  toTuple() {\n    const {\n      seconds,\n      nanos\n    } = this.toStruct();\n    return [seconds, nanos];\n  }\n  /**\n   * Returns the total number of seconds in the specified date since Unix epoch.\n   * Numbers representing < epoch will be negative.\n   *\n   * @private\n   *\n   * @returns {number}\n   */\n\n\n  _getSeconds() {\n    const time = this.getTime();\n    const sign = Math.sign(time);\n    return Math.floor(Math.abs(time) / 1000) * sign;\n  }\n  /**\n   * Returns the sub-second precision of the specified date. This will always be\n   * a positive number.\n   *\n   * @private\n   *\n   * @returns {number}\n   */\n\n\n  _getNanos() {\n    const msInNanos = this.getUTCMilliseconds() * 1e6;\n    const microsInNanos = this._micros * 1000;\n    return this._nanos + msInNanos + microsInNanos;\n  }\n  /**\n   * Parses a precise time.\n   *\n   * @static\n   *\n   * @param {string|bigint|DateTuple|DateStruct} time The precise time value.\n   * @returns {string} Returns a string representing the nanoseconds in the\n   *     specified date according to universal time.\n   *\n   * @example <caption>From a RFC 3339 formatted string.</caption>\n   * const time = PreciseDate.parseFull('2019-02-08T10:34:29.481145231Z');\n   * console.log(time); // expected output: \"1549622069481145231\"\n   *\n   * @example <caption>From a nanosecond timestamp string.</caption>\n   * const time = PreciseDate.parseFull('1549622069481145231');\n   * console.log(time); // expected output: \"1549622069481145231\"\n   *\n   * @example <caption>From a BigInt (requires Node >= v10.7)</caption>\n   * const time = PreciseDate.parseFull(1549622069481145231n);\n   * console.log(time); // expected output: \"1549622069481145231\"\n   *\n   * @example <caption>From a tuple.</caption>\n   * const time = PreciseDate.parseFull([1549622069, 481145231]);\n   * console.log(time); // expected output: \"1549622069481145231\"\n   *\n   * @example <caption>From an object.</caption>\n   * const struct = {seconds: 1549622069, nanos: 481145231};\n   * const time = PreciseDate.parseFull(struct);\n   * console.log(time); // expected output: \"1549622069481145231\"\n   */\n\n\n  static parseFull(time) {\n    const date = new PreciseDate();\n\n    if (Array.isArray(time)) {\n      const [seconds, nanos] = time;\n      time = {\n        seconds,\n        nanos\n      };\n    }\n\n    if (isFullTime(time)) {\n      date.setFullTime(time);\n    } else if (isStruct(time)) {\n      const {\n        seconds,\n        nanos\n      } = parseProto(time);\n      date.setTime(seconds * 1000);\n      date.setNanoseconds(nanos);\n    } else if (isFullISOString(time)) {\n      date.setFullTime(parseFullISO(time));\n    } else {\n      date.setTime(new Date(time).getTime());\n    }\n\n    return date.getFullTimeString();\n  }\n  /**\n   * Accepts the same number parameters as the PreciseDate constructor, but\n   * treats them as UTC. It returns a string that represents the number of\n   * nanoseconds since January 1, 1970, 00:00:00 UTC.\n   *\n   * **NOTE:** Because this method returns a `BigInt` it requires Node >= v10.7.\n   *\n   * @see {@link https://github.com/tc39/proposal-bigint|BigInt}\n   *\n   * @static\n   *\n   * @throws {error} If `BigInt` is unavailable.\n   *\n   * @param {...number} [dateFields] The date fields.\n   * @returns {bigint}\n   *\n   * @example\n   * const time = PreciseDate.fullUTC(2019, 1, 8, 10, 34, 29, 481, 145, 231);\n   * console.log(time); // expected output: 1549622069481145231n\n   */\n\n\n  static fullUTC(...args) {\n    if (typeof BigInt !== 'function') {\n      throw new Error(NO_BIG_INT);\n    }\n\n    return BigInt(PreciseDate.fullUTCString(...args));\n  }\n  /**\n   * Accepts the same number parameters as the PreciseDate constructor, but\n   * treats them as UTC. It returns a string that represents the number of\n   * nanoseconds since January 1, 1970, 00:00:00 UTC.\n   *\n   * @static\n   *\n   * @param {...number} [dateFields] The date fields.\n   * @returns {string}\n   *\n   * @example\n   * const time = PreciseDate.fullUTCString(2019, 1, 8, 10, 34, 29, 481, 145,\n   * 231); console.log(time); // expected output: '1549622069481145231'\n   */\n\n\n  static fullUTCString(...args) {\n    const milliseconds = Date.UTC(...args.slice(0, 7));\n    const date = new PreciseDate(milliseconds);\n\n    if (args.length === 9) {\n      date.setNanoseconds(args.pop());\n    }\n\n    if (args.length === 8) {\n      date.setMicroseconds(args.pop());\n    }\n\n    return date.getFullTimeString();\n  }\n\n}\n\nexports.PreciseDate = PreciseDate;\n/**\n * Parses a RFC 3339 formatted string representation of the date, and returns\n * a string representing the nanoseconds since January 1, 1970, 00:00:00.\n *\n * @private\n *\n * @param {string} time The RFC 3339 formatted string.\n * @returns {string}\n */\n\nfunction parseFullISO(time) {\n  let digits = '0';\n  time = time.replace(/\\.(\\d+)/, ($0, $1) => {\n    digits = $1;\n    return '.000';\n  });\n  const nanos = Number(padRight(digits, 9));\n  const date = new PreciseDate(time);\n  return date.setNanoseconds(nanos);\n}\n/**\n * Normalizes a {@link google.protobuf.Timestamp} object.\n *\n * @private\n *\n * @param {google.protobuf.Timestamp} timestamp The timestamp object.\n * @returns {DateStruct}\n */\n\n\nfunction parseProto({\n  seconds = 0,\n  nanos = 0\n}) {\n  if (typeof seconds.toNumber === 'function') {\n    seconds = seconds.toNumber();\n  }\n\n  seconds = Number(seconds);\n  nanos = Number(nanos);\n  return {\n    seconds,\n    nanos\n  };\n}\n/**\n * Checks to see if time value is specified in nanoseconds. We assume that all\n * BigInt and string timestamps represent nanoseconds.\n *\n * @private\n *\n * @param {*} time The time to check.\n * @returns {boolean}\n */\n\n\nfunction isFullTime(time) {\n  return typeof time === 'bigint' || typeof time === 'string' && /^\\d+$/.test(time);\n}\n/**\n * Checks to see if time value is a {@link DateStruct}.\n *\n * @private\n *\n * @param {*} time The time to check.\n * @returns {boolean}\n */\n\n\nfunction isStruct(time) {\n  return typeof time === 'object' && typeof time.seconds !== 'undefined' || typeof time.nanos === 'number';\n}\n/**\n * Checks to see if the time value is a RFC 3339 formatted string.\n *\n * @private\n *\n * @param {*} time The time to check.\n * @returns {boolean}\n */\n\n\nfunction isFullISOString(time) {\n  return typeof time === 'string' && FULL_ISO_REG.test(time);\n}\n/**\n * Pads a number/string with \"0\" to the left.\n *\n * @private\n *\n * @param {string|number} n The number/string to pad.\n * @param {number} min The min size of the padded string.\n * @returns {string}\n */\n\n\nfunction padLeft(n, min) {\n  const padding = getPadding(n, min);\n  return `${padding}${n}`;\n}\n/**\n * Pads a number/string with \"0\" to the right.\n *\n * @private\n *\n * @param {string|number} n The number/string to pad.\n * @param {number} min The min size of the padded string.\n * @returns {string}\n */\n\n\nfunction padRight(n, min) {\n  const padding = getPadding(n, min);\n  return `${n}${padding}`;\n}\n/**\n * Creates padding based on current size and min size needed.\n *\n * @private\n *\n * @param {string|number} n The number/string to pad.\n * @param {number} [min=3] The min size of the padded string.\n * @returns {string}\n */\n\n\nfunction getPadding(n, min) {\n  const size = Math.max(min - n.toString().length, 0);\n  return '0'.repeat(size);\n}","map":{"version":3,"sources":["F:/Rlab/client/node_modules/@google-cloud/precise-date/build/src/index.js"],"names":["Object","defineProperty","exports","value","PreciseDate","FULL_ISO_REG","NO_BIG_INT","Sign","Date","constructor","time","_micros","_nanos","setFullTime","parseFull","args","Array","from","arguments","dateFields","slice","date","nanos","length","pop","micros","setTime","getTime","setMicroseconds","setNanoseconds","getFullTime","BigInt","Error","getFullTimeString","seconds","_getSeconds","_getNanos","Math","sign","NEGATIVE","padLeft","getMicroseconds","getNanoseconds","abs","millis","getUTCMilliseconds","floor","setUTCMilliseconds","toString","Number","replace","substr","toISOString","toStruct","toTuple","msInNanos","microsInNanos","isArray","isFullTime","isStruct","parseProto","isFullISOString","parseFullISO","fullUTC","fullUTCString","milliseconds","UTC","digits","$0","$1","padRight","toNumber","test","n","min","padding","getPadding","size","max","repeat"],"mappings":"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","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2019 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PreciseDate = void 0;\nconst FULL_ISO_REG = /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d{4,9}Z/;\nconst NO_BIG_INT = 'BigInt only available in Node >= v10.7. Consider using getFullTimeString instead.';\nvar Sign;\n(function (Sign) {\n    Sign[Sign[\"NEGATIVE\"] = -1] = \"NEGATIVE\";\n    Sign[Sign[\"POSITIVE\"] = 1] = \"POSITIVE\";\n    Sign[Sign[\"ZERO\"] = 0] = \"ZERO\";\n})(Sign || (Sign = {}));\n/**\n * The native Date object.\n * @external Date\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date}\n */\n/**\n * @typedef {array} DateTuple\n * @property {number} 0 Represents seconds of UTC time since Unix epoch\n *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n *     9999-12-31T23:59:59Z inclusive.\n * @property {number} 1 Non-negative fractions of a second at nanosecond\n *     resolution. Negative second values with fractions must still have\n *     non-negative nanos values that count forward in time. Must be from 0 to\n *     999,999,999 inclusive.\n */\n/**\n * @typedef {object} DateStruct\n * @property {number} seconds Represents seconds of UTC time since Unix epoch\n *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n *     9999-12-31T23:59:59Z inclusive.\n * @property {number} nanos Non-negative fractions of a second at nanosecond\n *     resolution. Negative second values with fractions must still have\n *     non-negative nanos values that count forward in time. Must be from 0 to\n *     999,999,999 inclusive.\n */\n/**\n * Date object with nanosecond precision. Supports all standard Date arguments\n * in addition to several custom types as noted below.\n *\n * @class\n * @extends external:Date\n *\n * @param {number|string|bigint|Date|DateTuple|DateStruct} [time] The time\n *     value.\n * @param {...number} [dateFields] Additional date fields (month, date, hours,\n *     minutes, seconds, milliseconds, microseconds, nanoseconds).\n *\n * @example <caption>With a RFC 3339 formatted string.</caption>\n * const date = new PreciseDate('2019-02-08T10:34:29.481145231Z');\n *\n * @example <caption>With a nanosecond timestamp string.</caption>\n * const date = new PreciseDate('1549622069481320032');\n *\n * @example <caption>With a BigInt (requires Node >= v10.7)</caption>\n * const date = new PreciseDate(1549622069481320032n);\n *\n * @example <caption>With a tuple containing seconds and nanoseconds.</caption>\n * const date = new PreciseDate([1549622069, 481320032]);\n *\n * @example <caption>With an object containing `seconds` and `nanos`</caption>\n * const date = new PreciseDate({seconds: 1549622069, nanos: 481320032});\n *\n * @example <caption>Specifiying date fields</caption>\n * const date = new PreciseDate(2018, 5, 14, 41, 11, 34, 123, 874, 321);\n */\nclass PreciseDate extends Date {\n    constructor(time) {\n        super();\n        this._micros = 0;\n        this._nanos = 0;\n        if (time && typeof time !== 'number' && !(time instanceof Date)) {\n            this.setFullTime(PreciseDate.parseFull(time));\n            return;\n        }\n        // eslint-disable-next-line prefer-rest-params\n        const args = Array.from(arguments);\n        const dateFields = args.slice(0, 7);\n        const date = new Date(...dateFields);\n        const nanos = args.length === 9 ? args.pop() : 0;\n        const micros = args.length === 8 ? args.pop() : 0;\n        this.setTime(date.getTime());\n        this.setMicroseconds(micros);\n        this.setNanoseconds(nanos);\n    }\n    /**\n     * Returns the specified date represented in nanoseconds according to\n     * universal time.\n     *\n     * **NOTE:** Because this method returns a `BigInt` it requires Node >= v10.7.\n     * Use {@link PreciseDate#getFullTimeString} to get the time as a string.\n     *\n     * @see {@link https://github.com/tc39/proposal-bigint|BigInt}\n     *\n     * @throws {error} If `BigInt` is unavailable.\n     * @returns {bigint}\n     *\n     * @example\n     * const date = new PreciseDate('2019-02-08T10:34:29.481145231Z');\n     *\n     * console.log(date.getFullTime());\n     * // expected output: 1549622069481145231n\n     */\n    getFullTime() {\n        if (typeof BigInt !== 'function') {\n            throw new Error(NO_BIG_INT);\n        }\n        return BigInt(this.getFullTimeString());\n    }\n    /**\n     * Returns a string of the specified date represented in nanoseconds according\n     * to universal time.\n     *\n     * @returns {string}\n     *\n     * @example\n     * const date = new PreciseDate('2019-02-08T10:34:29.481145231Z');\n     *\n     * console.log(date.getFullTimeString());\n     * // expected output: \"1549622069481145231\"\n     */\n    getFullTimeString() {\n        const seconds = this._getSeconds();\n        let nanos = this._getNanos();\n        if (nanos && Math.sign(seconds) === Sign.NEGATIVE) {\n            nanos = 1e9 - nanos;\n        }\n        return `${seconds}${padLeft(nanos, 9)}`;\n    }\n    /**\n     * Returns the microseconds in the specified date according to universal time.\n     *\n     * @returns {number}\n     *\n     * @example\n     * const date = new PreciseDate('2019-02-08T10:34:29.481145Z');\n     *\n     * console.log(date.getMicroseconds());\n     * // expected output: 145\n     */\n    getMicroseconds() {\n        return this._micros;\n    }\n    /**\n     * Returns the nanoseconds in the specified date according to universal time.\n     *\n     * @returns {number}\n     *\n     * @example\n     * const date = new PreciseDate('2019-02-08T10:34:29.481145231Z');\n     *\n     * console.log(date.getNanoseconds());\n     * // expected output: 231\n     */\n    getNanoseconds() {\n        return this._nanos;\n    }\n    /**\n     * Sets the microseconds for a specified date according to universal time.\n     *\n     * @param {number} microseconds A number representing the microseconds.\n     * @returns {string} Returns a string representing the nanoseconds in the\n     *     specified date according to universal time.\n     *\n     * @example\n     * const date = new PreciseDate();\n     *\n     * date.setMicroseconds(149);\n     *\n     * console.log(date.getMicroseconds());\n     * // expected output: 149\n     */\n    setMicroseconds(micros) {\n        const abs = Math.abs(micros);\n        let millis = this.getUTCMilliseconds();\n        if (abs >= 1000) {\n            millis += Math.floor(abs / 1000) * Math.sign(micros);\n            micros %= 1000;\n        }\n        if (Math.sign(micros) === Sign.NEGATIVE) {\n            millis -= 1;\n            micros += 1000;\n        }\n        this._micros = micros;\n        this.setUTCMilliseconds(millis);\n        return this.getFullTimeString();\n    }\n    /**\n     * Sets the nanoseconds for a specified date according to universal time.\n     *\n     * @param {number} nanoseconds A number representing the nanoseconds.\n     * @returns {string} Returns a string representing the nanoseconds in the\n     *     specified date according to universal time.\n     *\n     * @example\n     * const date = new PreciseDate();\n     *\n     * date.setNanoseconds(231);\n     *\n     * console.log(date.getNanoseconds());\n     * // expected output: 231\n     */\n    setNanoseconds(nanos) {\n        const abs = Math.abs(nanos);\n        let micros = this._micros;\n        if (abs >= 1000) {\n            micros += Math.floor(abs / 1000) * Math.sign(nanos);\n            nanos %= 1000;\n        }\n        if (Math.sign(nanos) === Sign.NEGATIVE) {\n            micros -= 1;\n            nanos += 1000;\n        }\n        this._nanos = nanos;\n        return this.setMicroseconds(micros);\n    }\n    /**\n     * Sets the PreciseDate object to the time represented by a number of\n     * nanoseconds since January 1, 1970, 00:00:00 UTC.\n     *\n     * @param {bigint|number|string} time Value representing the number of\n     *     nanoseconds since January 1, 1970, 00:00:00 UTC.\n     * @returns {string} Returns a string representing the nanoseconds in the\n     *     specified date according to universal time (effectively, the value of\n     *     the argument).\n     *\n     * @see {@link https://github.com/tc39/proposal-bigint|BigInt}\n     *\n     * @example <caption>With a nanosecond string.</caption>\n     * const date = new PreciseDate();\n     * date.setFullTime('1549622069481145231');\n     *\n     * @example <caption>With a BigInt</caption>\n     * date.setFullTime(1549622069481145231n);\n     */\n    setFullTime(time) {\n        if (typeof time !== 'string') {\n            time = time.toString();\n        }\n        const sign = Math.sign(Number(time));\n        time = time.replace(/^-/, '');\n        const seconds = Number(time.substr(0, time.length - 9)) * sign;\n        const nanos = Number(time.substr(-9)) * sign;\n        this.setTime(seconds * 1000);\n        return this.setNanoseconds(nanos);\n    }\n    /**\n     * Sets the PreciseDate object to the time represented by a number of\n     * milliseconds since January 1, 1970, 00:00:00 UTC. Calling this method will\n     * reset both the microseconds and nanoseconds to 0.\n     *\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setTime|Date#setTime}\n     *\n     * @param {number} time Value representing the number of milliseconds since\n     *     January 1, 1970, 00:00:00 UTC.\n     * @returns {string} The number of milliseconds between January 1, 1970,\n     *     00:00:00 UTC and the updated date (effectively, the value of the\n     *     argument).\n     */\n    setTime(time) {\n        this._micros = 0;\n        this._nanos = 0;\n        return super.setTime(time);\n    }\n    /**\n     * Returns a string in RFC 3339 format. Unlike the native `Date#toISOString`,\n     * this will return 9 digits to represent sub-second precision.\n     *\n     * @see {@link https://tools.ietf.org/html/rfc3339|RFC 3339}\n     *\n     * @returns {string}\n     *\n     * @example\n     * const date = new PreciseDate(1549622069481145231n);\n     *\n     * console.log(date.toISOString());\n     * // expected output: \"2019-02-08T10:34:29.481145231Z\"\n     */\n    toISOString() {\n        const micros = padLeft(this._micros, 3);\n        const nanos = padLeft(this._nanos, 3);\n        return super.toISOString().replace(/z$/i, `${micros}${nanos}Z`);\n    }\n    /**\n     * Returns an object representing the specified date according to universal\n     * time.\n     *\n     * @see {@link https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#timestamp|google.protobuf.Timestamp}\n     *\n     * @returns {DateStruct}\n     *\n     * @example\n     * const date = new PreciseDate('2019-02-08T10:34:29.481145231Z');\n     *\n     * console.log(date.toStruct());\n     * // expected output: {seconds: 1549622069, nanos: 481145231}\n     */\n    toStruct() {\n        let seconds = this._getSeconds();\n        const nanos = this._getNanos();\n        const sign = Math.sign(seconds);\n        // These objects are essentially a mirror of protobuf timestamps.\n        // `nanos` must always count forward in time, even if the date is <= Unix\n        // epoch. To do this we just need to count backwards 1 second and return the\n        // nanoseconds as is.\n        if (sign === Sign.NEGATIVE && nanos) {\n            seconds -= 1;\n        }\n        return { seconds, nanos };\n    }\n    /**\n     * Returns a tuple representing the specified date according to universal\n     * time.\n     *\n     * @returns {DateTuple}\n     *\n     * @example\n     * const date = new PreciseDate('2019-02-08T10:34:29.481145231Z');\n     *\n     * console.log(date.toTuple());\n     * // expected output: [1549622069, 481145231]\n     */\n    toTuple() {\n        const { seconds, nanos } = this.toStruct();\n        return [seconds, nanos];\n    }\n    /**\n     * Returns the total number of seconds in the specified date since Unix epoch.\n     * Numbers representing < epoch will be negative.\n     *\n     * @private\n     *\n     * @returns {number}\n     */\n    _getSeconds() {\n        const time = this.getTime();\n        const sign = Math.sign(time);\n        return Math.floor(Math.abs(time) / 1000) * sign;\n    }\n    /**\n     * Returns the sub-second precision of the specified date. This will always be\n     * a positive number.\n     *\n     * @private\n     *\n     * @returns {number}\n     */\n    _getNanos() {\n        const msInNanos = this.getUTCMilliseconds() * 1e6;\n        const microsInNanos = this._micros * 1000;\n        return this._nanos + msInNanos + microsInNanos;\n    }\n    /**\n     * Parses a precise time.\n     *\n     * @static\n     *\n     * @param {string|bigint|DateTuple|DateStruct} time The precise time value.\n     * @returns {string} Returns a string representing the nanoseconds in the\n     *     specified date according to universal time.\n     *\n     * @example <caption>From a RFC 3339 formatted string.</caption>\n     * const time = PreciseDate.parseFull('2019-02-08T10:34:29.481145231Z');\n     * console.log(time); // expected output: \"1549622069481145231\"\n     *\n     * @example <caption>From a nanosecond timestamp string.</caption>\n     * const time = PreciseDate.parseFull('1549622069481145231');\n     * console.log(time); // expected output: \"1549622069481145231\"\n     *\n     * @example <caption>From a BigInt (requires Node >= v10.7)</caption>\n     * const time = PreciseDate.parseFull(1549622069481145231n);\n     * console.log(time); // expected output: \"1549622069481145231\"\n     *\n     * @example <caption>From a tuple.</caption>\n     * const time = PreciseDate.parseFull([1549622069, 481145231]);\n     * console.log(time); // expected output: \"1549622069481145231\"\n     *\n     * @example <caption>From an object.</caption>\n     * const struct = {seconds: 1549622069, nanos: 481145231};\n     * const time = PreciseDate.parseFull(struct);\n     * console.log(time); // expected output: \"1549622069481145231\"\n     */\n    static parseFull(time) {\n        const date = new PreciseDate();\n        if (Array.isArray(time)) {\n            const [seconds, nanos] = time;\n            time = { seconds, nanos };\n        }\n        if (isFullTime(time)) {\n            date.setFullTime(time);\n        }\n        else if (isStruct(time)) {\n            const { seconds, nanos } = parseProto(time);\n            date.setTime(seconds * 1000);\n            date.setNanoseconds(nanos);\n        }\n        else if (isFullISOString(time)) {\n            date.setFullTime(parseFullISO(time));\n        }\n        else {\n            date.setTime(new Date(time).getTime());\n        }\n        return date.getFullTimeString();\n    }\n    /**\n     * Accepts the same number parameters as the PreciseDate constructor, but\n     * treats them as UTC. It returns a string that represents the number of\n     * nanoseconds since January 1, 1970, 00:00:00 UTC.\n     *\n     * **NOTE:** Because this method returns a `BigInt` it requires Node >= v10.7.\n     *\n     * @see {@link https://github.com/tc39/proposal-bigint|BigInt}\n     *\n     * @static\n     *\n     * @throws {error} If `BigInt` is unavailable.\n     *\n     * @param {...number} [dateFields] The date fields.\n     * @returns {bigint}\n     *\n     * @example\n     * const time = PreciseDate.fullUTC(2019, 1, 8, 10, 34, 29, 481, 145, 231);\n     * console.log(time); // expected output: 1549622069481145231n\n     */\n    static fullUTC(...args) {\n        if (typeof BigInt !== 'function') {\n            throw new Error(NO_BIG_INT);\n        }\n        return BigInt(PreciseDate.fullUTCString(...args));\n    }\n    /**\n     * Accepts the same number parameters as the PreciseDate constructor, but\n     * treats them as UTC. It returns a string that represents the number of\n     * nanoseconds since January 1, 1970, 00:00:00 UTC.\n     *\n     * @static\n     *\n     * @param {...number} [dateFields] The date fields.\n     * @returns {string}\n     *\n     * @example\n     * const time = PreciseDate.fullUTCString(2019, 1, 8, 10, 34, 29, 481, 145,\n     * 231); console.log(time); // expected output: '1549622069481145231'\n     */\n    static fullUTCString(...args) {\n        const milliseconds = Date.UTC(...args.slice(0, 7));\n        const date = new PreciseDate(milliseconds);\n        if (args.length === 9) {\n            date.setNanoseconds(args.pop());\n        }\n        if (args.length === 8) {\n            date.setMicroseconds(args.pop());\n        }\n        return date.getFullTimeString();\n    }\n}\nexports.PreciseDate = PreciseDate;\n/**\n * Parses a RFC 3339 formatted string representation of the date, and returns\n * a string representing the nanoseconds since January 1, 1970, 00:00:00.\n *\n * @private\n *\n * @param {string} time The RFC 3339 formatted string.\n * @returns {string}\n */\nfunction parseFullISO(time) {\n    let digits = '0';\n    time = time.replace(/\\.(\\d+)/, ($0, $1) => {\n        digits = $1;\n        return '.000';\n    });\n    const nanos = Number(padRight(digits, 9));\n    const date = new PreciseDate(time);\n    return date.setNanoseconds(nanos);\n}\n/**\n * Normalizes a {@link google.protobuf.Timestamp} object.\n *\n * @private\n *\n * @param {google.protobuf.Timestamp} timestamp The timestamp object.\n * @returns {DateStruct}\n */\nfunction parseProto({ seconds = 0, nanos = 0 }) {\n    if (typeof seconds.toNumber === 'function') {\n        seconds = seconds.toNumber();\n    }\n    seconds = Number(seconds);\n    nanos = Number(nanos);\n    return { seconds, nanos };\n}\n/**\n * Checks to see if time value is specified in nanoseconds. We assume that all\n * BigInt and string timestamps represent nanoseconds.\n *\n * @private\n *\n * @param {*} time The time to check.\n * @returns {boolean}\n */\nfunction isFullTime(time) {\n    return (typeof time === 'bigint' || (typeof time === 'string' && /^\\d+$/.test(time)));\n}\n/**\n * Checks to see if time value is a {@link DateStruct}.\n *\n * @private\n *\n * @param {*} time The time to check.\n * @returns {boolean}\n */\nfunction isStruct(time) {\n    return ((typeof time === 'object' &&\n        typeof time.seconds !== 'undefined') ||\n        typeof time.nanos === 'number');\n}\n/**\n * Checks to see if the time value is a RFC 3339 formatted string.\n *\n * @private\n *\n * @param {*} time The time to check.\n * @returns {boolean}\n */\nfunction isFullISOString(time) {\n    return typeof time === 'string' && FULL_ISO_REG.test(time);\n}\n/**\n * Pads a number/string with \"0\" to the left.\n *\n * @private\n *\n * @param {string|number} n The number/string to pad.\n * @param {number} min The min size of the padded string.\n * @returns {string}\n */\nfunction padLeft(n, min) {\n    const padding = getPadding(n, min);\n    return `${padding}${n}`;\n}\n/**\n * Pads a number/string with \"0\" to the right.\n *\n * @private\n *\n * @param {string|number} n The number/string to pad.\n * @param {number} min The min size of the padded string.\n * @returns {string}\n */\nfunction padRight(n, min) {\n    const padding = getPadding(n, min);\n    return `${n}${padding}`;\n}\n/**\n * Creates padding based on current size and min size needed.\n *\n * @private\n *\n * @param {string|number} n The number/string to pad.\n * @param {number} [min=3] The min size of the padded string.\n * @returns {string}\n */\nfunction getPadding(n, min) {\n    const size = Math.max(min - n.toString().length, 0);\n    return '0'.repeat(size);\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}