{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createContextKey } from '../context/context';\nimport { NonRecordingSpan } from './NonRecordingSpan';\n/**\n * span key\n */\n\nvar SPAN_KEY = createContextKey('OpenTelemetry Context Key SPAN');\n/**\n * Return the span if one exists\n *\n * @param context context to get span from\n */\n\nexport function getSpan(context) {\n  return context.getValue(SPAN_KEY) || undefined;\n}\n/**\n * Set the span on a context\n *\n * @param context context to use as parent\n * @param span span to set active\n */\n\nexport function setSpan(context, span) {\n  return context.setValue(SPAN_KEY, span);\n}\n/**\n * Remove current span stored in the context\n *\n * @param context context to delete span from\n */\n\nexport function deleteSpan(context) {\n  return context.deleteValue(SPAN_KEY);\n}\n/**\n * Wrap span context in a NoopSpan and set as span in a new\n * context\n *\n * @param context context to set active span on\n * @param spanContext span context to be wrapped\n */\n\nexport function setSpanContext(context, spanContext) {\n  return setSpan(context, new NonRecordingSpan(spanContext));\n}\n/**\n * Get the span context of the span if it exists.\n *\n * @param context context to get values from\n */\n\nexport function getSpanContext(context) {\n  var _a;\n\n  return (_a = getSpan(context)) === null || _a === void 0 ? void 0 : _a.spanContext();\n}","map":{"version":3,"sources":["../../../src/trace/context-utils.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAEH,SAAS,gBAAT,QAAiC,oBAAjC;AAIA,SAAS,gBAAT,QAAiC,oBAAjC;AAEA;;AAEG;;AACH,IAAM,QAAQ,GAAG,gBAAgB,CAAC,gCAAD,CAAjC;AAEA;;;;AAIG;;AACH,OAAM,SAAU,OAAV,CAAkB,OAAlB,EAAkC;AACtC,SAAQ,OAAO,CAAC,QAAR,CAAiB,QAAjB,KAAuC,SAA/C;AACD;AAED;;;;;AAKG;;AACH,OAAM,SAAU,OAAV,CAAkB,OAAlB,EAAoC,IAApC,EAA8C;AAClD,SAAO,OAAO,CAAC,QAAR,CAAiB,QAAjB,EAA2B,IAA3B,CAAP;AACD;AAED;;;;AAIG;;AACH,OAAM,SAAU,UAAV,CAAqB,OAArB,EAAqC;AACzC,SAAO,OAAO,CAAC,WAAR,CAAoB,QAApB,CAAP;AACD;AAED;;;;;;AAMG;;AACH,OAAM,SAAU,cAAV,CACJ,OADI,EAEJ,WAFI,EAEoB;AAExB,SAAO,OAAO,CAAC,OAAD,EAAU,IAAI,gBAAJ,CAAqB,WAArB,CAAV,CAAd;AACD;AAED;;;;AAIG;;AACH,OAAM,SAAU,cAAV,CAAyB,OAAzB,EAAyC;;;AAC7C,SAAO,CAAA,EAAA,GAAA,OAAO,CAAC,OAAD,CAAP,MAAgB,IAAhB,IAAgB,EAAA,KAAA,KAAA,CAAhB,GAAgB,KAAA,CAAhB,GAAgB,EAAA,CAAE,WAAF,EAAvB;AACD","sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createContextKey } from '../context/context';\nimport { NonRecordingSpan } from './NonRecordingSpan';\n/**\n * span key\n */\nvar SPAN_KEY = createContextKey('OpenTelemetry Context Key SPAN');\n/**\n * Return the span if one exists\n *\n * @param context context to get span from\n */\nexport function getSpan(context) {\n    return context.getValue(SPAN_KEY) || undefined;\n}\n/**\n * Set the span on a context\n *\n * @param context context to use as parent\n * @param span span to set active\n */\nexport function setSpan(context, span) {\n    return context.setValue(SPAN_KEY, span);\n}\n/**\n * Remove current span stored in the context\n *\n * @param context context to delete span from\n */\nexport function deleteSpan(context) {\n    return context.deleteValue(SPAN_KEY);\n}\n/**\n * Wrap span context in a NoopSpan and set as span in a new\n * context\n *\n * @param context context to set active span on\n * @param spanContext span context to be wrapped\n */\nexport function setSpanContext(context, spanContext) {\n    return setSpan(context, new NonRecordingSpan(spanContext));\n}\n/**\n * Get the span context of the span if it exists.\n *\n * @param context context to get values from\n */\nexport function getSpanContext(context) {\n    var _a;\n    return (_a = getSpan(context)) === null || _a === void 0 ? void 0 : _a.spanContext();\n}\n//# sourceMappingURL=context-utils.js.map"]},"metadata":{},"sourceType":"module"}