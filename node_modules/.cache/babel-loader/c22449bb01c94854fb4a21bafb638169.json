{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2019 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MessageBatch = void 0;\n\nconst _1 = require(\"./\");\n/**\n * @typedef BatchPublishOptions\n * @property {number} [maxBytes=1 * 1024 * 1024] The maximum number of bytes to\n *     buffer before sending a payload.\n * @property {number} [maxMessages=100] The maximum number of messages to\n *     buffer before sending a payload.\n * @property {number} [maxMilliseconds=10] The maximum duration to wait before\n *     sending a payload.\n */\n\n/**\n * Call used to help batch messages.\n *\n * @private\n *\n * @param {BatchPublishOptions} options The batching options.\n */\n\n\nclass MessageBatch {\n  constructor(options) {\n    this.options = options;\n    this.messages = [];\n    this.callbacks = [];\n    this.created = Date.now();\n    this.bytes = 0;\n  }\n  /**\n   * Updates our options from new values.\n   *\n   * @param {BatchPublishOptions} options The new options.\n   */\n\n\n  setOptions(options) {\n    this.options = options;\n  }\n  /**\n   * Adds a message to the current batch.\n   *\n   * @param {object} message The message to publish.\n   * @param {PublishCallback} callback The callback function.\n   */\n\n\n  add(message, callback) {\n    this.messages.push(message);\n    this.callbacks.push(callback);\n    this.bytes += message.data.length;\n  }\n  /**\n   * Indicates if a given message can fit in the batch.\n   *\n   * @param {object} message The message in question.\n   * @returns {boolean}\n   */\n\n\n  canFit({\n    data\n  }) {\n    const {\n      maxMessages,\n      maxBytes\n    } = this.options;\n    return this.messages.length < maxMessages && this.bytes + data.length <= maxBytes;\n  }\n  /**\n   * Checks to see if this batch is at the maximum allowed payload size.\n   * When publishing ordered messages, it is ok to exceed the user configured\n   * thresholds while a batch is in flight.\n   *\n   * @returns {boolean}\n   */\n\n\n  isAtMax() {\n    const {\n      maxMessages,\n      maxBytes\n    } = _1.BATCH_LIMITS;\n    return this.messages.length >= maxMessages || this.bytes >= maxBytes;\n  }\n  /**\n   * Indicates if the batch is at capacity.\n   *\n   * @returns {boolean}\n   */\n\n\n  isFull() {\n    const {\n      maxMessages,\n      maxBytes\n    } = this.options;\n    return this.messages.length >= maxMessages || this.bytes >= maxBytes;\n  }\n\n}\n\nexports.MessageBatch = MessageBatch;","map":{"version":3,"sources":["../../../src/publisher/message-batch.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;AAcG;;;;;;;AAEH,MAAA,EAAA,GAAA,OAAA,CAAA,IAAA,CAAA;AAQA;;;;;;;;AAQG;;AACH;;;;;;AAMG;;;AACH,MAAa,YAAb,CAAyB;AAMvB,EAAA,WAAA,CAAY,OAAZ,EAAwC;AACtC,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,QAAL,GAAgB,EAAhB;AACA,SAAK,SAAL,GAAiB,EAAjB;AACA,SAAK,OAAL,GAAe,IAAI,CAAC,GAAL,EAAf;AACA,SAAK,KAAL,GAAa,CAAb;AACD;AAED;;;;AAIG;;;AACH,EAAA,UAAU,CAAC,OAAD,EAA6B;AACrC,SAAK,OAAL,GAAe,OAAf;AACD;AAED;;;;;AAKG;;;AACH,EAAA,GAAG,CAAC,OAAD,EAAyB,QAAzB,EAAkD;AACnD,SAAK,QAAL,CAAc,IAAd,CAAmB,OAAnB;AACA,SAAK,SAAL,CAAe,IAAf,CAAoB,QAApB;AACA,SAAK,KAAL,IAAc,OAAO,CAAC,IAAR,CAAc,MAA5B;AACD;AACD;;;;;AAKG;;;AACH,EAAA,MAAM,CAAC;AAAC,IAAA;AAAD,GAAD,EAAsB;AAC1B,UAAM;AAAC,MAAA,WAAD;AAAc,MAAA;AAAd,QAA0B,KAAK,OAArC;AACA,WACE,KAAK,QAAL,CAAc,MAAd,GAAuB,WAAvB,IACA,KAAK,KAAL,GAAa,IAAK,CAAC,MAAnB,IAA6B,QAF/B;AAID;AACD;;;;;;AAMG;;;AACH,EAAA,OAAO,GAAA;AACL,UAAM;AAAC,MAAA,WAAD;AAAc,MAAA;AAAd,QAA0B,EAAA,CAAA,YAAhC;AACA,WAAO,KAAK,QAAL,CAAc,MAAd,IAAwB,WAAxB,IAAwC,KAAK,KAAL,IAAc,QAA7D;AACD;AACD;;;;AAIG;;;AACH,EAAA,MAAM,GAAA;AACJ,UAAM;AAAC,MAAA,WAAD;AAAc,MAAA;AAAd,QAA0B,KAAK,OAArC;AACA,WAAO,KAAK,QAAL,CAAc,MAAd,IAAwB,WAAxB,IAAwC,KAAK,KAAL,IAAc,QAA7D;AACD;;AAlEsB;;AAAzB,OAAA,CAAA,YAAA,GAAA,YAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2019 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MessageBatch = void 0;\nconst _1 = require(\"./\");\n/**\n * @typedef BatchPublishOptions\n * @property {number} [maxBytes=1 * 1024 * 1024] The maximum number of bytes to\n *     buffer before sending a payload.\n * @property {number} [maxMessages=100] The maximum number of messages to\n *     buffer before sending a payload.\n * @property {number} [maxMilliseconds=10] The maximum duration to wait before\n *     sending a payload.\n */\n/**\n * Call used to help batch messages.\n *\n * @private\n *\n * @param {BatchPublishOptions} options The batching options.\n */\nclass MessageBatch {\n    constructor(options) {\n        this.options = options;\n        this.messages = [];\n        this.callbacks = [];\n        this.created = Date.now();\n        this.bytes = 0;\n    }\n    /**\n     * Updates our options from new values.\n     *\n     * @param {BatchPublishOptions} options The new options.\n     */\n    setOptions(options) {\n        this.options = options;\n    }\n    /**\n     * Adds a message to the current batch.\n     *\n     * @param {object} message The message to publish.\n     * @param {PublishCallback} callback The callback function.\n     */\n    add(message, callback) {\n        this.messages.push(message);\n        this.callbacks.push(callback);\n        this.bytes += message.data.length;\n    }\n    /**\n     * Indicates if a given message can fit in the batch.\n     *\n     * @param {object} message The message in question.\n     * @returns {boolean}\n     */\n    canFit({ data }) {\n        const { maxMessages, maxBytes } = this.options;\n        return (this.messages.length < maxMessages &&\n            this.bytes + data.length <= maxBytes);\n    }\n    /**\n     * Checks to see if this batch is at the maximum allowed payload size.\n     * When publishing ordered messages, it is ok to exceed the user configured\n     * thresholds while a batch is in flight.\n     *\n     * @returns {boolean}\n     */\n    isAtMax() {\n        const { maxMessages, maxBytes } = _1.BATCH_LIMITS;\n        return this.messages.length >= maxMessages || this.bytes >= maxBytes;\n    }\n    /**\n     * Indicates if the batch is at capacity.\n     *\n     * @returns {boolean}\n     */\n    isFull() {\n        const { maxMessages, maxBytes } = this.options;\n        return this.messages.length >= maxMessages || this.bytes >= maxBytes;\n    }\n}\nexports.MessageBatch = MessageBatch;\n//# sourceMappingURL=message-batch.js.map"]},"metadata":{},"sourceType":"script"}