{"ast":null,"code":"import { getFirstItem, getSecondItem } from '@visx/shape/lib/util/accessors';\nimport { extent } from 'd3-array';\n\nvar getStack = function getStack(bar) {\n  var _bar$data;\n\n  return bar == null ? void 0 : (_bar$data = bar.data) == null ? void 0 : _bar$data.stack;\n}; // returns average of top + bottom of bar (the middle) as this enables more accurately\n// finding the nearest datum to a FocusEvent (which is based on the middle of the rect bounding box)\n\n\nvar getNumericValue = function getNumericValue(bar) {\n  return (getFirstItem(bar) + getSecondItem(bar)) / 2;\n};\n/** Constructs the `DataRegistryEntry`s for a BarStack, using the stacked data. */\n\n\nexport default function getBarStackRegistryData(stackedData, comprehensiveDomain, horizontal) {\n  var _ref = horizontal ? [getNumericValue, getStack] : [getStack, getNumericValue],\n      xAccessor = _ref[0],\n      yAccessor = _ref[1];\n\n  return stackedData.map(function (data, index) {\n    var entry = {\n      key: data.key,\n      data: data,\n      xAccessor: xAccessor,\n      yAccessor: yAccessor\n    }; // update the numeric domain to account for full data stack\n    // only need to do this for one key\n\n    if (comprehensiveDomain.length > 0 && index === 0) {\n      if (horizontal) {\n        entry.xScale = function (scale) {\n          return scale.domain(extent(scale.domain().concat(comprehensiveDomain)));\n        };\n      } else {\n        entry.yScale = function (scale) {\n          return scale.domain(extent(scale.domain().concat(comprehensiveDomain)));\n        };\n      }\n    }\n\n    return entry;\n  }).filter(function (entry) {\n    return entry;\n  });\n}","map":{"version":3,"sources":["C:/remotePackRlab-acab49ee44aa8f06acbfc147116dbc3387885161/node_modules/@visx/xychart/esm/utils/getBarStackRegistryData.js"],"names":["getFirstItem","getSecondItem","extent","getStack","bar","_bar$data","data","stack","getNumericValue","getBarStackRegistryData","stackedData","comprehensiveDomain","horizontal","_ref","xAccessor","yAccessor","map","index","entry","key","length","xScale","scale","domain","concat","yScale","filter"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,gCAA5C;AACA,SAASC,MAAT,QAAuB,UAAvB;;AAEA,IAAIC,QAAQ,GAAG,SAASA,QAAT,CAAkBC,GAAlB,EAAuB;AACpC,MAAIC,SAAJ;;AAEA,SAAOD,GAAG,IAAI,IAAP,GAAc,KAAK,CAAnB,GAAuB,CAACC,SAAS,GAAGD,GAAG,CAACE,IAAjB,KAA0B,IAA1B,GAAiC,KAAK,CAAtC,GAA0CD,SAAS,CAACE,KAAlF;AACD,CAJD,C,CAIG;AACH;;;AAGA,IAAIC,eAAe,GAAG,SAASA,eAAT,CAAyBJ,GAAzB,EAA8B;AAClD,SAAO,CAACJ,YAAY,CAACI,GAAD,CAAZ,GAAoBH,aAAa,CAACG,GAAD,CAAlC,IAA2C,CAAlD;AACD,CAFD;AAGA;;;AAGA,eAAe,SAASK,uBAAT,CAAiCC,WAAjC,EAA8CC,mBAA9C,EAAmEC,UAAnE,EAA+E;AAC5F,MAAIC,IAAI,GAAGD,UAAU,GAAG,CAACJ,eAAD,EAAkBL,QAAlB,CAAH,GAAiC,CAACA,QAAD,EAAWK,eAAX,CAAtD;AAAA,MACIM,SAAS,GAAGD,IAAI,CAAC,CAAD,CADpB;AAAA,MAEIE,SAAS,GAAGF,IAAI,CAAC,CAAD,CAFpB;;AAIA,SAAOH,WAAW,CAACM,GAAZ,CAAgB,UAAUV,IAAV,EAAgBW,KAAhB,EAAuB;AAC5C,QAAIC,KAAK,GAAG;AACVC,MAAAA,GAAG,EAAEb,IAAI,CAACa,GADA;AAEVb,MAAAA,IAAI,EAAEA,IAFI;AAGVQ,MAAAA,SAAS,EAAEA,SAHD;AAIVC,MAAAA,SAAS,EAAEA;AAJD,KAAZ,CAD4C,CAMzC;AACH;;AAEA,QAAIJ,mBAAmB,CAACS,MAApB,GAA6B,CAA7B,IAAkCH,KAAK,KAAK,CAAhD,EAAmD;AACjD,UAAIL,UAAJ,EAAgB;AACdM,QAAAA,KAAK,CAACG,MAAN,GAAe,UAAUC,KAAV,EAAiB;AAC9B,iBAAOA,KAAK,CAACC,MAAN,CAAarB,MAAM,CAACoB,KAAK,CAACC,MAAN,GAAeC,MAAf,CAAsBb,mBAAtB,CAAD,CAAnB,CAAP;AACD,SAFD;AAGD,OAJD,MAIO;AACLO,QAAAA,KAAK,CAACO,MAAN,GAAe,UAAUH,KAAV,EAAiB;AAC9B,iBAAOA,KAAK,CAACC,MAAN,CAAarB,MAAM,CAACoB,KAAK,CAACC,MAAN,GAAeC,MAAf,CAAsBb,mBAAtB,CAAD,CAAnB,CAAP;AACD,SAFD;AAGD;AACF;;AAED,WAAOO,KAAP;AACD,GAtBM,EAsBJQ,MAtBI,CAsBG,UAAUR,KAAV,EAAiB;AACzB,WAAOA,KAAP;AACD,GAxBM,CAAP;AAyBD","sourcesContent":["import { getFirstItem, getSecondItem } from '@visx/shape/lib/util/accessors';\nimport { extent } from 'd3-array';\n\nvar getStack = function getStack(bar) {\n  var _bar$data;\n\n  return bar == null ? void 0 : (_bar$data = bar.data) == null ? void 0 : _bar$data.stack;\n}; // returns average of top + bottom of bar (the middle) as this enables more accurately\n// finding the nearest datum to a FocusEvent (which is based on the middle of the rect bounding box)\n\n\nvar getNumericValue = function getNumericValue(bar) {\n  return (getFirstItem(bar) + getSecondItem(bar)) / 2;\n};\n/** Constructs the `DataRegistryEntry`s for a BarStack, using the stacked data. */\n\n\nexport default function getBarStackRegistryData(stackedData, comprehensiveDomain, horizontal) {\n  var _ref = horizontal ? [getNumericValue, getStack] : [getStack, getNumericValue],\n      xAccessor = _ref[0],\n      yAccessor = _ref[1];\n\n  return stackedData.map(function (data, index) {\n    var entry = {\n      key: data.key,\n      data: data,\n      xAccessor: xAccessor,\n      yAccessor: yAccessor\n    }; // update the numeric domain to account for full data stack\n    // only need to do this for one key\n\n    if (comprehensiveDomain.length > 0 && index === 0) {\n      if (horizontal) {\n        entry.xScale = function (scale) {\n          return scale.domain(extent(scale.domain().concat(comprehensiveDomain)));\n        };\n      } else {\n        entry.yScale = function (scale) {\n          return scale.domain(extent(scale.domain().concat(comprehensiveDomain)));\n        };\n      }\n    }\n\n    return entry;\n  }).filter(function (entry) {\n    return entry;\n  });\n}"]},"metadata":{},"sourceType":"module"}