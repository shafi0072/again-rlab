{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/** A class for holding data entries */\n\n\nvar DataRegistry = /*#__PURE__*/function () {\n  function DataRegistry() {\n    _defineProperty(this, \"registry\", {});\n\n    _defineProperty(this, \"registryKeys\", []);\n  }\n\n  var _proto = DataRegistry.prototype;\n  /** Add one or more entries to the registry. */\n\n  _proto.registerData = function registerData(entryOrEntries) {\n    var _this = this;\n\n    var entries = Array.isArray(entryOrEntries) ? entryOrEntries : [entryOrEntries];\n    entries.forEach(function (currEntry) {\n      if (currEntry.key in _this.registry && _this.registry[currEntry.key] != null) {\n        console.debug('Overriding data registry key', currEntry.key);\n      }\n\n      _this.registry[currEntry.key] = currEntry;\n      _this.registryKeys = Object.keys(_this.registry);\n    });\n  }\n  /** Remove one or more entries to the registry. */\n  ;\n\n  _proto.unregisterData = function unregisterData(keyOrKeys) {\n    var _this2 = this;\n\n    var keys = Array.isArray(keyOrKeys) ? keyOrKeys : [keyOrKeys];\n    keys.forEach(function (currKey) {\n      delete _this2.registry[currKey];\n      _this2.registryKeys = Object.keys(_this2.registry);\n    });\n  }\n  /** Returns all data registry entries. This value is not constant between calls. */\n  ;\n\n  _proto.entries = function entries() {\n    return Object.values(this.registry);\n  }\n  /** Returns a specific entity from the registry, if it exists. */\n  ;\n\n  _proto.get = function get(key) {\n    return this.registry[key];\n  }\n  /**\n   * Returns the current registry keys.\n   * This value is constant between calls if the keys themselves have not changed.\n   */\n  ;\n\n  _proto.keys = function keys() {\n    return this.registryKeys;\n  };\n\n  return DataRegistry;\n}();\n\nexport { DataRegistry as default };","map":{"version":3,"sources":["C:/remotePackRlab-acab49ee44aa8f06acbfc147116dbc3387885161/node_modules/@visx/xychart/esm/classes/DataRegistry.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","DataRegistry","_proto","prototype","registerData","entryOrEntries","_this","entries","Array","isArray","forEach","currEntry","registry","console","debug","registryKeys","keys","unregisterData","keyOrKeys","_this2","currKey","values","get","default"],"mappings":"AAAA,SAASA,eAAT,CAAyBC,GAAzB,EAA8BC,GAA9B,EAAmCC,KAAnC,EAA0C;AAAE,MAAID,GAAG,IAAID,GAAX,EAAgB;AAAEG,IAAAA,MAAM,CAACC,cAAP,CAAsBJ,GAAtB,EAA2BC,GAA3B,EAAgC;AAAEC,MAAAA,KAAK,EAAEA,KAAT;AAAgBG,MAAAA,UAAU,EAAE,IAA5B;AAAkCC,MAAAA,YAAY,EAAE,IAAhD;AAAsDC,MAAAA,QAAQ,EAAE;AAAhE,KAAhC;AAA0G,GAA5H,MAAkI;AAAEP,IAAAA,GAAG,CAACC,GAAD,CAAH,GAAWC,KAAX;AAAmB;;AAAC,SAAOF,GAAP;AAAa;AAEjN;;;AACA,IAAIQ,YAAY,GAAG,aAAa,YAAY;AAC1C,WAASA,YAAT,GAAwB;AACtBT,IAAAA,eAAe,CAAC,IAAD,EAAO,UAAP,EAAmB,EAAnB,CAAf;;AAEAA,IAAAA,eAAe,CAAC,IAAD,EAAO,cAAP,EAAuB,EAAvB,CAAf;AACD;;AAED,MAAIU,MAAM,GAAGD,YAAY,CAACE,SAA1B;AAEA;;AACAD,EAAAA,MAAM,CAACE,YAAP,GAAsB,SAASA,YAAT,CAAsBC,cAAtB,EAAsC;AAC1D,QAAIC,KAAK,GAAG,IAAZ;;AAEA,QAAIC,OAAO,GAAGC,KAAK,CAACC,OAAN,CAAcJ,cAAd,IAAgCA,cAAhC,GAAiD,CAACA,cAAD,CAA/D;AACAE,IAAAA,OAAO,CAACG,OAAR,CAAgB,UAAUC,SAAV,EAAqB;AACnC,UAAIA,SAAS,CAACjB,GAAV,IAAiBY,KAAK,CAACM,QAAvB,IAAmCN,KAAK,CAACM,QAAN,CAAeD,SAAS,CAACjB,GAAzB,KAAiC,IAAxE,EAA8E;AAC5EmB,QAAAA,OAAO,CAACC,KAAR,CAAc,8BAAd,EAA8CH,SAAS,CAACjB,GAAxD;AACD;;AAEDY,MAAAA,KAAK,CAACM,QAAN,CAAeD,SAAS,CAACjB,GAAzB,IAAgCiB,SAAhC;AACAL,MAAAA,KAAK,CAACS,YAAN,GAAqBnB,MAAM,CAACoB,IAAP,CAAYV,KAAK,CAACM,QAAlB,CAArB;AACD,KAPD;AAQD;AACD;AAbA;;AAgBAV,EAAAA,MAAM,CAACe,cAAP,GAAwB,SAASA,cAAT,CAAwBC,SAAxB,EAAmC;AACzD,QAAIC,MAAM,GAAG,IAAb;;AAEA,QAAIH,IAAI,GAAGR,KAAK,CAACC,OAAN,CAAcS,SAAd,IAA2BA,SAA3B,GAAuC,CAACA,SAAD,CAAlD;AACAF,IAAAA,IAAI,CAACN,OAAL,CAAa,UAAUU,OAAV,EAAmB;AAC9B,aAAOD,MAAM,CAACP,QAAP,CAAgBQ,OAAhB,CAAP;AACAD,MAAAA,MAAM,CAACJ,YAAP,GAAsBnB,MAAM,CAACoB,IAAP,CAAYG,MAAM,CAACP,QAAnB,CAAtB;AACD,KAHD;AAID;AACD;AATA;;AAYAV,EAAAA,MAAM,CAACK,OAAP,GAAiB,SAASA,OAAT,GAAmB;AAClC,WAAOX,MAAM,CAACyB,MAAP,CAAc,KAAKT,QAAnB,CAAP;AACD;AACD;AAHA;;AAMAV,EAAAA,MAAM,CAACoB,GAAP,GAAa,SAASA,GAAT,CAAa5B,GAAb,EAAkB;AAC7B,WAAO,KAAKkB,QAAL,CAAclB,GAAd,CAAP;AACD;AACD;AACF;AACA;AACA;AANE;;AASAQ,EAAAA,MAAM,CAACc,IAAP,GAAc,SAASA,IAAT,GAAgB;AAC5B,WAAO,KAAKD,YAAZ;AACD,GAFD;;AAIA,SAAOd,YAAP;AACD,CA1D+B,EAAhC;;AA4DA,SAASA,YAAY,IAAIsB,OAAzB","sourcesContent":["function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/** A class for holding data entries */\nvar DataRegistry = /*#__PURE__*/function () {\n  function DataRegistry() {\n    _defineProperty(this, \"registry\", {});\n\n    _defineProperty(this, \"registryKeys\", []);\n  }\n\n  var _proto = DataRegistry.prototype;\n\n  /** Add one or more entries to the registry. */\n  _proto.registerData = function registerData(entryOrEntries) {\n    var _this = this;\n\n    var entries = Array.isArray(entryOrEntries) ? entryOrEntries : [entryOrEntries];\n    entries.forEach(function (currEntry) {\n      if (currEntry.key in _this.registry && _this.registry[currEntry.key] != null) {\n        console.debug('Overriding data registry key', currEntry.key);\n      }\n\n      _this.registry[currEntry.key] = currEntry;\n      _this.registryKeys = Object.keys(_this.registry);\n    });\n  }\n  /** Remove one or more entries to the registry. */\n  ;\n\n  _proto.unregisterData = function unregisterData(keyOrKeys) {\n    var _this2 = this;\n\n    var keys = Array.isArray(keyOrKeys) ? keyOrKeys : [keyOrKeys];\n    keys.forEach(function (currKey) {\n      delete _this2.registry[currKey];\n      _this2.registryKeys = Object.keys(_this2.registry);\n    });\n  }\n  /** Returns all data registry entries. This value is not constant between calls. */\n  ;\n\n  _proto.entries = function entries() {\n    return Object.values(this.registry);\n  }\n  /** Returns a specific entity from the registry, if it exists. */\n  ;\n\n  _proto.get = function get(key) {\n    return this.registry[key];\n  }\n  /**\n   * Returns the current registry keys.\n   * This value is constant between calls if the keys themselves have not changed.\n   */\n  ;\n\n  _proto.keys = function keys() {\n    return this.registryKeys;\n  };\n\n  return DataRegistry;\n}();\n\nexport { DataRegistry as default };"]},"metadata":{},"sourceType":"module"}