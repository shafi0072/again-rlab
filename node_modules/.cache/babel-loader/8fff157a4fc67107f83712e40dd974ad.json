{"ast":null,"code":"import React, { useCallback } from 'react';\nimport useEventEmitter from './useEventEmitter';\n/**\n * A hook that simplifies creation of handlers for emitting\n * pointermove, pointerout, and pointerup events to EventEmitterContext.\n */\n\nexport default function usePointerEventEmitters(_ref) {\n  var source = _ref.source,\n      _ref$onPointerOut = _ref.onPointerOut,\n      onPointerOut = _ref$onPointerOut === void 0 ? true : _ref$onPointerOut,\n      _ref$onPointerMove = _ref.onPointerMove,\n      onPointerMove = _ref$onPointerMove === void 0 ? true : _ref$onPointerMove,\n      _ref$onPointerUp = _ref.onPointerUp,\n      onPointerUp = _ref$onPointerUp === void 0 ? true : _ref$onPointerUp,\n      _ref$onFocus = _ref.onFocus,\n      onFocus = _ref$onFocus === void 0 ? false : _ref$onFocus,\n      _ref$onBlur = _ref.onBlur,\n      onBlur = _ref$onBlur === void 0 ? false : _ref$onBlur;\n  var emit = useEventEmitter();\n  var emitPointerMove = useCallback(function (event) {\n    return emit == null ? void 0 : emit('pointermove', event, source);\n  }, [emit, source]);\n  var emitPointerOut = useCallback(function (event) {\n    return emit == null ? void 0 : emit('pointerout', event, source);\n  }, [emit, source]);\n  var emitPointerUp = useCallback(function (event) {\n    return emit == null ? void 0 : emit('pointerup', event, source);\n  }, [emit, source]);\n  var emitFocus = useCallback(function (event) {\n    return emit == null ? void 0 : emit('focus', event, source);\n  }, [emit, source]);\n  var emitBlur = useCallback(function (event) {\n    return emit == null ? void 0 : emit('blur', event, source);\n  }, [emit, source]);\n  return {\n    onPointerMove: onPointerMove ? emitPointerMove : undefined,\n    onFocus: onFocus ? emitFocus : undefined,\n    onBlur: onBlur ? emitBlur : undefined,\n    onPointerOut: onPointerOut ? emitPointerOut : undefined,\n    onPointerUp: onPointerUp ? emitPointerUp : undefined\n  };\n}","map":{"version":3,"sources":["C:/remotePackRlab-acab49ee44aa8f06acbfc147116dbc3387885161/node_modules/@visx/xychart/esm/hooks/useEventEmitters.js"],"names":["React","useCallback","useEventEmitter","usePointerEventEmitters","_ref","source","_ref$onPointerOut","onPointerOut","_ref$onPointerMove","onPointerMove","_ref$onPointerUp","onPointerUp","_ref$onFocus","onFocus","_ref$onBlur","onBlur","emit","emitPointerMove","event","emitPointerOut","emitPointerUp","emitFocus","emitBlur","undefined"],"mappings":"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","sourcesContent":["import React, { useCallback } from 'react';\nimport useEventEmitter from './useEventEmitter';\n\n/**\n * A hook that simplifies creation of handlers for emitting\n * pointermove, pointerout, and pointerup events to EventEmitterContext.\n */\nexport default function usePointerEventEmitters(_ref) {\n  var source = _ref.source,\n      _ref$onPointerOut = _ref.onPointerOut,\n      onPointerOut = _ref$onPointerOut === void 0 ? true : _ref$onPointerOut,\n      _ref$onPointerMove = _ref.onPointerMove,\n      onPointerMove = _ref$onPointerMove === void 0 ? true : _ref$onPointerMove,\n      _ref$onPointerUp = _ref.onPointerUp,\n      onPointerUp = _ref$onPointerUp === void 0 ? true : _ref$onPointerUp,\n      _ref$onFocus = _ref.onFocus,\n      onFocus = _ref$onFocus === void 0 ? false : _ref$onFocus,\n      _ref$onBlur = _ref.onBlur,\n      onBlur = _ref$onBlur === void 0 ? false : _ref$onBlur;\n  var emit = useEventEmitter();\n  var emitPointerMove = useCallback(function (event) {\n    return emit == null ? void 0 : emit('pointermove', event, source);\n  }, [emit, source]);\n  var emitPointerOut = useCallback(function (event) {\n    return emit == null ? void 0 : emit('pointerout', event, source);\n  }, [emit, source]);\n  var emitPointerUp = useCallback(function (event) {\n    return emit == null ? void 0 : emit('pointerup', event, source);\n  }, [emit, source]);\n  var emitFocus = useCallback(function (event) {\n    return emit == null ? void 0 : emit('focus', event, source);\n  }, [emit, source]);\n  var emitBlur = useCallback(function (event) {\n    return emit == null ? void 0 : emit('blur', event, source);\n  }, [emit, source]);\n  return {\n    onPointerMove: onPointerMove ? emitPointerMove : undefined,\n    onFocus: onFocus ? emitFocus : undefined,\n    onBlur: onBlur ? emitBlur : undefined,\n    onPointerOut: onPointerOut ? emitPointerOut : undefined,\n    onPointerUp: onPointerUp ? emitPointerUp : undefined\n  };\n}"]},"metadata":{},"sourceType":"module"}