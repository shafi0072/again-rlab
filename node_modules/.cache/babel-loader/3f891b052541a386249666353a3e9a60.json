{"ast":null,"code":"var _jsxFileName = \"C:\\\\remotePackRlab\\\\remotePackRlab\\\\src\\\\Components\\\\Home\\\\DeviceDashBoard\\\\DeviceDashBoard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Navbar from '../../Shared/Navbar';\nimport DeveiceMeter from '../Locations/DeveiceMeter';\nimport logo from '../../../Resorces/logo_RLAB.png';\nimport './DeviceDashBoard.css';\nimport { BrowserRouter as useParams } from \"react-router-dom\";\nimport db from '../../FirebaseConfig/Firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DeviceDashBoard = () => {\n  _s();\n\n  let {\n    format,\n    id\n  } = useParams();\n  const [status, setStatus] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [pastData, setPastData] = useState({\n    present: true,\n    aWeek: fakl\n  });\n\n  function arrayFunc(arr, key) {\n    let resultArray = [];\n\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i]._id === key) {\n        resultArray = arr[i];\n      }\n    }\n\n    return resultArray;\n  }\n\n  ; //  function for liner search start\n\n  function maxNumber(arr) {\n    let i;\n    let max = arr[0].dateSocket;\n\n    for (i = 1; i < arr.length; i++) {\n      if (arr[i].dateSocket > max) {\n        max = arr[i];\n      }\n    } // const lastItem =  await arr[arr.length - 1]\n\n\n    return max;\n  } // finish |^ linear search \n  //shorting data \n\n\n  useEffect(() => {\n    const userDb = db.collection(\"RealTime\").doc(id).onSnapshot(querySnapshot => {\n      setStatus({ ...querySnapshot.data(),\n        key: querySnapshot.id\n      });\n    });\n    return userDb;\n  }, [loading, format, id]);\n  console.log({\n    status\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-md-1\",\n      children: /*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-md-11 text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"\",\n        style: {\n          width: '20%'\n        },\n        className: \"mt-5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(DeveiceMeter, {\n        data: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DeviceDashBoard, \"1PjPLPXSrLSMU2d5COkKJRY0A+4=\", false, function () {\n  return [useParams];\n});\n\n_c = DeviceDashBoard;\nexport default DeviceDashBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeviceDashBoard\");","map":{"version":3,"sources":["C:/remotePackRlab/remotePackRlab/src/Components/Home/DeviceDashBoard/DeviceDashBoard.js"],"names":["React","useEffect","useState","Navbar","DeveiceMeter","logo","BrowserRouter","useParams","db","DeviceDashBoard","format","id","status","setStatus","loading","setLoading","pastData","setPastData","present","aWeek","fakl","arrayFunc","arr","key","resultArray","i","length","_id","maxNumber","max","dateSocket","userDb","collection","doc","onSnapshot","querySnapshot","data","console","log","width"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Navbar from '../../Shared/Navbar';\r\nimport DeveiceMeter from '../Locations/DeveiceMeter';\r\n\r\nimport logo from '../../../Resorces/logo_RLAB.png';\r\nimport './DeviceDashBoard.css';\r\n\r\nimport {\r\n    BrowserRouter as\r\n    useParams\r\n  } from \"react-router-dom\";\r\n\r\nimport db from '../../FirebaseConfig/Firebase'\r\n\r\n\r\n\r\nconst DeviceDashBoard = () => {\r\n    let { format, id } = useParams();\r\n\r\n\r\n    const [status,setStatus] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [pastData, setPastData] = useState({\r\n      present:true,\r\n      aWeek:fakl\r\n    })\r\n    function arrayFunc(arr,key) {\r\n        let resultArray = [];\r\n        for(let i = 0; i < arr.length; i++){\r\n            if(arr[i]._id === key){\r\n                resultArray = arr[i];\r\n            }\r\n        }\r\n        return resultArray\r\n    };\r\n\r\n    //  function for liner search start\r\n    \r\nfunction maxNumber(arr) {\r\n        \r\n        let i;\r\n        let max = arr[0].dateSocket;\r\n\r\n        for (i = 1; i < arr.length; i++){\r\n           if(arr[i].dateSocket > max){\r\n               max = arr[i]\r\n           }\r\n        }\r\n    // const lastItem =  await arr[arr.length - 1]\r\n        return max;\r\n    }\r\n    \r\n// finish |^ linear search \r\n//shorting data \r\n\r\n    \r\n    useEffect(() => {\r\n        const userDb =  db.collection(\"RealTime\").doc(id).onSnapshot((querySnapshot) => {\r\n            \r\n          setStatus({...querySnapshot.data(), key:querySnapshot.id});\r\n           \r\n        });\r\n        return userDb;\r\n\r\n     \r\n    }, [loading, format, id]);\r\n  console.log({status});\r\n    return (\r\n        <div className='row'>\r\n            <div className=\"col-md-1\">\r\n                <Navbar/>\r\n            </div>\r\n            <div className=\"col-md-11 text-center\">\r\n            <img src={logo} alt=\"\" style={{width:'20%'}} className='mt-5' />\r\n                \r\n                <DeveiceMeter data={status}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DeviceDashBoard;"]},"metadata":{},"sourceType":"module"}