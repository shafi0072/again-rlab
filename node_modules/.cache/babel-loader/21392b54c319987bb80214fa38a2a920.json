{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NoopTracer } from './NoopTracer';\n/**\n * Proxy tracer provided by the proxy tracer provider\n */\n\nvar ProxyTracer =\n/** @class */\nfunction () {\n  function ProxyTracer(_provider, name, version) {\n    this._provider = _provider;\n    this.name = name;\n    this.version = version;\n  }\n\n  ProxyTracer.prototype.startSpan = function (name, options, context) {\n    return this._getTracer().startSpan(name, options, context);\n  };\n\n  ProxyTracer.prototype.startActiveSpan = function (_name, _options, _context, _fn) {\n    var tracer = this._getTracer();\n\n    return Reflect.apply(tracer.startActiveSpan, tracer, arguments);\n  };\n  /**\n   * Try to get a tracer from the proxy tracer provider.\n   * If the proxy tracer provider has no delegate, return a noop tracer.\n   */\n\n\n  ProxyTracer.prototype._getTracer = function () {\n    if (this._delegate) {\n      return this._delegate;\n    }\n\n    var tracer = this._provider.getDelegateTracer(this.name, this.version);\n\n    if (!tracer) {\n      return new NoopTracer();\n    }\n\n    this._delegate = tracer;\n    return this._delegate;\n  };\n\n  return ProxyTracer;\n}();\n\nexport { ProxyTracer };","map":{"version":3,"sources":["../../../src/trace/ProxyTracer.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAGH,SAAS,UAAT,QAA2B,cAA3B;AAMA;;AAEG;;AACH,IAAA,WAAA;AAAA;AAAA,YAAA;AAIE,WAAA,WAAA,CACU,SADV,EAEkB,IAFlB,EAGkB,OAHlB,EAGkC;AAFxB,SAAA,SAAA,GAAA,SAAA;AACQ,SAAA,IAAA,GAAA,IAAA;AACA,SAAA,OAAA,GAAA,OAAA;AACd;;AAEJ,EAAA,WAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,IAAV,EAAwB,OAAxB,EAA+C,OAA/C,EAAgE;AAC9D,WAAO,KAAK,UAAL,GAAkB,SAAlB,CAA4B,IAA5B,EAAkC,OAAlC,EAA2C,OAA3C,CAAP;AACD,GAFD;;AAIA,EAAA,WAAA,CAAA,SAAA,CAAA,eAAA,GAAA,UACE,KADF,EAEE,QAFF,EAGE,QAHF,EAIE,GAJF,EAIS;AAEP,QAAM,MAAM,GAAG,KAAK,UAAL,EAAf;;AACA,WAAO,OAAO,CAAC,KAAR,CAAc,MAAM,CAAC,eAArB,EAAsC,MAAtC,EAA8C,SAA9C,CAAP;AACD,GARD;AAUA;;;AAGG;;;AACK,EAAA,WAAA,CAAA,SAAA,CAAA,UAAA,GAAR,YAAA;AACE,QAAI,KAAK,SAAT,EAAoB;AAClB,aAAO,KAAK,SAAZ;AACD;;AAED,QAAM,MAAM,GAAG,KAAK,SAAL,CAAe,iBAAf,CAAiC,KAAK,IAAtC,EAA4C,KAAK,OAAjD,CAAf;;AAEA,QAAI,CAAC,MAAL,EAAa;AACX,aAAO,IAAI,UAAJ,EAAP;AACD;;AAED,SAAK,SAAL,GAAiB,MAAjB;AACA,WAAO,KAAK,SAAZ;AACD,GAbO;;AAcV,SAAA,WAAA;AAAC,CA1CD,EAAA","sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NoopTracer } from './NoopTracer';\n/**\n * Proxy tracer provided by the proxy tracer provider\n */\nvar ProxyTracer = /** @class */ (function () {\n    function ProxyTracer(_provider, name, version) {\n        this._provider = _provider;\n        this.name = name;\n        this.version = version;\n    }\n    ProxyTracer.prototype.startSpan = function (name, options, context) {\n        return this._getTracer().startSpan(name, options, context);\n    };\n    ProxyTracer.prototype.startActiveSpan = function (_name, _options, _context, _fn) {\n        var tracer = this._getTracer();\n        return Reflect.apply(tracer.startActiveSpan, tracer, arguments);\n    };\n    /**\n     * Try to get a tracer from the proxy tracer provider.\n     * If the proxy tracer provider has no delegate, return a noop tracer.\n     */\n    ProxyTracer.prototype._getTracer = function () {\n        if (this._delegate) {\n            return this._delegate;\n        }\n        var tracer = this._provider.getDelegateTracer(this.name, this.version);\n        if (!tracer) {\n            return new NoopTracer();\n        }\n        this._delegate = tracer;\n        return this._delegate;\n    };\n    return ProxyTracer;\n}());\nexport { ProxyTracer };\n//# sourceMappingURL=ProxyTracer.js.map"]},"metadata":{},"sourceType":"module"}