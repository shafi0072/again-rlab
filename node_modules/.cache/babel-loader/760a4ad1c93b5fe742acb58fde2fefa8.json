{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { INVALID_SPAN_CONTEXT } from './spancontext-utils';\n/**\n * The NonRecordingSpan is the default {@link Span} that is used when no Span\n * implementation is available. All operations are no-op including context\n * propagation.\n */\n\nvar NonRecordingSpan =\n/** @class */\nfunction () {\n  function NonRecordingSpan(_spanContext) {\n    if (_spanContext === void 0) {\n      _spanContext = INVALID_SPAN_CONTEXT;\n    }\n\n    this._spanContext = _spanContext;\n  } // Returns a SpanContext.\n\n\n  NonRecordingSpan.prototype.spanContext = function () {\n    return this._spanContext;\n  }; // By default does nothing\n\n\n  NonRecordingSpan.prototype.setAttribute = function (_key, _value) {\n    return this;\n  }; // By default does nothing\n\n\n  NonRecordingSpan.prototype.setAttributes = function (_attributes) {\n    return this;\n  }; // By default does nothing\n\n\n  NonRecordingSpan.prototype.addEvent = function (_name, _attributes) {\n    return this;\n  }; // By default does nothing\n\n\n  NonRecordingSpan.prototype.setStatus = function (_status) {\n    return this;\n  }; // By default does nothing\n\n\n  NonRecordingSpan.prototype.updateName = function (_name) {\n    return this;\n  }; // By default does nothing\n\n\n  NonRecordingSpan.prototype.end = function (_endTime) {}; // isRecording always returns false for NonRecordingSpan.\n\n\n  NonRecordingSpan.prototype.isRecording = function () {\n    return false;\n  }; // By default does nothing\n\n\n  NonRecordingSpan.prototype.recordException = function (_exception, _time) {};\n\n  return NonRecordingSpan;\n}();\n\nexport { NonRecordingSpan };","map":{"version":3,"sources":["../../../src/trace/NonRecordingSpan.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAQH,SAAS,oBAAT,QAAqC,qBAArC;AAEA;;;;AAIG;;AACH,IAAA,gBAAA;AAAA;AAAA,YAAA;AACE,WAAA,gBAAA,CACmB,YADnB,EACmE;AAAhD,QAAA,YAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,YAAA,GAAA,oBAAA;AAAgD;;AAAhD,SAAA,YAAA,GAAA,YAAA;AACf,GAHN,CAKE;;;AACA,EAAA,gBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,YAAA;AACE,WAAO,KAAK,YAAZ;AACD,GAFD,CANF,CAUE;;;AACA,EAAA,gBAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAa,IAAb,EAA2B,MAA3B,EAA0C;AACxC,WAAO,IAAP;AACD,GAFD,CAXF,CAeE;;;AACA,EAAA,gBAAA,CAAA,SAAA,CAAA,aAAA,GAAA,UAAc,WAAd,EAAyC;AACvC,WAAO,IAAP;AACD,GAFD,CAhBF,CAoBE;;;AACA,EAAA,gBAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,KAAT,EAAwB,WAAxB,EAAoD;AAClD,WAAO,IAAP;AACD,GAFD,CArBF,CAyBE;;;AACA,EAAA,gBAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,OAAV,EAA6B;AAC3B,WAAO,IAAP;AACD,GAFD,CA1BF,CA8BE;;;AACA,EAAA,gBAAA,CAAA,SAAA,CAAA,UAAA,GAAA,UAAW,KAAX,EAAwB;AACtB,WAAO,IAAP;AACD,GAFD,CA/BF,CAmCE;;;AACA,EAAA,gBAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,QAAJ,EAAwB,CAAU,CAAlC,CApCF,CAsCE;;;AACA,EAAA,gBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,YAAA;AACE,WAAO,KAAP;AACD,GAFD,CAvCF,CA2CE;;;AACA,EAAA,gBAAA,CAAA,SAAA,CAAA,eAAA,GAAA,UAAgB,UAAhB,EAAuC,KAAvC,EAAwD,CAAU,CAAlE;;AACF,SAAA,gBAAA;AAAC,CA7CD,EAAA","sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { INVALID_SPAN_CONTEXT } from './spancontext-utils';\n/**\n * The NonRecordingSpan is the default {@link Span} that is used when no Span\n * implementation is available. All operations are no-op including context\n * propagation.\n */\nvar NonRecordingSpan = /** @class */ (function () {\n    function NonRecordingSpan(_spanContext) {\n        if (_spanContext === void 0) { _spanContext = INVALID_SPAN_CONTEXT; }\n        this._spanContext = _spanContext;\n    }\n    // Returns a SpanContext.\n    NonRecordingSpan.prototype.spanContext = function () {\n        return this._spanContext;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.setAttribute = function (_key, _value) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.setAttributes = function (_attributes) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.addEvent = function (_name, _attributes) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.setStatus = function (_status) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.updateName = function (_name) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.end = function (_endTime) { };\n    // isRecording always returns false for NonRecordingSpan.\n    NonRecordingSpan.prototype.isRecording = function () {\n        return false;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.recordException = function (_exception, _time) { };\n    return NonRecordingSpan;\n}());\nexport { NonRecordingSpan };\n//# sourceMappingURL=NonRecordingSpan.js.map"]},"metadata":{},"sourceType":"module"}