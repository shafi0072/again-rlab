{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Get a key to uniquely identify a context value */\nexport function createContextKey(description) {\n  // The specification states that for the same input, multiple calls should\n  // return different keys. Due to the nature of the JS dependency management\n  // system, this creates problems where multiple versions of some package\n  // could hold different keys for the same property.\n  //\n  // Therefore, we use Symbol.for which returns the same key for the same input.\n  return Symbol.for(description);\n}\n\nvar BaseContext =\n/** @class */\nfunction () {\n  /**\n   * Construct a new context which inherits values from an optional parent context.\n   *\n   * @param parentContext a context from which to inherit values\n   */\n  function BaseContext(parentContext) {\n    // for minification\n    var self = this;\n    self._currentContext = parentContext ? new Map(parentContext) : new Map();\n\n    self.getValue = function (key) {\n      return self._currentContext.get(key);\n    };\n\n    self.setValue = function (key, value) {\n      var context = new BaseContext(self._currentContext);\n\n      context._currentContext.set(key, value);\n\n      return context;\n    };\n\n    self.deleteValue = function (key) {\n      var context = new BaseContext(self._currentContext);\n\n      context._currentContext.delete(key);\n\n      return context;\n    };\n  }\n\n  return BaseContext;\n}();\n/** The root context is used as the default parent context when there is no active context */\n\n\nexport var ROOT_CONTEXT = new BaseContext();","map":{"version":3,"sources":["../../../src/context/context.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;;AAIH;AACA,OAAM,SAAU,gBAAV,CAA2B,WAA3B,EAA8C;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,SAAO,MAAM,CAAC,GAAP,CAAW,WAAX,CAAP;AACD;;AAED,IAAA,WAAA;AAAA;AAAA,YAAA;AAGE;;;;AAIG;AACH,WAAA,WAAA,CAAY,aAAZ,EAAgD;AAC9C;AACA,QAAM,IAAI,GAAG,IAAb;AAEA,IAAA,IAAI,CAAC,eAAL,GAAuB,aAAa,GAAG,IAAI,GAAJ,CAAQ,aAAR,CAAH,GAA4B,IAAI,GAAJ,EAAhE;;AAEA,IAAA,IAAI,CAAC,QAAL,GAAgB,UAAC,GAAD,EAAY;AAAK,aAAA,IAAI,CAAC,eAAL,CAAqB,GAArB,CAAA,GAAA,CAAA;AAA6B,KAA9D;;AAEA,IAAA,IAAI,CAAC,QAAL,GAAgB,UAAC,GAAD,EAAc,KAAd,EAA4B;AAC1C,UAAM,OAAO,GAAG,IAAI,WAAJ,CAAgB,IAAI,CAAC,eAArB,CAAhB;;AACA,MAAA,OAAO,CAAC,eAAR,CAAwB,GAAxB,CAA4B,GAA5B,EAAiC,KAAjC;;AACA,aAAO,OAAP;AACD,KAJD;;AAMA,IAAA,IAAI,CAAC,WAAL,GAAmB,UAAC,GAAD,EAAY;AAC7B,UAAM,OAAO,GAAG,IAAI,WAAJ,CAAgB,IAAI,CAAC,eAArB,CAAhB;;AACA,MAAA,OAAO,CAAC,eAAR,CAAwB,MAAxB,CAA+B,GAA/B;;AACA,aAAO,OAAP;AACD,KAJD;AAKD;;AAyBH,SAAA,WAAA;AAAC,CApDD,EAAA;AAsDA;;;AACA,OAAO,IAAM,YAAY,GAAY,IAAI,WAAJ,EAA9B","sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Get a key to uniquely identify a context value */\nexport function createContextKey(description) {\n    // The specification states that for the same input, multiple calls should\n    // return different keys. Due to the nature of the JS dependency management\n    // system, this creates problems where multiple versions of some package\n    // could hold different keys for the same property.\n    //\n    // Therefore, we use Symbol.for which returns the same key for the same input.\n    return Symbol.for(description);\n}\nvar BaseContext = /** @class */ (function () {\n    /**\n     * Construct a new context which inherits values from an optional parent context.\n     *\n     * @param parentContext a context from which to inherit values\n     */\n    function BaseContext(parentContext) {\n        // for minification\n        var self = this;\n        self._currentContext = parentContext ? new Map(parentContext) : new Map();\n        self.getValue = function (key) { return self._currentContext.get(key); };\n        self.setValue = function (key, value) {\n            var context = new BaseContext(self._currentContext);\n            context._currentContext.set(key, value);\n            return context;\n        };\n        self.deleteValue = function (key) {\n            var context = new BaseContext(self._currentContext);\n            context._currentContext.delete(key);\n            return context;\n        };\n    }\n    return BaseContext;\n}());\n/** The root context is used as the default parent context when there is no active context */\nexport var ROOT_CONTEXT = new BaseContext();\n//# sourceMappingURL=context.js.map"]},"metadata":{},"sourceType":"module"}