{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ProxyTracer } from './ProxyTracer';\nimport { NoopTracerProvider } from './NoopTracerProvider';\nvar NOOP_TRACER_PROVIDER = new NoopTracerProvider();\n/**\n * Tracer provider which provides {@link ProxyTracer}s.\n *\n * Before a delegate is set, tracers provided are NoOp.\n *   When a delegate is set, traces are provided from the delegate.\n *   When a delegate is set after tracers have already been provided,\n *   all tracers already provided will use the provided delegate implementation.\n */\n\nvar ProxyTracerProvider =\n/** @class */\nfunction () {\n  function ProxyTracerProvider() {}\n  /**\n   * Get a {@link ProxyTracer}\n   */\n\n\n  ProxyTracerProvider.prototype.getTracer = function (name, version) {\n    var _a;\n\n    return (_a = this.getDelegateTracer(name, version)) !== null && _a !== void 0 ? _a : new ProxyTracer(this, name, version);\n  };\n\n  ProxyTracerProvider.prototype.getDelegate = function () {\n    var _a;\n\n    return (_a = this._delegate) !== null && _a !== void 0 ? _a : NOOP_TRACER_PROVIDER;\n  };\n  /**\n   * Set the delegate tracer provider\n   */\n\n\n  ProxyTracerProvider.prototype.setDelegate = function (delegate) {\n    this._delegate = delegate;\n  };\n\n  ProxyTracerProvider.prototype.getDelegateTracer = function (name, version) {\n    var _a;\n\n    return (_a = this._delegate) === null || _a === void 0 ? void 0 : _a.getTracer(name, version);\n  };\n\n  return ProxyTracerProvider;\n}();\n\nexport { ProxyTracerProvider };","map":{"version":3,"sources":["../../../src/trace/ProxyTracerProvider.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAIH,SAAS,WAAT,QAA4B,eAA5B;AACA,SAAS,kBAAT,QAAmC,sBAAnC;AAEA,IAAM,oBAAoB,GAAG,IAAI,kBAAJ,EAA7B;AAEA;;;;;;;AAOG;;AACH,IAAA,mBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,mBAAA,GAAA,CA2BC;AAxBC;;AAEG;;;AACH,EAAA,mBAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,IAAV,EAAwB,OAAxB,EAAwC;;;AACtC,WACE,CAAA,EAAA,GAAA,KAAK,iBAAL,CAAuB,IAAvB,EAA6B,OAA7B,CAAA,MAAqC,IAArC,IAAqC,EAAA,KAAA,KAAA,CAArC,GAAqC,EAArC,GACA,IAAI,WAAJ,CAAgB,IAAhB,EAAsB,IAAtB,EAA4B,OAA5B,CAFF;AAID,GALD;;AAOA,EAAA,mBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,YAAA;;;AACE,WAAO,CAAA,EAAA,GAAA,KAAK,SAAL,MAAc,IAAd,IAAc,EAAA,KAAA,KAAA,CAAd,GAAc,EAAd,GAAkB,oBAAzB;AACD,GAFD;AAIA;;AAEG;;;AACH,EAAA,mBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,QAAZ,EAAoC;AAClC,SAAK,SAAL,GAAiB,QAAjB;AACD,GAFD;;AAIA,EAAA,mBAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UAAkB,IAAlB,EAAgC,OAAhC,EAAgD;;;AAC9C,WAAO,CAAA,EAAA,GAAA,KAAK,SAAL,MAAc,IAAd,IAAc,EAAA,KAAA,KAAA,CAAd,GAAc,KAAA,CAAd,GAAc,EAAA,CAAE,SAAF,CAAY,IAAZ,EAAkB,OAAlB,CAArB;AACD,GAFD;;AAGF,SAAA,mBAAA;AAAC,CA3BD,EAAA","sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ProxyTracer } from './ProxyTracer';\nimport { NoopTracerProvider } from './NoopTracerProvider';\nvar NOOP_TRACER_PROVIDER = new NoopTracerProvider();\n/**\n * Tracer provider which provides {@link ProxyTracer}s.\n *\n * Before a delegate is set, tracers provided are NoOp.\n *   When a delegate is set, traces are provided from the delegate.\n *   When a delegate is set after tracers have already been provided,\n *   all tracers already provided will use the provided delegate implementation.\n */\nvar ProxyTracerProvider = /** @class */ (function () {\n    function ProxyTracerProvider() {\n    }\n    /**\n     * Get a {@link ProxyTracer}\n     */\n    ProxyTracerProvider.prototype.getTracer = function (name, version) {\n        var _a;\n        return ((_a = this.getDelegateTracer(name, version)) !== null && _a !== void 0 ? _a : new ProxyTracer(this, name, version));\n    };\n    ProxyTracerProvider.prototype.getDelegate = function () {\n        var _a;\n        return (_a = this._delegate) !== null && _a !== void 0 ? _a : NOOP_TRACER_PROVIDER;\n    };\n    /**\n     * Set the delegate tracer provider\n     */\n    ProxyTracerProvider.prototype.setDelegate = function (delegate) {\n        this._delegate = delegate;\n    };\n    ProxyTracerProvider.prototype.getDelegateTracer = function (name, version) {\n        var _a;\n        return (_a = this._delegate) === null || _a === void 0 ? void 0 : _a.getTracer(name, version);\n    };\n    return ProxyTracerProvider;\n}());\nexport { ProxyTracerProvider };\n//# sourceMappingURL=ProxyTracerProvider.js.map"]},"metadata":{},"sourceType":"module"}