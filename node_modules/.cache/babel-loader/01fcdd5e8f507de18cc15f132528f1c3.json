{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Topic = void 0;\n\nconst paginator_1 = require(\"@google-cloud/paginator\");\n\nconst promisify_1 = require(\"@google-cloud/promisify\");\n\nconst iam_1 = require(\"./iam\");\n\nconst publisher_1 = require(\"./publisher\");\n/**\n * A Topic object allows you to interact with a Cloud Pub/Sub topic.\n *\n * @class\n * @param {PubSub} pubsub PubSub object.\n * @param {string} name Name of the topic.\n * @param {PublishOptions} [options] Publisher configuration object.\n *\n * @example\n * const {PubSub} = require('@google-cloud/pubsub');\n * const pubsub = new PubSub();\n *\n * const topic = pubsub.topic('my-topic');\n *\n * @example <caption>To enable message ordering, set `enableMessageOrdering` to true. Please note that this does not persist to an actual topic.</caption>\n * const topic = pubsub.topic('ordered-topic', {enableMessageOrdering: true});\n */\n\n\nclass Topic {\n  constructor(pubsub, name, options) {\n    this.getSubscriptionsStream = paginator_1.paginator.streamify('getSubscriptions');\n    /**\n     * The fully qualified name of this topic.\n     * @name Topic#name\n     * @type {string}\n     */\n\n    this.name = Topic.formatName_(pubsub.projectId, name);\n    this.publisher = new publisher_1.Publisher(this, options);\n    /**\n     * The parent {@link PubSub} instance of this topic instance.\n     * @name Topic#pubsub\n     * @type {PubSub}\n     */\n\n    /**\n     * The parent {@link PubSub} instance of this topic instance.\n     * @name Topic#parent\n     * @type {PubSub}\n     */\n\n    this.parent = this.pubsub = pubsub;\n    this.request = pubsub.request.bind(pubsub);\n    /**\n     * [IAM (Identity and Access\n     * Management)](https://cloud.google.com/pubsub/access_control) allows you\n     * to set permissions on individual resources and offers a wider range of\n     * roles: editor, owner, publisher, subscriber, and viewer. This gives you\n     * greater flexibility and allows you to set more fine-grained access\n     * control.\n     *\n     * *The IAM access control features described in this document are Beta,\n     * including the API methods to get and set IAM policies, and to test IAM\n     * permissions. Cloud Pub/Sub's use of IAM features is not covered by\n     * any SLA or deprecation policy, and may be subject to\n     * backward-incompatible changes.*\n     *\n     * @name Topic#iam\n     * @mixes IAM\n     *\n     * @see [Access Control Overview]{@link https://cloud.google.com/pubsub/access_control}\n     * @see [What is Cloud IAM?]{@link https://cloud.google.com/iam/}\n     *\n     * @example\n     * const {PubSub} = require('@google-cloud/pubsub');\n     * const pubsub = new PubSub();\n     *\n     * const topic = pubsub.topic('my-topic');\n     *\n     * //-\n     * // Get the IAM policy for your topic.\n     * //-\n     * topic.iam.getPolicy((err, policy) => {\n     *   console.log(policy);\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * topic.iam.getPolicy().then((data) => {\n     *   const policy = data[0];\n     *   const apiResponse = data[1];\n     * });\n     */\n\n    this.iam = new iam_1.IAM(pubsub, this.name);\n  }\n  /**\n   * Immediately sends all remaining queued data. This is mostly useful\n   * if you are planning to call close() on the PubSub object that holds\n   * the server connections.\n   *\n   * @param {EmptyCallback} [callback] Callback function.\n   * @returns {Promise<EmptyResponse>}\n   */\n\n\n  flush(callback) {\n    // It doesn't matter here if callback is undefined; the Publisher\n    // flush() will handle it.\n    this.publisher.flush(callback);\n  }\n  /**\n   * Create a topic.\n   *\n   * @param {object} [gaxOpts] Request configuration options, outlined\n   *     here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n   * @param {CreateTopicCallback} [callback] Callback function.\n   * @returns {Promise<CreateTopicResponse>}\n   *\n   * @example\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   *\n   * const topic = pubsub.topic('my-topic');\n   *\n   * topic.create((err, topic, apiResponse) => {\n   *   if (!err) {\n   *     // The topic was created successfully.\n   *   }\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * topic.create().then((data) => {\n   *   const topic = data[0];\n   *   const apiResponse = data[1];\n   * });\n   */\n\n\n  create(optsOrCallback, callback) {\n    const gaxOpts = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n    callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n    this.pubsub.createTopic(this.name, gaxOpts, callback);\n  }\n  /**\n   * Create a subscription to this topic.\n   *\n   * @see [Subscriptions: create API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.subscriptions/create}\n   *\n   * @throws {Error} If subscription name is omitted.\n   *\n   * @param {string} name The name of the subscription.\n   * @param {CreateSubscriptionRequest} [options] See a\n   *     [Subscription\n   * resource](https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.subscriptions).\n   * @param {CreateSubscriptionCallback} [callback] Callback function.\n   * @returns {Promise<CreateSubscriptionResponse>}\n   *\n   * @example\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   *\n   * const topic = pubsub.topic('my-topic');\n   * const callback = function(err, subscription, apiResponse) {};\n   *\n   * // Without specifying any options.\n   * topic.createSubscription('newMessages', callback);\n   *\n   * // With options.\n   * topic.createSubscription('newMessages', {\n   *   ackDeadlineSeconds: 90\n   * }, callback);\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * topic.createSubscription('newMessages').then((data) => {\n   *   const subscription = data[0];\n   *   const apiResponse = data[1];\n   * });\n   */\n\n\n  createSubscription(name, optsOrCallback, callback) {\n    const options = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n    callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n    this.pubsub.createSubscription(this, name, options, callback);\n  }\n  /**\n   * Delete the topic. This will not delete subscriptions to this topic.\n   *\n   * @see [Topics: delete API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.topics/delete}\n   *\n   * @param {object} [gaxOpts] Request configuration options, outlined\n   *     here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n   * @param {function} [callback] The callback function.\n   * @param {?error} callback.err An error returned while making this\n   *     request.\n   * @param {object} callback.apiResponse Raw API response.\n   *\n   * @example\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   *\n   * const topic = pubsub.topic('my-topic');\n   *\n   * topic.delete((err, apiResponse) => {});\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * topic.delete().then((data) => {\n   *   const apiResponse = data[0];\n   * });\n   */\n\n\n  delete(optsOrCallback, callback) {\n    const gaxOpts = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n    callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n    const reqOpts = {\n      topic: this.name\n    };\n    this.request({\n      client: 'PublisherClient',\n      method: 'deleteTopic',\n      reqOpts,\n      gaxOpts: gaxOpts\n    }, callback);\n  }\n  /**\n   * @typedef {array} TopicExistsResponse\n   * @property {boolean} 0 Whether the topic exists\n   */\n\n  /**\n   * @callback TopicExistsCallback\n   * @param {?Error} err Request error, if any.\n   * @param {boolean} exists Whether the topic exists.\n   */\n\n  /**\n   * Check if a topic exists.\n   *\n   * @param {TopicExistsCallback} [callback] Callback function.\n   * @returns {Promise<TopicExistsResponse>}\n   *\n   * @example\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   *\n   * const topic = pubsub.topic('my-topic');\n   *\n   * topic.exists((err, exists) => {});\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * topic.exists().then((data) => {\n   *   const exists = data[0];\n   * });\n   */\n\n\n  exists(callback) {\n    this.getMetadata(err => {\n      if (!err) {\n        callback(null, true);\n        return;\n      }\n\n      if (err.code === 5) {\n        callback(null, false);\n        return;\n      }\n\n      callback(err);\n    });\n  }\n  /**\n   * @typedef {array} GetTopicResponse\n   * @property {Topic} 0 The {@link Topic}.\n   * @property {object} 1 The full API response.\n   */\n\n  /**\n   * @callback GetTopicCallback\n   * @param {?Error} err Request error, if any.\n   * @param {Topic} topic The {@link Topic}.\n   * @param {object} apiResponse The full API response.\n   */\n\n  /**\n   * Get a topic if it exists.\n   *\n   * @param {object} [gaxOpts] Request configuration options, outlined\n   *     here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n   * @param {boolean} [gaxOpts.autoCreate=false] Automatically create the topic\n   *     does not already exist.\n   * @param {GetTopicCallback} [callback] Callback function.\n   * @returns {Promise<GetTopicResponse>}\n   *\n   * @example\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   *\n   * const topic = pubsub.topic('my-topic');\n   *\n   * topic.get((err, topic, apiResponse) => {\n   *   // The `topic` data has been populated.\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * topic.get().then((data) => {\n   *   const topic = data[0];\n   *   const apiResponse = data[1];\n   * });\n   */\n\n\n  get(optsOrCallback, callback) {\n    const gaxOpts = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n    callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n    const autoCreate = !!gaxOpts.autoCreate;\n    delete gaxOpts.autoCreate;\n    this.getMetadata(gaxOpts, (err, apiResponse) => {\n      if (!err) {\n        callback(null, this, apiResponse);\n        return;\n      }\n\n      if (err.code !== 5 || !autoCreate) {\n        callback(err, null, apiResponse);\n        return;\n      }\n\n      this.create(gaxOpts, callback);\n    });\n  }\n  /**\n   * @typedef {array} GetTopicMetadataResponse\n   * @property {object} 0 The full API response.\n   */\n\n  /**\n   * @callback GetTopicMetadataCallback\n   * @param {?Error} err Request error, if any.\n   * @param {object} apiResponse The full API response.\n   */\n\n  /**\n   * Get the official representation of this topic from the API.\n   *\n   * @see [Topics: get API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.topics/get}\n   *\n   * @param {object} [gaxOpts] Request configuration options, outlined\n   *     here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n   * @param {GetTopicMetadataCallback} [callback] Callback function.\n   * @returns {Promise<GetTopicMetadataResponse>}\n   *\n   * @example\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   *\n   * const topic = pubsub.topic('my-topic');\n   *\n   * topic.getMetadata((err, apiResponse) => {});\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * topic.getMetadata().then((data) => {\n   *   const apiResponse = data[0];\n   * });\n   */\n\n\n  getMetadata(optsOrCallback, callback) {\n    const gaxOpts = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n    callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n    const reqOpts = {\n      topic: this.name\n    };\n    this.request({\n      client: 'PublisherClient',\n      method: 'getTopic',\n      reqOpts,\n      gaxOpts: gaxOpts\n    }, (err, apiResponse) => {\n      if (!err) {\n        this.metadata = apiResponse;\n      }\n\n      callback(err, apiResponse);\n    });\n  }\n  /**\n   * Get a list of the subscriptions registered to this topic. You may\n   * optionally provide a query object as the first argument to customize the\n   * response.\n   *\n   * Your provided callback will be invoked with an error object if an API error\n   * occurred or an array of {module:pubsub/subscription} objects.\n   *\n   * @see [Subscriptions: list API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.topics.subscriptions/list}\n   *\n   * @param {GetSubscriptionsRequest} [query] Query object for listing subscriptions.\n   * @param {GetSubscriptionsCallback} [callback] Callback function.\n   * @returns {Promise<GetSubscriptionsResponse>}\n   *\n   * @example\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   *\n   * const topic = pubsub.topic('my-topic');\n   *\n   * topic.getSubscriptions((err, subscriptions) => {\n   *   // subscriptions is an array of `Subscription` objects.\n   * });\n   *\n   * // Customize the query.\n   * topic.getSubscriptions({\n   *   pageSize: 3\n   * }, callback);\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * topic.getSubscriptions().then((data) => {\n   *   const subscriptions = data[0];\n   * });\n   */\n\n\n  getSubscriptions(optsOrCallback, callback) {\n    const options = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n    callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n    const reqOpts = Object.assign({\n      topic: this.name\n    }, options);\n    delete reqOpts.gaxOpts;\n    delete reqOpts.autoPaginate;\n    const gaxOpts = Object.assign({\n      autoPaginate: options.autoPaginate\n    }, options.gaxOpts);\n    this.request({\n      client: 'PublisherClient',\n      method: 'listTopicSubscriptions',\n      reqOpts,\n      gaxOpts\n    }, (err, subNames, ...args) => {\n      let subscriptions;\n\n      if (subNames) {\n        subscriptions = subNames.map(sub => this.subscription(sub));\n      }\n\n      callback(err, subscriptions, ...args);\n    });\n  }\n  /**\n   * Publish the provided message.\n   *\n   * @deprecated Please use {@link Topic#publishMessage}.\n   *\n   * @throws {TypeError} If data is not a Buffer object.\n   * @throws {TypeError} If any value in `attributes` object is not a string.\n   *\n   * @param {buffer} data The message data. This must come in the form of a\n   *     Buffer object.\n   * @param {object.<string, string>} [attributes] Attributes for this message.\n   * @param {PublishCallback} [callback] Callback function.\n   * @returns {Promise<PublishResponse>}\n   *\n   * @example\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   *\n   * const topic = pubsub.topic('my-topic');\n   * const data = Buffer.from('Hello, world!');\n   *\n   * const callback = (err, messageId) => {\n   *   if (err) {\n   *     // Error handling omitted.\n   *   }\n   * };\n   *\n   * topic.publish(data, callback);\n   *\n   * @example <caption>Optionally you can provide an object containing attributes for the message. Note that all values in the object must be strings.</caption>\n   * const attributes = {\n   *   key: 'value'\n   * };\n   *\n   * topic.publish(data, attributes, callback);\n   *\n   * @example <caption>If the callback is omitted, we'll return a Promise.</caption>\n   * topic.publish(data).then((messageId) => {});\n   */\n\n\n  publish(data, attrsOrCb, callback) {\n    const attributes = typeof attrsOrCb === 'object' ? attrsOrCb : {};\n    callback = typeof attrsOrCb === 'function' ? attrsOrCb : callback;\n    return this.publishMessage({\n      data,\n      attributes\n    }, callback);\n  }\n  /**\n   * Publish the provided JSON. It should be noted that all messages published\n   * are done so in the form of a Buffer. This is simply a convenience method\n   * that will transform JSON into a Buffer before publishing.\n   * {@link Subscription} objects will always return message data in the form of\n   * a Buffer, so any JSON published will require manual deserialization.\n   *\n   * @deprecated Please use the `json` option via {@link Topic#publishMessage}.\n   *\n   * @throws {Error} If non-object data is provided.\n   *\n   * @param {object} json The JSON data to publish.\n   * @param {object} [attributes] Attributes for this message.\n   * @param {PublishCallback} [callback] Callback function.\n   * @returns {Promise<PublishResponse>}\n   *\n   * @example\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   * const topic = pubsub.topic('my-topic');\n   *\n   * const data = {\n   *   foo: 'bar'\n   * };\n   *\n   * const callback = (err, messageId) => {\n   *   if (err) {\n   *     // Error handling omitted.\n   *   }\n   * };\n   *\n   * topic.publishJSON(data, callback);\n   *\n   * @example <caption>Optionally you can provide an object containing attributes for the message. Note that all values in the object must be strings.</caption>\n   * const attributes = {\n   *   key: 'value'\n   * };\n   *\n   * topic.publishJSON(data, attributes, callback);\n   *\n   * @example <caption>If the callback is omitted, we'll return a Promise.</caption>\n   * topic.publishJSON(data).then((messageId) => {});\n   */\n\n\n  publishJSON(json, attrsOrCb, callback) {\n    if (!json || typeof json !== 'object') {\n      throw new Error('First parameter should be an object.');\n    }\n\n    const attributes = typeof attrsOrCb === 'object' ? attrsOrCb : {};\n    callback = typeof attrsOrCb === 'function' ? attrsOrCb : callback;\n    return this.publishMessage({\n      json,\n      attributes\n    }, callback);\n  }\n  /**\n   * @typedef {object} MessageOptions\n   * @property {buffer} [data] The message data.\n   * @property {object} [json] Convenience property to publish JSON data. This\n   *     will transform the provided JSON into a Buffer before publishing.\n   *     {@link Subscription} objects will always return message data in the\n   *     form of a Buffer, so any JSON published will require manual\n   *     deserialization.\n   * @property {object.<string, string>} [attributes] Attributes for this\n   *     message.\n   * @property {string} [orderingKey] A message ordering key.\n   */\n\n  /**\n   * Publish the provided message.\n   *\n   * @throws {TypeError} If data is not a Buffer object.\n   * @throws {TypeError} If any value in `attributes` object is not a string.\n   *\n   * @param {MessageOptions} message Message object.\n   * @param {PublishCallback} [callback] Callback function.\n   * @returns {Promise<PublishResponse>}\n   *\n   * @example\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   * const topic = pubsub.topic('my-topic');\n   *\n   * const data = Buffer.from('Hello, world!');\n   *\n   * const callback = (err, messageId) => {\n   *   if (err) {\n   *     // Error handling omitted.\n   *   }\n   * };\n   *\n   * topic.publishMessage({data}, callback);\n   *\n   * @example <caption>Publish JSON message data.</caption>\n   * const json = {foo: 'bar'};\n   *\n   * topic.publishMessage({json}, callback);\n   *\n   * @example <caption>To publish messages in order (this is still experimental), make sure message ordering is enabled and provide an ordering key</caption>\n   * const topic = pubsub.topic('ordered-topic', {messageOrdering: true});\n   * const orderingKey = 'my-key';\n   *\n   * topic.publishMessage({data, orderingKey}, callback);\n   *\n   * @example <caption>If the callback is omitted, we'll return a Promise.</caption>\n   * const [messageId] = await topic.publishMessage({data});\n   */\n\n\n  publishMessage(message, callback) {\n    message = Object.assign({}, message);\n\n    if (message.json && typeof message.json === 'object') {\n      message.data = Buffer.from(JSON.stringify(message.json));\n      delete message.json;\n    }\n\n    return this.publisher.publishMessage(message, callback);\n  }\n  /**\n   * In the event that the client fails to publish an ordered message, all\n   * subsequent publish calls using the same ordering key will fail. Calling\n   * this method will disregard the publish failure, allowing the supplied\n   * ordering key to be used again in the future.\n   *\n   * @param {string} orderingKey The ordering key in question.\n   *\n   * @example\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   * const topic = pubsub.topic('my-topic', {messageOrdering: true});\n   *\n   * const orderingKey = 'foo';\n   * const data = Buffer.from('Hello, order!');\n   *\n   * topic.publishMessage({data, orderingKey}, err => {\n   *   if (err) {\n   *     topic.resumePublishing(orderingKey);\n   *   }\n   * });\n   */\n\n\n  resumePublishing(orderingKey) {\n    this.publisher.resumePublishing(orderingKey);\n  }\n  /**\n   * @typedef {array} SetTopicMetadataResponse\n   * @property {object} 0 The full API response.\n   */\n\n  /**\n   * @callback SetTopicMetadataCallback\n   * @param {?Error} err Request error, if any.\n   * @param {object} apiResponse The full API response.\n   */\n\n  /**\n   * Updates the topic.\n   *\n   * @see [UpdateTopicRequest API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rpc/google.pubsub.v1#google.pubsub.v1.UpdateTopicRequest}\n   *\n   * @param {object} metadata The fields to update. This should be structured\n   *     like a {@link\n   * https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.topics#Topic|Topic\n   * object}.\n   * @param {object} [gaxOpts] Request configuration options, outlined\n   *     here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n   * @param {SetTopicMetadataCallback} [callback] Callback function.\n   * @returns {Promise<SetTopicMetadataResponse>}\n   *\n   * @example\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   *\n   * const topic = pubsub.topic('my-topic');\n   * const metadata = {\n   *   labels: {foo: 'bar'}\n   * };\n   *\n   * topic.setMetadata(metadata, err => {\n   *   if (err) {\n   *     // Error handling omitted.\n   *   }\n   * });\n   *\n   * @example <caption>If the callback is omitted, we'll return a\n   * Promise.</caption>\n   * topic.setMetadata(metadata).then((data) => {\n   *   const apiResponse = data[0];\n   * });\n   */\n\n\n  setMetadata(options, optsOrCallback, callback) {\n    const gaxOpts = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n    callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n    const topic = Object.assign({\n      name: this.name\n    }, options);\n    const updateMask = {\n      paths: Object.keys(options)\n    };\n    const reqOpts = {\n      topic,\n      updateMask\n    };\n    this.request({\n      client: 'PublisherClient',\n      method: 'updateTopic',\n      reqOpts,\n      gaxOpts\n    }, callback);\n  }\n  /**\n   * Set the publisher options.\n   *\n   * @param {PublishOptions} options The publisher options.\n   *\n   * @example\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   *\n   * const topic = pubsub.topic('my-topic');\n   *\n   * topic.setPublishOptions({\n   *   batching: {\n   *     maxMilliseconds: 10\n   *   }\n   * });\n   */\n\n\n  setPublishOptions(options) {\n    this.publisher.setOptions(options);\n  }\n  /**\n   * Get the default publisher options. These may be modified and passed\n   * back into {@link Topic#setPublishOptions}.\n   *\n   * @example\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   *\n   * const topic = pubsub.topic('my-topic');\n   *\n   * const defaults = topic.getPublishOptionDefaults();\n   * defaults.batching.maxMilliseconds = 10;\n   * topic.setPublishOptions(defaults);\n   */\n\n\n  getPublishOptionDefaults() {\n    // Generally I'd leave this as a static, but it'll be easier for users to\n    // get at when they're using the veneer objects.\n    return this.publisher.getOptionDefaults();\n  }\n  /**\n   * Create a Subscription object. This command by itself will not run any API\n   * requests. You will receive a {module:pubsub/subscription} object,\n   * which will allow you to interact with a subscription.\n   *\n   * @throws {Error} If subscription name is omitted.\n   *\n   * @param {string} name Name of the subscription.\n   * @param {SubscriberOptions} [options] Configuration object.\n   * @return {Subscription}\n   *\n   * @example\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   *\n   * const topic = pubsub.topic('my-topic');\n   * const subscription = topic.subscription('my-subscription');\n   *\n   * // Register a listener for `message` events.\n   * subscription.on('message', (message) => {\n   *   // Called every time a message is received.\n   *   // message.id = ID of the message.\n   *   // message.ackId = ID used to acknowledge the message receival.\n   *   // message.data = Contents of the message.\n   *   // message.attributes = Attributes of the message.\n   *   // message.publishTime = Timestamp when Pub/Sub received the message.\n   * });\n   */\n\n\n  subscription(name, options) {\n    options = options || {};\n    options.topic = this;\n    return this.pubsub.subscription(name, options);\n  }\n  /**\n   * Format the name of a topic. A Topic's full name is in the format of\n   * 'projects/{projectId}/topics/{topicName}'.\n   *\n   * @private\n   *\n   * @return {string}\n   */\n\n\n  static formatName_(projectId, name) {\n    // Simple check if the name is already formatted.\n    if (name.indexOf('/') > -1) {\n      return name;\n    }\n\n    return 'projects/' + projectId + '/topics/' + name;\n  }\n\n}\n\nexports.Topic = Topic;\n/**\n * Get a list of the {module:pubsub/subscription} objects registered to this\n * topic as a readable object stream.\n *\n * @method PubSub#getSubscriptionsStream\n * @param {GetSubscriptionsRequest} [options] Configuration object. See\n *     {@link PubSub#getSubscriptions} for a complete list of options.\n * @returns {ReadableStream} A readable stream of {@link Subscription} instances.\n *\n * @example\n * const {PubSub} = require('@google-cloud/pubsub');\n * const pubsub = new PubSub();\n *\n * const topic = pubsub.topic('my-topic');\n *\n * topic.getSubscriptionsStream()\n *   .on('error', console.error)\n *   .on('data', (subscription) => {\n *     // subscription is a Subscription object.\n *   })\n *   .on('end', () => {\n *     // All subscriptions retrieved.\n *   });\n *\n * //-\n * // If you anticipate many results, you can end a stream early to prevent\n * // unnecessary processing and API requests.\n * //-\n * topic.getSubscriptionsStream()\n *   .on('data', function(subscription) {\n *     this.end();\n *   });\n */\n\n/*! Developer Documentation\n *\n * These methods can be agto-paginated.\n */\n\npaginator_1.paginator.extend(Topic, ['getSubscriptions']);\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n\npromisify_1.promisifyAll(Topic, {\n  exclude: ['publish', 'publishJSON', 'publishMessage', 'setPublishOptions', 'getPublishOptionDefaults', 'subscription']\n});","map":{"version":3,"sources":["../../src/topic.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Topic = void 0;\nconst paginator_1 = require(\"@google-cloud/paginator\");\nconst promisify_1 = require(\"@google-cloud/promisify\");\nconst iam_1 = require(\"./iam\");\nconst publisher_1 = require(\"./publisher\");\n/**\n * A Topic object allows you to interact with a Cloud Pub/Sub topic.\n *\n * @class\n * @param {PubSub} pubsub PubSub object.\n * @param {string} name Name of the topic.\n * @param {PublishOptions} [options] Publisher configuration object.\n *\n * @example\n * const {PubSub} = require('@google-cloud/pubsub');\n * const pubsub = new PubSub();\n *\n * const topic = pubsub.topic('my-topic');\n *\n * @example <caption>To enable message ordering, set `enableMessageOrdering` to true. Please note that this does not persist to an actual topic.</caption>\n * const topic = pubsub.topic('ordered-topic', {enableMessageOrdering: true});\n */\nclass Topic {\n    constructor(pubsub, name, options) {\n        this.getSubscriptionsStream = paginator_1.paginator.streamify('getSubscriptions');\n        /**\n         * The fully qualified name of this topic.\n         * @name Topic#name\n         * @type {string}\n         */\n        this.name = Topic.formatName_(pubsub.projectId, name);\n        this.publisher = new publisher_1.Publisher(this, options);\n        /**\n         * The parent {@link PubSub} instance of this topic instance.\n         * @name Topic#pubsub\n         * @type {PubSub}\n         */\n        /**\n         * The parent {@link PubSub} instance of this topic instance.\n         * @name Topic#parent\n         * @type {PubSub}\n         */\n        this.parent = this.pubsub = pubsub;\n        this.request = pubsub.request.bind(pubsub);\n        /**\n         * [IAM (Identity and Access\n         * Management)](https://cloud.google.com/pubsub/access_control) allows you\n         * to set permissions on individual resources and offers a wider range of\n         * roles: editor, owner, publisher, subscriber, and viewer. This gives you\n         * greater flexibility and allows you to set more fine-grained access\n         * control.\n         *\n         * *The IAM access control features described in this document are Beta,\n         * including the API methods to get and set IAM policies, and to test IAM\n         * permissions. Cloud Pub/Sub's use of IAM features is not covered by\n         * any SLA or deprecation policy, and may be subject to\n         * backward-incompatible changes.*\n         *\n         * @name Topic#iam\n         * @mixes IAM\n         *\n         * @see [Access Control Overview]{@link https://cloud.google.com/pubsub/access_control}\n         * @see [What is Cloud IAM?]{@link https://cloud.google.com/iam/}\n         *\n         * @example\n         * const {PubSub} = require('@google-cloud/pubsub');\n         * const pubsub = new PubSub();\n         *\n         * const topic = pubsub.topic('my-topic');\n         *\n         * //-\n         * // Get the IAM policy for your topic.\n         * //-\n         * topic.iam.getPolicy((err, policy) => {\n         *   console.log(policy);\n         * });\n         *\n         * //-\n         * // If the callback is omitted, we'll return a Promise.\n         * //-\n         * topic.iam.getPolicy().then((data) => {\n         *   const policy = data[0];\n         *   const apiResponse = data[1];\n         * });\n         */\n        this.iam = new iam_1.IAM(pubsub, this.name);\n    }\n    /**\n     * Immediately sends all remaining queued data. This is mostly useful\n     * if you are planning to call close() on the PubSub object that holds\n     * the server connections.\n     *\n     * @param {EmptyCallback} [callback] Callback function.\n     * @returns {Promise<EmptyResponse>}\n     */\n    flush(callback) {\n        // It doesn't matter here if callback is undefined; the Publisher\n        // flush() will handle it.\n        this.publisher.flush(callback);\n    }\n    /**\n     * Create a topic.\n     *\n     * @param {object} [gaxOpts] Request configuration options, outlined\n     *     here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n     * @param {CreateTopicCallback} [callback] Callback function.\n     * @returns {Promise<CreateTopicResponse>}\n     *\n     * @example\n     * const {PubSub} = require('@google-cloud/pubsub');\n     * const pubsub = new PubSub();\n     *\n     * const topic = pubsub.topic('my-topic');\n     *\n     * topic.create((err, topic, apiResponse) => {\n     *   if (!err) {\n     *     // The topic was created successfully.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * topic.create().then((data) => {\n     *   const topic = data[0];\n     *   const apiResponse = data[1];\n     * });\n     */\n    create(optsOrCallback, callback) {\n        const gaxOpts = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n        callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n        this.pubsub.createTopic(this.name, gaxOpts, callback);\n    }\n    /**\n     * Create a subscription to this topic.\n     *\n     * @see [Subscriptions: create API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.subscriptions/create}\n     *\n     * @throws {Error} If subscription name is omitted.\n     *\n     * @param {string} name The name of the subscription.\n     * @param {CreateSubscriptionRequest} [options] See a\n     *     [Subscription\n     * resource](https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.subscriptions).\n     * @param {CreateSubscriptionCallback} [callback] Callback function.\n     * @returns {Promise<CreateSubscriptionResponse>}\n     *\n     * @example\n     * const {PubSub} = require('@google-cloud/pubsub');\n     * const pubsub = new PubSub();\n     *\n     * const topic = pubsub.topic('my-topic');\n     * const callback = function(err, subscription, apiResponse) {};\n     *\n     * // Without specifying any options.\n     * topic.createSubscription('newMessages', callback);\n     *\n     * // With options.\n     * topic.createSubscription('newMessages', {\n     *   ackDeadlineSeconds: 90\n     * }, callback);\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * topic.createSubscription('newMessages').then((data) => {\n     *   const subscription = data[0];\n     *   const apiResponse = data[1];\n     * });\n     */\n    createSubscription(name, optsOrCallback, callback) {\n        const options = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n        callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n        this.pubsub.createSubscription(this, name, options, callback);\n    }\n    /**\n     * Delete the topic. This will not delete subscriptions to this topic.\n     *\n     * @see [Topics: delete API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.topics/delete}\n     *\n     * @param {object} [gaxOpts] Request configuration options, outlined\n     *     here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n     * @param {function} [callback] The callback function.\n     * @param {?error} callback.err An error returned while making this\n     *     request.\n     * @param {object} callback.apiResponse Raw API response.\n     *\n     * @example\n     * const {PubSub} = require('@google-cloud/pubsub');\n     * const pubsub = new PubSub();\n     *\n     * const topic = pubsub.topic('my-topic');\n     *\n     * topic.delete((err, apiResponse) => {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * topic.delete().then((data) => {\n     *   const apiResponse = data[0];\n     * });\n     */\n    delete(optsOrCallback, callback) {\n        const gaxOpts = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n        callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n        const reqOpts = {\n            topic: this.name,\n        };\n        this.request({\n            client: 'PublisherClient',\n            method: 'deleteTopic',\n            reqOpts,\n            gaxOpts: gaxOpts,\n        }, callback);\n    }\n    /**\n     * @typedef {array} TopicExistsResponse\n     * @property {boolean} 0 Whether the topic exists\n     */\n    /**\n     * @callback TopicExistsCallback\n     * @param {?Error} err Request error, if any.\n     * @param {boolean} exists Whether the topic exists.\n     */\n    /**\n     * Check if a topic exists.\n     *\n     * @param {TopicExistsCallback} [callback] Callback function.\n     * @returns {Promise<TopicExistsResponse>}\n     *\n     * @example\n     * const {PubSub} = require('@google-cloud/pubsub');\n     * const pubsub = new PubSub();\n     *\n     * const topic = pubsub.topic('my-topic');\n     *\n     * topic.exists((err, exists) => {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * topic.exists().then((data) => {\n     *   const exists = data[0];\n     * });\n     */\n    exists(callback) {\n        this.getMetadata(err => {\n            if (!err) {\n                callback(null, true);\n                return;\n            }\n            if (err.code === 5) {\n                callback(null, false);\n                return;\n            }\n            callback(err);\n        });\n    }\n    /**\n     * @typedef {array} GetTopicResponse\n     * @property {Topic} 0 The {@link Topic}.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback GetTopicCallback\n     * @param {?Error} err Request error, if any.\n     * @param {Topic} topic The {@link Topic}.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Get a topic if it exists.\n     *\n     * @param {object} [gaxOpts] Request configuration options, outlined\n     *     here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n     * @param {boolean} [gaxOpts.autoCreate=false] Automatically create the topic\n     *     does not already exist.\n     * @param {GetTopicCallback} [callback] Callback function.\n     * @returns {Promise<GetTopicResponse>}\n     *\n     * @example\n     * const {PubSub} = require('@google-cloud/pubsub');\n     * const pubsub = new PubSub();\n     *\n     * const topic = pubsub.topic('my-topic');\n     *\n     * topic.get((err, topic, apiResponse) => {\n     *   // The `topic` data has been populated.\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * topic.get().then((data) => {\n     *   const topic = data[0];\n     *   const apiResponse = data[1];\n     * });\n     */\n    get(optsOrCallback, callback) {\n        const gaxOpts = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n        callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n        const autoCreate = !!gaxOpts.autoCreate;\n        delete gaxOpts.autoCreate;\n        this.getMetadata(gaxOpts, (err, apiResponse) => {\n            if (!err) {\n                callback(null, this, apiResponse);\n                return;\n            }\n            if (err.code !== 5 || !autoCreate) {\n                callback(err, null, apiResponse);\n                return;\n            }\n            this.create(gaxOpts, callback);\n        });\n    }\n    /**\n     * @typedef {array} GetTopicMetadataResponse\n     * @property {object} 0 The full API response.\n     */\n    /**\n     * @callback GetTopicMetadataCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Get the official representation of this topic from the API.\n     *\n     * @see [Topics: get API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.topics/get}\n     *\n     * @param {object} [gaxOpts] Request configuration options, outlined\n     *     here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n     * @param {GetTopicMetadataCallback} [callback] Callback function.\n     * @returns {Promise<GetTopicMetadataResponse>}\n     *\n     * @example\n     * const {PubSub} = require('@google-cloud/pubsub');\n     * const pubsub = new PubSub();\n     *\n     * const topic = pubsub.topic('my-topic');\n     *\n     * topic.getMetadata((err, apiResponse) => {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * topic.getMetadata().then((data) => {\n     *   const apiResponse = data[0];\n     * });\n     */\n    getMetadata(optsOrCallback, callback) {\n        const gaxOpts = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n        callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n        const reqOpts = {\n            topic: this.name,\n        };\n        this.request({\n            client: 'PublisherClient',\n            method: 'getTopic',\n            reqOpts,\n            gaxOpts: gaxOpts,\n        }, (err, apiResponse) => {\n            if (!err) {\n                this.metadata = apiResponse;\n            }\n            callback(err, apiResponse);\n        });\n    }\n    /**\n     * Get a list of the subscriptions registered to this topic. You may\n     * optionally provide a query object as the first argument to customize the\n     * response.\n     *\n     * Your provided callback will be invoked with an error object if an API error\n     * occurred or an array of {module:pubsub/subscription} objects.\n     *\n     * @see [Subscriptions: list API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.topics.subscriptions/list}\n     *\n     * @param {GetSubscriptionsRequest} [query] Query object for listing subscriptions.\n     * @param {GetSubscriptionsCallback} [callback] Callback function.\n     * @returns {Promise<GetSubscriptionsResponse>}\n     *\n     * @example\n     * const {PubSub} = require('@google-cloud/pubsub');\n     * const pubsub = new PubSub();\n     *\n     * const topic = pubsub.topic('my-topic');\n     *\n     * topic.getSubscriptions((err, subscriptions) => {\n     *   // subscriptions is an array of `Subscription` objects.\n     * });\n     *\n     * // Customize the query.\n     * topic.getSubscriptions({\n     *   pageSize: 3\n     * }, callback);\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * topic.getSubscriptions().then((data) => {\n     *   const subscriptions = data[0];\n     * });\n     */\n    getSubscriptions(optsOrCallback, callback) {\n        const options = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n        callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n        const reqOpts = Object.assign({\n            topic: this.name,\n        }, options);\n        delete reqOpts.gaxOpts;\n        delete reqOpts.autoPaginate;\n        const gaxOpts = Object.assign({\n            autoPaginate: options.autoPaginate,\n        }, options.gaxOpts);\n        this.request({\n            client: 'PublisherClient',\n            method: 'listTopicSubscriptions',\n            reqOpts,\n            gaxOpts,\n        }, (err, subNames, ...args) => {\n            let subscriptions;\n            if (subNames) {\n                subscriptions = subNames.map((sub) => this.subscription(sub));\n            }\n            callback(err, subscriptions, ...args);\n        });\n    }\n    /**\n     * Publish the provided message.\n     *\n     * @deprecated Please use {@link Topic#publishMessage}.\n     *\n     * @throws {TypeError} If data is not a Buffer object.\n     * @throws {TypeError} If any value in `attributes` object is not a string.\n     *\n     * @param {buffer} data The message data. This must come in the form of a\n     *     Buffer object.\n     * @param {object.<string, string>} [attributes] Attributes for this message.\n     * @param {PublishCallback} [callback] Callback function.\n     * @returns {Promise<PublishResponse>}\n     *\n     * @example\n     * const {PubSub} = require('@google-cloud/pubsub');\n     * const pubsub = new PubSub();\n     *\n     * const topic = pubsub.topic('my-topic');\n     * const data = Buffer.from('Hello, world!');\n     *\n     * const callback = (err, messageId) => {\n     *   if (err) {\n     *     // Error handling omitted.\n     *   }\n     * };\n     *\n     * topic.publish(data, callback);\n     *\n     * @example <caption>Optionally you can provide an object containing attributes for the message. Note that all values in the object must be strings.</caption>\n     * const attributes = {\n     *   key: 'value'\n     * };\n     *\n     * topic.publish(data, attributes, callback);\n     *\n     * @example <caption>If the callback is omitted, we'll return a Promise.</caption>\n     * topic.publish(data).then((messageId) => {});\n     */\n    publish(data, attrsOrCb, callback) {\n        const attributes = typeof attrsOrCb === 'object' ? attrsOrCb : {};\n        callback = typeof attrsOrCb === 'function' ? attrsOrCb : callback;\n        return this.publishMessage({ data, attributes }, callback);\n    }\n    /**\n     * Publish the provided JSON. It should be noted that all messages published\n     * are done so in the form of a Buffer. This is simply a convenience method\n     * that will transform JSON into a Buffer before publishing.\n     * {@link Subscription} objects will always return message data in the form of\n     * a Buffer, so any JSON published will require manual deserialization.\n     *\n     * @deprecated Please use the `json` option via {@link Topic#publishMessage}.\n     *\n     * @throws {Error} If non-object data is provided.\n     *\n     * @param {object} json The JSON data to publish.\n     * @param {object} [attributes] Attributes for this message.\n     * @param {PublishCallback} [callback] Callback function.\n     * @returns {Promise<PublishResponse>}\n     *\n     * @example\n     * const {PubSub} = require('@google-cloud/pubsub');\n     * const pubsub = new PubSub();\n     * const topic = pubsub.topic('my-topic');\n     *\n     * const data = {\n     *   foo: 'bar'\n     * };\n     *\n     * const callback = (err, messageId) => {\n     *   if (err) {\n     *     // Error handling omitted.\n     *   }\n     * };\n     *\n     * topic.publishJSON(data, callback);\n     *\n     * @example <caption>Optionally you can provide an object containing attributes for the message. Note that all values in the object must be strings.</caption>\n     * const attributes = {\n     *   key: 'value'\n     * };\n     *\n     * topic.publishJSON(data, attributes, callback);\n     *\n     * @example <caption>If the callback is omitted, we'll return a Promise.</caption>\n     * topic.publishJSON(data).then((messageId) => {});\n     */\n    publishJSON(json, attrsOrCb, callback) {\n        if (!json || typeof json !== 'object') {\n            throw new Error('First parameter should be an object.');\n        }\n        const attributes = typeof attrsOrCb === 'object' ? attrsOrCb : {};\n        callback = typeof attrsOrCb === 'function' ? attrsOrCb : callback;\n        return this.publishMessage({ json, attributes }, callback);\n    }\n    /**\n     * @typedef {object} MessageOptions\n     * @property {buffer} [data] The message data.\n     * @property {object} [json] Convenience property to publish JSON data. This\n     *     will transform the provided JSON into a Buffer before publishing.\n     *     {@link Subscription} objects will always return message data in the\n     *     form of a Buffer, so any JSON published will require manual\n     *     deserialization.\n     * @property {object.<string, string>} [attributes] Attributes for this\n     *     message.\n     * @property {string} [orderingKey] A message ordering key.\n     */\n    /**\n     * Publish the provided message.\n     *\n     * @throws {TypeError} If data is not a Buffer object.\n     * @throws {TypeError} If any value in `attributes` object is not a string.\n     *\n     * @param {MessageOptions} message Message object.\n     * @param {PublishCallback} [callback] Callback function.\n     * @returns {Promise<PublishResponse>}\n     *\n     * @example\n     * const {PubSub} = require('@google-cloud/pubsub');\n     * const pubsub = new PubSub();\n     * const topic = pubsub.topic('my-topic');\n     *\n     * const data = Buffer.from('Hello, world!');\n     *\n     * const callback = (err, messageId) => {\n     *   if (err) {\n     *     // Error handling omitted.\n     *   }\n     * };\n     *\n     * topic.publishMessage({data}, callback);\n     *\n     * @example <caption>Publish JSON message data.</caption>\n     * const json = {foo: 'bar'};\n     *\n     * topic.publishMessage({json}, callback);\n     *\n     * @example <caption>To publish messages in order (this is still experimental), make sure message ordering is enabled and provide an ordering key</caption>\n     * const topic = pubsub.topic('ordered-topic', {messageOrdering: true});\n     * const orderingKey = 'my-key';\n     *\n     * topic.publishMessage({data, orderingKey}, callback);\n     *\n     * @example <caption>If the callback is omitted, we'll return a Promise.</caption>\n     * const [messageId] = await topic.publishMessage({data});\n     */\n    publishMessage(message, callback) {\n        message = Object.assign({}, message);\n        if (message.json && typeof message.json === 'object') {\n            message.data = Buffer.from(JSON.stringify(message.json));\n            delete message.json;\n        }\n        return this.publisher.publishMessage(message, callback);\n    }\n    /**\n     * In the event that the client fails to publish an ordered message, all\n     * subsequent publish calls using the same ordering key will fail. Calling\n     * this method will disregard the publish failure, allowing the supplied\n     * ordering key to be used again in the future.\n     *\n     * @param {string} orderingKey The ordering key in question.\n     *\n     * @example\n     * const {PubSub} = require('@google-cloud/pubsub');\n     * const pubsub = new PubSub();\n     * const topic = pubsub.topic('my-topic', {messageOrdering: true});\n     *\n     * const orderingKey = 'foo';\n     * const data = Buffer.from('Hello, order!');\n     *\n     * topic.publishMessage({data, orderingKey}, err => {\n     *   if (err) {\n     *     topic.resumePublishing(orderingKey);\n     *   }\n     * });\n     */\n    resumePublishing(orderingKey) {\n        this.publisher.resumePublishing(orderingKey);\n    }\n    /**\n     * @typedef {array} SetTopicMetadataResponse\n     * @property {object} 0 The full API response.\n     */\n    /**\n     * @callback SetTopicMetadataCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Updates the topic.\n     *\n     * @see [UpdateTopicRequest API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rpc/google.pubsub.v1#google.pubsub.v1.UpdateTopicRequest}\n     *\n     * @param {object} metadata The fields to update. This should be structured\n     *     like a {@link\n     * https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.topics#Topic|Topic\n     * object}.\n     * @param {object} [gaxOpts] Request configuration options, outlined\n     *     here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n     * @param {SetTopicMetadataCallback} [callback] Callback function.\n     * @returns {Promise<SetTopicMetadataResponse>}\n     *\n     * @example\n     * const {PubSub} = require('@google-cloud/pubsub');\n     * const pubsub = new PubSub();\n     *\n     * const topic = pubsub.topic('my-topic');\n     * const metadata = {\n     *   labels: {foo: 'bar'}\n     * };\n     *\n     * topic.setMetadata(metadata, err => {\n     *   if (err) {\n     *     // Error handling omitted.\n     *   }\n     * });\n     *\n     * @example <caption>If the callback is omitted, we'll return a\n     * Promise.</caption>\n     * topic.setMetadata(metadata).then((data) => {\n     *   const apiResponse = data[0];\n     * });\n     */\n    setMetadata(options, optsOrCallback, callback) {\n        const gaxOpts = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n        callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n        const topic = Object.assign({ name: this.name }, options);\n        const updateMask = { paths: Object.keys(options) };\n        const reqOpts = { topic, updateMask };\n        this.request({\n            client: 'PublisherClient',\n            method: 'updateTopic',\n            reqOpts,\n            gaxOpts,\n        }, callback);\n    }\n    /**\n     * Set the publisher options.\n     *\n     * @param {PublishOptions} options The publisher options.\n     *\n     * @example\n     * const {PubSub} = require('@google-cloud/pubsub');\n     * const pubsub = new PubSub();\n     *\n     * const topic = pubsub.topic('my-topic');\n     *\n     * topic.setPublishOptions({\n     *   batching: {\n     *     maxMilliseconds: 10\n     *   }\n     * });\n     */\n    setPublishOptions(options) {\n        this.publisher.setOptions(options);\n    }\n    /**\n     * Get the default publisher options. These may be modified and passed\n     * back into {@link Topic#setPublishOptions}.\n     *\n     * @example\n     * const {PubSub} = require('@google-cloud/pubsub');\n     * const pubsub = new PubSub();\n     *\n     * const topic = pubsub.topic('my-topic');\n     *\n     * const defaults = topic.getPublishOptionDefaults();\n     * defaults.batching.maxMilliseconds = 10;\n     * topic.setPublishOptions(defaults);\n     */\n    getPublishOptionDefaults() {\n        // Generally I'd leave this as a static, but it'll be easier for users to\n        // get at when they're using the veneer objects.\n        return this.publisher.getOptionDefaults();\n    }\n    /**\n     * Create a Subscription object. This command by itself will not run any API\n     * requests. You will receive a {module:pubsub/subscription} object,\n     * which will allow you to interact with a subscription.\n     *\n     * @throws {Error} If subscription name is omitted.\n     *\n     * @param {string} name Name of the subscription.\n     * @param {SubscriberOptions} [options] Configuration object.\n     * @return {Subscription}\n     *\n     * @example\n     * const {PubSub} = require('@google-cloud/pubsub');\n     * const pubsub = new PubSub();\n     *\n     * const topic = pubsub.topic('my-topic');\n     * const subscription = topic.subscription('my-subscription');\n     *\n     * // Register a listener for `message` events.\n     * subscription.on('message', (message) => {\n     *   // Called every time a message is received.\n     *   // message.id = ID of the message.\n     *   // message.ackId = ID used to acknowledge the message receival.\n     *   // message.data = Contents of the message.\n     *   // message.attributes = Attributes of the message.\n     *   // message.publishTime = Timestamp when Pub/Sub received the message.\n     * });\n     */\n    subscription(name, options) {\n        options = options || {};\n        options.topic = this;\n        return this.pubsub.subscription(name, options);\n    }\n    /**\n     * Format the name of a topic. A Topic's full name is in the format of\n     * 'projects/{projectId}/topics/{topicName}'.\n     *\n     * @private\n     *\n     * @return {string}\n     */\n    static formatName_(projectId, name) {\n        // Simple check if the name is already formatted.\n        if (name.indexOf('/') > -1) {\n            return name;\n        }\n        return 'projects/' + projectId + '/topics/' + name;\n    }\n}\nexports.Topic = Topic;\n/**\n * Get a list of the {module:pubsub/subscription} objects registered to this\n * topic as a readable object stream.\n *\n * @method PubSub#getSubscriptionsStream\n * @param {GetSubscriptionsRequest} [options] Configuration object. See\n *     {@link PubSub#getSubscriptions} for a complete list of options.\n * @returns {ReadableStream} A readable stream of {@link Subscription} instances.\n *\n * @example\n * const {PubSub} = require('@google-cloud/pubsub');\n * const pubsub = new PubSub();\n *\n * const topic = pubsub.topic('my-topic');\n *\n * topic.getSubscriptionsStream()\n *   .on('error', console.error)\n *   .on('data', (subscription) => {\n *     // subscription is a Subscription object.\n *   })\n *   .on('end', () => {\n *     // All subscriptions retrieved.\n *   });\n *\n * //-\n * // If you anticipate many results, you can end a stream early to prevent\n * // unnecessary processing and API requests.\n * //-\n * topic.getSubscriptionsStream()\n *   .on('data', function(subscription) {\n *     this.end();\n *   });\n */\n/*! Developer Documentation\n *\n * These methods can be agto-paginated.\n */\npaginator_1.paginator.extend(Topic, ['getSubscriptions']);\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\npromisify_1.promisifyAll(Topic, {\n    exclude: [\n        'publish',\n        'publishJSON',\n        'publishMessage',\n        'setPublishOptions',\n        'getPublishOptionDefaults',\n        'subscription',\n    ],\n});\n//# sourceMappingURL=topic.js.map"]},"metadata":{},"sourceType":"script"}