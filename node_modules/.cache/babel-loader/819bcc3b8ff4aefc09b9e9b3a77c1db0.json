{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NonRecordingSpan } from './NonRecordingSpan';\nimport { TraceFlags } from './trace_flags';\nvar VALID_TRACEID_REGEX = /^([0-9a-f]{32})$/i;\nvar VALID_SPANID_REGEX = /^[0-9a-f]{16}$/i;\nexport var INVALID_SPANID = '0000000000000000';\nexport var INVALID_TRACEID = '00000000000000000000000000000000';\nexport var INVALID_SPAN_CONTEXT = {\n  traceId: INVALID_TRACEID,\n  spanId: INVALID_SPANID,\n  traceFlags: TraceFlags.NONE\n};\nexport function isValidTraceId(traceId) {\n  return VALID_TRACEID_REGEX.test(traceId) && traceId !== INVALID_TRACEID;\n}\nexport function isValidSpanId(spanId) {\n  return VALID_SPANID_REGEX.test(spanId) && spanId !== INVALID_SPANID;\n}\n/**\n * Returns true if this {@link SpanContext} is valid.\n * @return true if this {@link SpanContext} is valid.\n */\n\nexport function isSpanContextValid(spanContext) {\n  return isValidTraceId(spanContext.traceId) && isValidSpanId(spanContext.spanId);\n}\n/**\n * Wrap the given {@link SpanContext} in a new non-recording {@link Span}\n *\n * @param spanContext span context to be wrapped\n * @returns a new non-recording {@link Span} with the provided context\n */\n\nexport function wrapSpanContext(spanContext) {\n  return new NonRecordingSpan(spanContext);\n}","map":{"version":3,"sources":["../../../src/trace/spancontext-utils.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AACH,SAAS,gBAAT,QAAiC,oBAAjC;AAGA,SAAS,UAAT,QAA2B,eAA3B;AAEA,IAAM,mBAAmB,GAAG,mBAA5B;AACA,IAAM,kBAAkB,GAAG,iBAA3B;AACA,OAAO,IAAM,cAAc,GAAG,kBAAvB;AACP,OAAO,IAAM,eAAe,GAAG,kCAAxB;AACP,OAAO,IAAM,oBAAoB,GAAgB;AAC/C,EAAA,OAAO,EAAE,eADsC;AAE/C,EAAA,MAAM,EAAE,cAFuC;AAG/C,EAAA,UAAU,EAAE,UAAU,CAAC;AAHwB,CAA1C;AAMP,OAAM,SAAU,cAAV,CAAyB,OAAzB,EAAwC;AAC5C,SAAO,mBAAmB,CAAC,IAApB,CAAyB,OAAzB,KAAqC,OAAO,KAAK,eAAxD;AACD;AAED,OAAM,SAAU,aAAV,CAAwB,MAAxB,EAAsC;AAC1C,SAAO,kBAAkB,CAAC,IAAnB,CAAwB,MAAxB,KAAmC,MAAM,KAAK,cAArD;AACD;AAED;;;AAGG;;AACH,OAAM,SAAU,kBAAV,CAA6B,WAA7B,EAAqD;AACzD,SACE,cAAc,CAAC,WAAW,CAAC,OAAb,CAAd,IAAuC,aAAa,CAAC,WAAW,CAAC,MAAb,CADtD;AAGD;AAED;;;;;AAKG;;AACH,OAAM,SAAU,eAAV,CAA0B,WAA1B,EAAkD;AACtD,SAAO,IAAI,gBAAJ,CAAqB,WAArB,CAAP;AACD","sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NonRecordingSpan } from './NonRecordingSpan';\nimport { TraceFlags } from './trace_flags';\nvar VALID_TRACEID_REGEX = /^([0-9a-f]{32})$/i;\nvar VALID_SPANID_REGEX = /^[0-9a-f]{16}$/i;\nexport var INVALID_SPANID = '0000000000000000';\nexport var INVALID_TRACEID = '00000000000000000000000000000000';\nexport var INVALID_SPAN_CONTEXT = {\n    traceId: INVALID_TRACEID,\n    spanId: INVALID_SPANID,\n    traceFlags: TraceFlags.NONE,\n};\nexport function isValidTraceId(traceId) {\n    return VALID_TRACEID_REGEX.test(traceId) && traceId !== INVALID_TRACEID;\n}\nexport function isValidSpanId(spanId) {\n    return VALID_SPANID_REGEX.test(spanId) && spanId !== INVALID_SPANID;\n}\n/**\n * Returns true if this {@link SpanContext} is valid.\n * @return true if this {@link SpanContext} is valid.\n */\nexport function isSpanContextValid(spanContext) {\n    return (isValidTraceId(spanContext.traceId) && isValidSpanId(spanContext.spanId));\n}\n/**\n * Wrap the given {@link SpanContext} in a new non-recording {@link Span}\n *\n * @param spanContext span context to be wrapped\n * @returns a new non-recording {@link Span} with the provided context\n */\nexport function wrapSpanContext(spanContext) {\n    return new NonRecordingSpan(spanContext);\n}\n//# sourceMappingURL=spancontext-utils.js.map"]},"metadata":{},"sourceType":"module"}