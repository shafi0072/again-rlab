{"ast":null,"code":"import React from 'react';\n/** Returns whether the React.ReactNode has props (and therefore is an `Element` versus primitive type) */\n\nfunction isChildWithProps(child) {\n  return !!child && typeof child === 'object' && 'props' in child && child.props != null;\n}\n/**\n * Returns children and grandchildren of type React.ReactNode.\n * Flattens children one level to support React.Fragments and Array type children.\n */\n\n\nexport default function getChildrenAndGrandchildrenWithProps(children) {\n  return React.Children.toArray(children).flatMap(function (child) {\n    if (typeof child === 'object' && 'props' in child && child.props.children) {\n      return child.props.children;\n    }\n\n    return child;\n  }).filter(function (child) {\n    return isChildWithProps(child);\n  });\n}","map":{"version":3,"sources":["C:/remotePackRlab-acab49ee44aa8f06acbfc147116dbc3387885161/node_modules/@visx/xychart/esm/utils/getChildrenAndGrandchildrenWithProps.js"],"names":["React","isChildWithProps","child","props","getChildrenAndGrandchildrenWithProps","children","Children","toArray","flatMap","filter"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA;;AAEA,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AAC/B,SAAO,CAAC,CAACA,KAAF,IAAW,OAAOA,KAAP,KAAiB,QAA5B,IAAwC,WAAWA,KAAnD,IAA4DA,KAAK,CAACC,KAAN,IAAe,IAAlF;AACD;AACD;AACA;AACA;AACA;;;AAGA,eAAe,SAASC,oCAAT,CAA8CC,QAA9C,EAAwD;AACrE,SAAOL,KAAK,CAACM,QAAN,CAAeC,OAAf,CAAuBF,QAAvB,EAAiCG,OAAjC,CAAyC,UAAUN,KAAV,EAAiB;AAC/D,QAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,WAAWA,KAAxC,IAAiDA,KAAK,CAACC,KAAN,CAAYE,QAAjE,EAA2E;AACzE,aAAOH,KAAK,CAACC,KAAN,CAAYE,QAAnB;AACD;;AAED,WAAOH,KAAP;AACD,GANM,EAMJO,MANI,CAMG,UAAUP,KAAV,EAAiB;AACzB,WAAOD,gBAAgB,CAACC,KAAD,CAAvB;AACD,GARM,CAAP;AASD","sourcesContent":["import React from 'react';\n/** Returns whether the React.ReactNode has props (and therefore is an `Element` versus primitive type) */\n\nfunction isChildWithProps(child) {\n  return !!child && typeof child === 'object' && 'props' in child && child.props != null;\n}\n/**\n * Returns children and grandchildren of type React.ReactNode.\n * Flattens children one level to support React.Fragments and Array type children.\n */\n\n\nexport default function getChildrenAndGrandchildrenWithProps(children) {\n  return React.Children.toArray(children).flatMap(function (child) {\n    if (typeof child === 'object' && 'props' in child && child.props.children) {\n      return child.props.children;\n    }\n\n    return child;\n  }).filter(function (child) {\n    return isChildWithProps(child);\n  });\n}"]},"metadata":{},"sourceType":"module"}