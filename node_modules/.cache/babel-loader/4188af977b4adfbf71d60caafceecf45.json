{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { context } from '../';\nimport { getSpanContext, setSpan } from '../trace/context-utils';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nimport { isSpanContextValid } from './spancontext-utils';\n/**\n * No-op implementations of {@link Tracer}.\n */\n\nvar NoopTracer =\n/** @class */\nfunction () {\n  function NoopTracer() {} // startSpan starts a noop span.\n\n\n  NoopTracer.prototype.startSpan = function (name, options, context) {\n    var root = Boolean(options === null || options === void 0 ? void 0 : options.root);\n\n    if (root) {\n      return new NonRecordingSpan();\n    }\n\n    var parentFromContext = context && getSpanContext(context);\n\n    if (isSpanContext(parentFromContext) && isSpanContextValid(parentFromContext)) {\n      return new NonRecordingSpan(parentFromContext);\n    } else {\n      return new NonRecordingSpan();\n    }\n  };\n\n  NoopTracer.prototype.startActiveSpan = function (name, arg2, arg3, arg4) {\n    var opts;\n    var ctx;\n    var fn;\n\n    if (arguments.length < 2) {\n      return;\n    } else if (arguments.length === 2) {\n      fn = arg2;\n    } else if (arguments.length === 3) {\n      opts = arg2;\n      fn = arg3;\n    } else {\n      opts = arg2;\n      ctx = arg3;\n      fn = arg4;\n    }\n\n    var parentContext = ctx !== null && ctx !== void 0 ? ctx : context.active();\n    var span = this.startSpan(name, opts, parentContext);\n    var contextWithSpanSet = setSpan(parentContext, span);\n    return context.with(contextWithSpanSet, fn, undefined, span);\n  };\n\n  return NoopTracer;\n}();\n\nexport { NoopTracer };\n\nfunction isSpanContext(spanContext) {\n  return typeof spanContext === 'object' && typeof spanContext['spanId'] === 'string' && typeof spanContext['traceId'] === 'string' && typeof spanContext['traceFlags'] === 'number';\n}","map":{"version":3,"sources":["../../../src/trace/NoopTracer.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAEH,SAAS,OAAT,QAAwB,KAAxB;AAEA,SAAS,cAAT,EAAyB,OAAzB,QAAwC,wBAAxC;AACA,SAAS,gBAAT,QAAiC,oBAAjC;AAEA,SAAS,kBAAT,QAAmC,qBAAnC;AAKA;;AAEG;;AACH,IAAA,UAAA;AAAA;AAAA,YAAA;AAAA,WAAA,UAAA,GAAA,CAgEC,CAhED,CACE;;;AACA,EAAA,UAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,IAAV,EAAwB,OAAxB,EAA+C,OAA/C,EAAgE;AAC9D,QAAM,IAAI,GAAG,OAAO,CAAC,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,IAAV,CAApB;;AACA,QAAI,IAAJ,EAAU;AACR,aAAO,IAAI,gBAAJ,EAAP;AACD;;AAED,QAAM,iBAAiB,GAAG,OAAO,IAAI,cAAc,CAAC,OAAD,CAAnD;;AAEA,QACE,aAAa,CAAC,iBAAD,CAAb,IACA,kBAAkB,CAAC,iBAAD,CAFpB,EAGE;AACA,aAAO,IAAI,gBAAJ,CAAqB,iBAArB,CAAP;AACD,KALD,MAKO;AACL,aAAO,IAAI,gBAAJ,EAAP;AACD;AACF,GAhBD;;AAiCA,EAAA,UAAA,CAAA,SAAA,CAAA,eAAA,GAAA,UACE,IADF,EAEE,IAFF,EAGE,IAHF,EAIE,IAJF,EAIU;AAER,QAAI,IAAJ;AACA,QAAI,GAAJ;AACA,QAAI,EAAJ;;AAEA,QAAI,SAAS,CAAC,MAAV,GAAmB,CAAvB,EAA0B;AACxB;AACD,KAFD,MAEO,IAAI,SAAS,CAAC,MAAV,KAAqB,CAAzB,EAA4B;AACjC,MAAA,EAAE,GAAG,IAAL;AACD,KAFM,MAEA,IAAI,SAAS,CAAC,MAAV,KAAqB,CAAzB,EAA4B;AACjC,MAAA,IAAI,GAAG,IAAP;AACA,MAAA,EAAE,GAAG,IAAL;AACD,KAHM,MAGA;AACL,MAAA,IAAI,GAAG,IAAP;AACA,MAAA,GAAG,GAAG,IAAN;AACA,MAAA,EAAE,GAAG,IAAL;AACD;;AAED,QAAM,aAAa,GAAG,GAAG,KAAA,IAAH,IAAA,GAAG,KAAA,KAAA,CAAH,GAAA,GAAA,GAAO,OAAO,CAAC,MAAR,EAA7B;AACA,QAAM,IAAI,GAAG,KAAK,SAAL,CAAe,IAAf,EAAqB,IAArB,EAA2B,aAA3B,CAAb;AACA,QAAM,kBAAkB,GAAG,OAAO,CAAC,aAAD,EAAgB,IAAhB,CAAlC;AAEA,WAAO,OAAO,CAAC,IAAR,CAAa,kBAAb,EAAiC,EAAjC,EAAqC,SAArC,EAAgD,IAAhD,CAAP;AACD,GA5BD;;AA6BF,SAAA,UAAA;AAAC,CAhED,EAAA;;;;AAkEA,SAAS,aAAT,CAAuB,WAAvB,EAAuC;AACrC,SACE,OAAO,WAAP,KAAuB,QAAvB,IACA,OAAO,WAAW,CAAC,QAAD,CAAlB,KAAiC,QADjC,IAEA,OAAO,WAAW,CAAC,SAAD,CAAlB,KAAkC,QAFlC,IAGA,OAAO,WAAW,CAAC,YAAD,CAAlB,KAAqC,QAJvC;AAMD","sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { context } from '../';\nimport { getSpanContext, setSpan } from '../trace/context-utils';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nimport { isSpanContextValid } from './spancontext-utils';\n/**\n * No-op implementations of {@link Tracer}.\n */\nvar NoopTracer = /** @class */ (function () {\n    function NoopTracer() {\n    }\n    // startSpan starts a noop span.\n    NoopTracer.prototype.startSpan = function (name, options, context) {\n        var root = Boolean(options === null || options === void 0 ? void 0 : options.root);\n        if (root) {\n            return new NonRecordingSpan();\n        }\n        var parentFromContext = context && getSpanContext(context);\n        if (isSpanContext(parentFromContext) &&\n            isSpanContextValid(parentFromContext)) {\n            return new NonRecordingSpan(parentFromContext);\n        }\n        else {\n            return new NonRecordingSpan();\n        }\n    };\n    NoopTracer.prototype.startActiveSpan = function (name, arg2, arg3, arg4) {\n        var opts;\n        var ctx;\n        var fn;\n        if (arguments.length < 2) {\n            return;\n        }\n        else if (arguments.length === 2) {\n            fn = arg2;\n        }\n        else if (arguments.length === 3) {\n            opts = arg2;\n            fn = arg3;\n        }\n        else {\n            opts = arg2;\n            ctx = arg3;\n            fn = arg4;\n        }\n        var parentContext = ctx !== null && ctx !== void 0 ? ctx : context.active();\n        var span = this.startSpan(name, opts, parentContext);\n        var contextWithSpanSet = setSpan(parentContext, span);\n        return context.with(contextWithSpanSet, fn, undefined, span);\n    };\n    return NoopTracer;\n}());\nexport { NoopTracer };\nfunction isSpanContext(spanContext) {\n    return (typeof spanContext === 'object' &&\n        typeof spanContext['spanId'] === 'string' &&\n        typeof spanContext['traceId'] === 'string' &&\n        typeof spanContext['traceFlags'] === 'number');\n}\n//# sourceMappingURL=NoopTracer.js.map"]},"metadata":{},"sourceType":"module"}