{"ast":null,"code":"import React, { useMemo, useState } from 'react';\nimport DataRegistry from '../classes/DataRegistry';\n/** Hook that returns an API equivalent to DataRegistry but which updates as needed for use as a hook. */\n\nexport default function useDataRegistry() {\n  var _useState = useState(Math.random()),\n      forceUpdate = _useState[1];\n\n  var privateRegistry = useMemo(function () {\n    return new DataRegistry();\n  }, []);\n  return useMemo(function () {\n    return {\n      registerData: function registerData() {\n        privateRegistry.registerData.apply(privateRegistry, arguments);\n        forceUpdate(Math.random());\n      },\n      unregisterData: function unregisterData() {\n        privateRegistry.unregisterData.apply(privateRegistry, arguments);\n        forceUpdate(Math.random());\n      },\n      entries: function entries() {\n        return privateRegistry.entries();\n      },\n      get: function get(key) {\n        return privateRegistry.get(key);\n      },\n      keys: function keys() {\n        return privateRegistry.keys();\n      }\n    };\n  }, [privateRegistry]);\n}","map":{"version":3,"sources":["C:/remotePackRlab-acab49ee44aa8f06acbfc147116dbc3387885161/node_modules/@visx/xychart/esm/hooks/useDataRegistry.js"],"names":["React","useMemo","useState","DataRegistry","useDataRegistry","_useState","Math","random","forceUpdate","privateRegistry","registerData","apply","arguments","unregisterData","entries","get","key","keys"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,OAAhB,EAAyBC,QAAzB,QAAyC,OAAzC;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AAEA;;AACA,eAAe,SAASC,eAAT,GAA2B;AACxC,MAAIC,SAAS,GAAGH,QAAQ,CAACI,IAAI,CAACC,MAAL,EAAD,CAAxB;AAAA,MACIC,WAAW,GAAGH,SAAS,CAAC,CAAD,CAD3B;;AAGA,MAAII,eAAe,GAAGR,OAAO,CAAC,YAAY;AACxC,WAAO,IAAIE,YAAJ,EAAP;AACD,GAF4B,EAE1B,EAF0B,CAA7B;AAGA,SAAOF,OAAO,CAAC,YAAY;AACzB,WAAO;AACLS,MAAAA,YAAY,EAAE,SAASA,YAAT,GAAwB;AACpCD,QAAAA,eAAe,CAACC,YAAhB,CAA6BC,KAA7B,CAAmCF,eAAnC,EAAoDG,SAApD;AACAJ,QAAAA,WAAW,CAACF,IAAI,CAACC,MAAL,EAAD,CAAX;AACD,OAJI;AAKLM,MAAAA,cAAc,EAAE,SAASA,cAAT,GAA0B;AACxCJ,QAAAA,eAAe,CAACI,cAAhB,CAA+BF,KAA/B,CAAqCF,eAArC,EAAsDG,SAAtD;AACAJ,QAAAA,WAAW,CAACF,IAAI,CAACC,MAAL,EAAD,CAAX;AACD,OARI;AASLO,MAAAA,OAAO,EAAE,SAASA,OAAT,GAAmB;AAC1B,eAAOL,eAAe,CAACK,OAAhB,EAAP;AACD,OAXI;AAYLC,MAAAA,GAAG,EAAE,SAASA,GAAT,CAAaC,GAAb,EAAkB;AACrB,eAAOP,eAAe,CAACM,GAAhB,CAAoBC,GAApB,CAAP;AACD,OAdI;AAeLC,MAAAA,IAAI,EAAE,SAASA,IAAT,GAAgB;AACpB,eAAOR,eAAe,CAACQ,IAAhB,EAAP;AACD;AAjBI,KAAP;AAmBD,GApBa,EAoBX,CAACR,eAAD,CApBW,CAAd;AAqBD","sourcesContent":["import React, { useMemo, useState } from 'react';\nimport DataRegistry from '../classes/DataRegistry';\n\n/** Hook that returns an API equivalent to DataRegistry but which updates as needed for use as a hook. */\nexport default function useDataRegistry() {\n  var _useState = useState(Math.random()),\n      forceUpdate = _useState[1];\n\n  var privateRegistry = useMemo(function () {\n    return new DataRegistry();\n  }, []);\n  return useMemo(function () {\n    return {\n      registerData: function registerData() {\n        privateRegistry.registerData.apply(privateRegistry, arguments);\n        forceUpdate(Math.random());\n      },\n      unregisterData: function unregisterData() {\n        privateRegistry.unregisterData.apply(privateRegistry, arguments);\n        forceUpdate(Math.random());\n      },\n      entries: function entries() {\n        return privateRegistry.entries();\n      },\n      get: function get(key) {\n        return privateRegistry.get(key);\n      },\n      keys: function keys() {\n        return privateRegistry.keys();\n      }\n    };\n  }, [privateRegistry]);\n}"]},"metadata":{},"sourceType":"module"}